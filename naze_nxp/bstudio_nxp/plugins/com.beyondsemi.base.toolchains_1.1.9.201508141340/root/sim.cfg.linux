/*
 * Default basim configuration template for Linux hosts
 *
 * NOTE: IDE uses this as starting point and modifies it
 *       appropriately. If you want to use this from command
 *       line common options to change include endianness
 *       (on memory and CPU), method to interact with UART, etc.
/*

/* MEMORY SECTION

   This section specifies how the memory is generated and the blocks
   it consists of.

   bus = "<bus_identifier>:<board_group>.<bus_master_num>"
      Specifies which bus the memory will slave off

   type = random/unknown/pattern
      Specifies the initial memory values.
      'random' generates random memory using seed 'random_seed'.
      'pattern' fills memory with 'pattern'.
      'unknown' does not specify how memory should be generated,
      leaving the memory in a undefined state. This is the fastest
      option.

   random_seed = <value>
      random seed for randomizer, used if type = 'random'.

   pattern = <value>
      pattern to fill memory, used if type = 'pattern'.

   nmemories = <value>
      number of memory instances connected

   baseaddr = <hex_value>
      memory start address

   size = <hex_value>
      memory size

   name = "<string>"
      memory block name

   ce = <value>
      chip enable index of the memory instance

   mc = <value>
      memory controller this memory is connected to

   delayr = <value>
      cycles, required for read access, -1 if instance does not support reading

   delayw = <value>
      cycles, required for write access, -1 if instance does not support writing

   endianess = be/le
      Specifies whether the memory is big or little endian
*/

section memory
  bus = "wb:0.0"

  /*random_seed = 12345
  type = random*/
  pattern = 0x00
  type = unknown /* Fastest */

  name = "RAM"
  ce = 1
  mc = 0
  baseaddr = 0x00000000
  size = 0x10000000
  delayr = 1
  delayw = 1
  endianess = be
end

/* IMMU SECTION

    This section configures the Instruction Memory Manangement Unit

    bus = "ba_spr:<board_group>.<bus_master_num>"
       Specifies which spr bus to slave off

    enabled = 0/1
       '0': disabled
       '1': enabled
       (NOTE: UPR bit is set)

    nsets = <value>
       number of ITLB sets; must be power of two

    nways = <value>
       number of ITLB ways

    pagesize = <value>
       instruction page size; must be power of two

    entrysize = <value>
       instruction entry size in bytes

    ustates = <value>
       number of ITLB usage states (2, 3, 4 etc., max is 4)
       
    hitdelay = <value>
       number of cycles immu hit costs
    
    missdelay = <value>
       number of cycles immu miss costs

    control_bits = 0/1
       enable/disable control bits (LRU,CID(MR) & A,D(TM))

    replacement = lru/bin_tree
       Replacement strategy to use
*/

section immu
  bus = "ba_spr:0.0"
  enabled = 1
  nsets = 64
  nways = 1
  pagesize = 8192
  hitdelay = 0
  missdelay = 0
  control_bits = 0
  replacement = lru
end


/* DMMU SECTION

    This section configures the Data Memory Manangement Unit

    bus = "ba_spr:<board_group>.<bus_master_num>"
       Specifies which spr bus to slave off

    enabled = 0/1
       '0': disabled
       '1': enabled
       (NOTE: UPR bit is set)

    nsets = <value>
       number of DTLB sets; must be power of two

    nways = <value>
       number of DTLB ways

    pagesize = <value>
       data page size; must be power of two

    entrysize = <value>
       data entry size in bytes

    ustates = <value>
       number of DTLB usage states (2, 3, 4 etc., max is 4)

    hitdelay = <value>
       number of cycles dmmu hit costs

    missdelay = <value>
       number of cycles dmmu miss costs

    control_bits = 0/1
       enable/disable control bits (LRU,CID(MR) & A,D(TM))

    replacement = lru/bin_tree
       Replacement strategy to use
*/

section dmmu
  bus = "ba_spr:0.0"
  enabled = 1
  nsets = 64
  nways = 1
  pagesize = 8192
  hitdelay = 0
  missdelay = 0
  control_bits = 0
  replacement = lru
end


/* IC SECTION

   This section configures the Instruction Cache

   bus = "ba_spr:<board_group>.<bus_master_num>"
       Specifies which spr bus to slave off

   enabled = 0/1
       '0': disabled
       '1': enabled
      (NOTE: UPR bit is set)

   nsets = <value>
      number of IC sets; must be power of two

   nways = <value>
      number of IC ways

   blocksize = <value>
      IC block size in bytes; must be power of two

   ustates = <value>
      number of IC usage states (2, 3, 4 etc., max is 4)

   hitdelay = <value>
      number of cycles ic hit costs
    
   missdelay = <value>
      number of cycles ic miss costs
      
   range_inv = 0/1
      Specifies whether range invalidation is supported or not
*/

section ic
  bus = "ba_spr:0.0"
  enabled = 0
  nsets = 512
  nways = 1
  blocksize = 16
  hitdelay = 0
  missdelay = 0
  range_inv = 1
end


/* DC SECTION

   This section configures the Data Cache

   bus = "ba_spr:<board_group>.<bus_master_num>"
       Specifies which spr bus to slave off

   enabled = 0/1
       '0': disabled
       '1': enabled
      (NOTE: UPR bit is set)

   nsets = <value>
      number of DC sets; must be power of two

   nways = <value>
      number of DC ways

   blocksize = <value>
      DC block size in bytes; must be power of two

   ustates = <value>
      number of DC usage states (2, 3, 4 etc., max is 4)

   load_hitdelay = <value>
      number of cycles dc load hit costs
   
   load_missdelay = <value>
      number of cycles dc load miss costs
       
   store_hitdelay = <value>
      number of cycles dc load hit costs
    
   store_missdelay = <value>
      number of cycles dc load miss costs

   range_inv = 0/1
      Specifies whether range invalidation is supported or not
*/

section dc
  bus = "ba_spr:0.0"
  enabled = 0
  nsets = 512
  nways = 1
  blocksize = 16
  load_hitdelay = 0
  load_missdelay = 0
  store_hitdelay = 0
  store_missdelay = 0
  range_inv = 1
end


/* 
  Memory Protection Unit section

  bus = "ba_spr:<board_group>.<bus_master_num>"
      Specifies which spr bus to slave off

  enabled = 0/1
      0: MPU is disabled
      1: MPU is enabled

  regions = n
      Number of MPU memory regions implemented
*/
   
section mpu
  enabled = 0
  bus = "ba_spr:0.0"
  regions = 8
end


/* PIC SECTION

  This section specifies how the pic should behave

  NOTE: This is legacy PIC implementation. 
        See vic section for new VIC/PIC.

  bus = "ba_spr:<board_group>.<bus_master_num>"
      Specifies which spr bus to slave off

  enabled = 0/1
      0: programmable interrupt controller is disabled
      1: programmable interrupt controller is enabled

  edge_trigger = 0/1
      0: level triggered PIC
      1: edge triggered PIC

  ibusm = "int:<board_group>.<interrupt_num>"
      Interrupt bus to master (the bus where the ba cpu is being a slave)

  ibuss = "int:<board_group>.<interrupt_num>"
      Interrupt bus to slave off (the bus to which peripherals connect to).
      Slaves off the specifed bus number and the consecutive 32 buses
*/

/*
section pic
  bus = "ba_spr:0.0"
  enabled = 0
  edge_trigger = 1
  ibusm = "int:0.256"
  ibuss = "int:0.0"
end
*/

/* VIC SECTION

  This section specifies how the VIC should behave.
  (VIC is always level triggered)

  bus = "ba_spr:<board_group>.<bus_master_num>"
      Specifies which spr bus to slave off

  enabled = 0/1
      0: interrupt controller is disabled
      1: interrupt controller is enabled

  pic_enabled = 0/1
      0: non-vectored interrupt controller disabled
      1: non-vectored interrupt controller enabled (default)
      
  pic_lines = n
      Number of interrupt lines supported by PIC (0-127). Default: 32

  vic_enabled = 0/1
      0: vector interrupt controller disabled
      1: vector interrupt controller enabled (default)

  vic_lines = n
      Number of interrupt lines supported by VIC (0-127). Default: 8

  vic_pri_bits = n
      Number of bits implemented in interrupt level for VIC interrupt. 
      Default: 3

  ibusm = "int:<board_group>.<interrupt_num>"
      Interrupt bus to master (the bus where the ba cpu is being a slave)
      Make sure to point this to cpu's vicint_bus.

  ibuss = "int:<board_group>.<interrupt_num>"
      Interrupt bus to slave off (the bus to which peripherals connect to).
      Slaves off the specifed bus number and the consecutive up to 256 buses
*/

section vic
  bus = "ba_spr:0.0"
  enabled = 1
  pic_enabled = 1
  pic_lines = 32
  vic_enabled = 1
  vic_lines = 4
  vic_pri_bits = 3
  ibusm = "int:0.256"
  ibuss = "int:0.0"
end


/* TICK TIMER SECTION

    This section configures tick timer

    bus = "ba_spr:<board_group>.<bus_master_num>"
      Specifies which spr bus to slave off

    enabled = 0/1
      whether tick timer is enabled

*/
section tick
  bus = "ba_spr:0.0"
  enabled = 1
end


/* SIM SECTION

  This section specifies how basim should behave.

  iprompt = 0/1
     '0': start in <not interactive prompt> (so what do we start in ???)
     '1': start in interactive prompt.

  clkcycle = <value>[ps|ns|us|ms]
      specifies time measurement for one cycle
*/

section sim
  clkcycle = 100ns
end


/* DEBUG SECTION

   This sections specifies how the debug unit should behave.

   bus = "ba_spr:<board_group>.<bus_master_num>"
      Specifies which spr bus to slave off

   mem_bus = "<bus_identifier>:<board_group>.<bus_master_num>"
      Specifies which bus to master for the "Wishbone" chain

   enabled = 0/1
      '0': disable debug unit
      '1': enable debug unit

   ndp = <value>
      Number of debug watchpoints implemented

   wpci = 0/1
      '0': Watchpoint counters not implemented
      '1': Watchpoint counters implemented

   tbuf_size = <value>
       length of trace buffer, 0 = disabled
*/

section debug
  bus = "ba_spr:0.0"
  mem_bus = "wb:0.0"
  enabled = 1
  ndp = 8
  wpci = 1
  tbuf_size = 0
end


/* CPU SECTION

   This section specifies various CPU parameters.

   bus = "ba_spr:<board_group>.<bus_master_num>"
      Specifies which spr bus to master

   dbus = "<bus_identifier>:<board_group>.<bus_master_num>"
      Specifies which bus the data interface will master

   ibus = "<bus_identifier>:<board_group>.<bus_master_num>"
      Specifies which bus the instruction interface will master

   int_bus = "<bus_identifier>:<board_group>.<bus_master_num>"
      Specifies the VIC/PIC interrupt bus
  
   ctrl_bus = "gpio:<board_group>.<bus_master_num>"
      A GPIO bus that may be used to 'controll' the CPU from other hw, for
      example debug hw.  This bus allows the cpu to be stalled/unstalled or
      reset.

   arch = ba1/ba2
      Selects which ISA to simulate

   ver = <value>
   rev = <value>
      specifies version and revision of the CPU used
      mask is:
        f000 - major version
        0f00 - minor version
        00ff - revision

   upr = <value>
      changes the upr register
      
   sr = <value>
      sets the initial Supervision Register value

   superscalar = 0/1
      '0': CPU is scalar
      '1': CPU is superscalar
      (modify cpu/ba/execute.c to tune superscalar model)

   hazards = 0/1
      '0': don't track data hazards in superscalar CPU
      '1': track data hazards in superscalar CPU
      If tracked, data hazards can be displayed using the
      simulator's 'r' command.

   dependstats = 0/1
      '0': don't calculate inter-instruction dependencies.
      '1': calculate inter-instruction dependencies.
      If calculated, inter-instruction dependencies can be
      displayed using the simulator's 'stat' command.

   sbuf_len = <value>
      length of store buffer (<= 256), 0 = disabled

   history = <value>
      Depth of execution history buffer
      If > 0 execution flow can be tracked for the simulator's
      'hist' command. Useful for back-trace debugging.

   sim_syscall = 0/1
     '0': don't simulate syscall (b.nop 6 = b.nop 0).
     '1': simulate syscall.

   disassemble_prefix = 0/1
     '0': don't disassemble instruction prefix.
     '1': disassemble instruction prefix (bt, bg, bn, bw).

   disassemble_signed = 0/1/2
     '0': disassemble signed immediates as unsigned values.
     '1': disassemble signed immediates as signed values (+/-).
     '2': disassemble signed immediates as user-friendly values.

   bpb = 0/1
     '0': disable branch prediction
     '1': enable branch prediction
      
   btic = 0/1
     '0': disable branch target instruction cache model
     '1': enable branch target instruction cache model

   sbp_bf_fwd = 0/1
     Static branch prediction for 'b.bf'
     '0': don't use forward prediction
     '1': use forward prediction 
   
   sbp_bnf_fwd = 0/1
     Static branch prediction for 'b.bnf'
     '0': don't use forward prediction
     '1': use forward prediction 

   bpb_hitdelay = <value>
       number of cycles bpb hit costs
    
   bpb_missdelay = <value>
       number of cycles bpb miss costs


   imm_use_stats = 0/1
      set to 1 to do immediate length over time analysis

   imm_use_delta = <value>
      Instruction quanta to do the analysis in

   imm_use_f = "file"
      Filename to dump immediate useage data to

   exe_log = 0/1
      '0': don't generate execution log.
      '1': generate execution log.
      
   exe_log_start = <value>
      index of first instruction to start logging, default = 0
        
   exe_log_end = <value>
      index of last instruction to end logging; not limited, if omitted
  
   exe_log_marker = <value>
      <value> specifies number of instructions before horizontal marker is
      printed; if zero, markers are disabled (default)

   exe_log_compact = "<filename>"
      Compact execution log file name.  If none is specified, compact execution
      logging is disabled.

   exe_log_verbose = "<filename>"
      Verbose execution log file name.  If none is specified, verbose execution
      logging is disabled.

   crc_log = 0/1
      '0': don't generate CRC log.
      '1': generate CRC log.

   crc_log_fn = "<filename>"
      CRC log file name.  If none is specified, CRC logging is disabled.

   crc_log_period = <value>
      <value> specifies number of instructions between CRC value output.
      If 0 is specified, CRC logging is disabled.

   endianess = be/le
      Specifies what endianess memory the cpu instruction bus is connected to.
      This does _not_ specify the endianess of the cpu or the system, the
      memory and the individual devices do that.
      
   pic = 0/1
     '0': PIC instruction decoding off
     '1': PIC instruction decoding on  (r31 equals to PC)

   fpu_present = 0/1
     '0': FPU is not present
     '1': FPU is present

   fpu_precision = single/double
      Specifies floating point precision
      
   cycleaccurate = 0/1
      Select cycle analyzer to use. 0 means none and therefor fastest execution,
      but cycle counts are not accurate (at all)
      
   profiling = 0/1
      Disables or enables instruction level profiling. Enabling this slows 
      things down another bit and increases memory usage. It's good idea to
      combine this with cycleaccurate execution.

   exc_layout = "custom"/"legacy"/"compact"
      Defines exception vector layout:
        "custom" - fully custom layout, all vectors need to be specified manually
        "legacy" - (default) legacy layout (dafaults to 0x100, 0x200, 0x300...)
        "compact" - "new" compact layout (default to 0x8, 0x10, 0x18...)

   exc_base = <hex_value>
      Sets the start address of exception vectors. Default is 0x0. Reset, 
      for example is, at exc_base + exc_size, bus error at 
      exc_base + 2*exc_size, and so on.
      This has effect only for legacy and compact layout.

   exc_size = value
      Defines the size of each exception handler and with this distance between
      them. Default value for legacy layout is 0x100 and for compact it is 0x8. 
      Effective only for legacy and compact layout.

   exca_reset    = <hex_value>
   exca_buserr   = <hex_value>
   exca_align    = <hex_value>
   exca_illegal  = <hex_value>
   exca_trap     = <hex_value>
   exca_tick     = <hex_value>
   exca_int      = <hex_value>
   exca_syscall  = <hex_value>
   exca_fp       = <hex_value>
   exca_ipf      = <hex_value>
   exca_dpf      = <hex_value>
   exca_itlbmiss = <hex_value>
   exca_dtlbmiss = <hex_value>
   exca_range    = <hex_value>
      For exc_layout = custom you specify the addresses of exception handlers.
   Exception handlers these addresses (in order) specify, are: reset,
   bus error, alignment, illegal instruction, trap, tick timer, external
   interrupt, syystem call, floating point, instruction page fault, data page
   fault, I-TLB miss, D-TLB miss and range exception.
   If you skip one of this and it is to be triggered, simulator will stop.
   For legacy & compact exception vector layouts these addresses are ignored.
*/

section cpu
  bus = "ba_spr:0.0"
  dbus = "wb:0.0"
  ibus = "wb:0.0"
  int_bus = "int:0.256"
  ctrl_bus = "gpio:0.1"
  arch = ba2
  ver = 0x2200
  rev = 0x5200
  /* upr = */
  superscalar = 0
  hazards = 0
  dependstats = 0
  sbuf_len = 0
  history = 200
  sim_syscall = 1
  disassemble_prefix = 0
  disassemble_signed = 2
  endianess = be
  pic = 0
  fpu_present = 1
  fpu_precision = single
  
  cycleaccurate = 1
  profiling = 1

  exc_layout = "compact"
  exc_base = 0x0

  bpb = 0
  btic = 0
  sbp_bf_fwd = 0
  sbp_bnf_fwd = 0
  bpb_hitdelay = 0
  bpb_missdelay = 0

  imm_use_stats = 0

  exe_log = 0
  exe_log_start = 0
  exe_log_end = 20000000
  exe_log_marker = 10000
  exe_log_compact = "compact.log"
  exe_log_verbose = "executed.log"

  crc_log = 0
  crc_log_fn = "crc.log"
  crc_log_period = 10000
end


/* PM SECTION

   This section specifies Power Management parameters

   bus = "ba_spr:<board_group>.<bus_master_num>"
       Specifies which spr bus to slave off

   enabled = 0/1
      '0': disable power management
      '1': enable power management
*/

section pm
  bus = "ba_spr:0.0"
  enabled = 0
end


/* DBG_SOFT SECTION

   This section specifies how the 'soft' debugger should behave.

   server_url = <string>
      Server URL to listen on

   mod0_bus = "<bus_identifier>:<board_group>.<bus_master_num>"
      The bus to which module 0 of the debug interface is connected to.
      Normally this is the insn/data memory bus of the cpu.

   mod0_gpio = "gpio:<board_group>.<bus_master_num>"
      The GPIO bus to which the GPIO interface of module 0 is connected to
      Usually, this is left empty.

   mod1_bus = "<bus_identifier>:<board_group>.<bus_master_num>"
      The bus to which module 1 of the debug interface is connected to.
      Normally this is the internall cpu bus.

   mod1_gpio = "gpio:<board_group>.<bus_master_num>"
      The GPIO bus to which the GPIO interface of module 1 is connected to
      Usually this is the 'controll' bus of the cpu.
*/

section dbg_soft
  server_url = "jtag://localhost:9999"
  mod0_bus = "wb:0.0"
//mod0_gpio = ""
  mod1_bus = "ba_spr:0.0"
  mod1_gpio = "gpio:0.1"
end


/* MC SECTION

   This section configures the memory controller

   bus = "<bus_identifier>:<board_group>.<bus_master_num>"
      Specifies which bus the memory controller will slave off

   enabled = 0/1
     '0': disable memory controller
     '1': enable memory controller

   baseaddr = <hex_value>
      address of first MC register

   POC = <hex_value>
      Power On Configuration register

   index = <value>
      Index of this memory controller amongst all the memory controllers
*/

section mc
  bus = "wb:0.0"
  enabled = 0
  baseaddr = 0x93000000
  POC = 0x00000008                 /* Power on configuration register */
  index = 0
end


/* MC2 SECTION

   This section configures the memory controller v2

   bus = "<bus_identifier>:<board_group>.<bus_master_num>"
      Specifies which bus the memory controller will slave off

   enabled = 0/1
     '0': disable memory controller
     '1': enable memory controller

   baseaddr = <hex_value>
      address of first MC2 register

   boot = <value>
      Index of bootable memory device

   index = <value>
      Index of this memory controller amongst all the memory controllers

  NOTE: mc1 has RAM on CS1 (ce = 1)
		mc2 must have RAM on CS4 (ce = 4)
*/

section mc2
  bus = "wb:0.0"
  enabled = 0
  baseaddr = 0x93000000
  boot = 0
  index = 0
end


/* UART SECTION

   This section configures the UARTs

     bus = "<bus_identifier>:<board_group>.<bus_master_num>"
        Specifies which bus the UART will slave off

     enabled = <0|1>
        Enable/disable the peripheral.  By default if it is enabled.

     baseaddr = <hex_value>
        address of first UART register for this device

     
     rs232_bus = "rs232:<board_group>.<bus_master_num>"
        The rs232 bus on which to act as a source

     int = "int:<board_group>.<interrupt_num>"
        interrupt line to `master'

     16550 = 0/1
        '0': this device is a UART16450
        '1': this device is a UART16550

     jitter = <value>
        in msecs... time to block, -1 to disable it

     bus = "rs232:<board_group>.<bus_master_num>"
        Specifies which rs232 bus the UART is connected to
        
     mmio32 = 0/1
        '0': MMIO is 8-bits
        '1': MMIO is 32-bits
*/

section uart
  bus = "wb:0.0"
  enabled = 1
  baseaddr = 0x90000000
  int = "int:0.2"
  jitter = -1                     /* async behaviour */
  16550 = 1
  rs232_bus = "rs232:0.0"
  mmio32 = 0
end

/* rs232_file SECTION

   File endpoint for the rs232 bus

     bus = "rs232:<board_group>.<bus_master_num>"
        Specifies which bus the UART is connected to

     in = "rx_file"
        The file from which data is to be read and passed on to the UART

     out = "tx_file"
        The file to which data is to be written that is gotten from the UART
*/

/*
section rs232_file
  bus = "rs232:0.0"
  in = "uart0.rx"
  out = "uart0.tx"
end
*/

/* rs232_fd SECTION

   File descriptor endpoint for the rs232 bus

     bus = "rs232:<board_group>.<bus_master_num>"
        Specifies which bus the UART is connected to

     in = <fd>
        The fd from which data is to be read and passed on to the UART

     out = <fd>
        The fd to which data is to be written that is gotten from the UART
*/

/*
section rs232_fd
  bus = "rs232:0.0"
  in = 0
  out = 1
end
*/

/* rs232_tcp SECTION

   TCP endpoint for the rs232 bus

     bus = "rs232:<board_group>.<bus_master_num>"
        Specifies which bus the UART is connected to

     url = "server_url"
        The host:port where to which one may telnet to send/receive data to/from
        the UART
*/

/*
section rs232_tcp
  bus = "rs232:0.0"
  url = "localhost:10000"
end
*/

/* rs232_xterm SECTION

   XTERM endpoint for the rs232 bus

     bus = "rs232:<board_group>.<bus_master_num>"
        Specifies which bus the UART is connected to

     xterm_args = "xterm_args"
        Additional arguments to pass to the spawned xterm
*/


section rs232_xterm
  bus = "rs232:0.0"
  xterm_args = ""
end


/* rs232_tty SECTION

   TTY endpoint for the rs232 bus

     bus = "rs232:<board_group>.<bus_master_num>"
        Specifies which bus the UART is connected to

     device = "tty device"
        The tty device to use

     baud = <baud>
        The baud rate to set the tty device to
*/

/*
section rs232_tty
  bus = "rs232:0.0"
  device = "/dev/ttyS0"
  baud = 9600
end
*/

/* rs232_fd_log SECTION

   rs232 traffic logger

     bus = "rs232:<board_group>.<bus_master_num>"
        Specifies which bus the UART is connected to

     in = <fd>
        The fd to which data going to the UART is logged to

     out = <fd>
        The fd to which data comming from the UART is logged to
*/

/*
section rs232_fd_log
  bus = "rs232:0.0"
  in = 1
  out = 1
end
*/

/* VGA SECTION
    
    This section configures the VGA/LCD controller
    
      bus = "<bus_identifier>:<board_group>.<bus_master_num>"
        Specifies which bus the VGA will slave off

      enabled = <0|1>
        Enable/disable the peripheral.  By default if it is enabled.

      baseaddr = <hex_value>
        address of first VGA register
        
     int = "int:<board_group>.<interrupt_num>"
        interrupt line to `master'
        
      refresh_rate = <value>
        number of cycles between screen dumps
        
      filename = "<filename>"
        template name for generated names (e.g. "primary" produces "primary0023.bmp")
*/

section vga
  bus = "wb:0.0"
  enabled = 0
  baseaddr = 0x97100000
  int = "int:0.8"
  refresh_rate = 100000
  filename = "primary"
end


/* FB SECTION
    
    This section configures the frame buffer
    
    bus = "<bus_identifier>:<board_group>.<bus_master_num>"
      Specifies which bus the frame buffer will slave off

    enabled = <0|1>
      Enable/disable the peripheral.  By default if it is enabled.

    baseaddr = <hex_value>
      base address of frame buffer
        
    paladdr = <hex_value>
      base address of first palette entry
        
    refresh_rate = <value>
      number of cycles between screen dumps
        
    filename = "<filename>"
      template name for generated names (e.g. "primary" produces "primary0023.bmp")
*/

section fb
  bus = "wb:0.0"
  enabled = 0
  baseaddr = 0x97000000
  refresh_rate = 1000000
  filename = "primary"
end


/* KBD SECTION

    This section configures the PS/2 compatible keyboard
    
    bus = "<bus_identifier>:<board_group>.<bus_master_num>"
      Specifies which bus the KBD will slave off

    baseaddr = <hex_value>
      base address of the keyboard device
      
    rxfile = "<filename>"
      filename, where to read data from
*/

section kbd
  bus = "wb:0.0"
  enabled = 0
  int = "int:0.5"
  baseaddr = 0x94000000
  rxfile = "kbd.rx"
end
