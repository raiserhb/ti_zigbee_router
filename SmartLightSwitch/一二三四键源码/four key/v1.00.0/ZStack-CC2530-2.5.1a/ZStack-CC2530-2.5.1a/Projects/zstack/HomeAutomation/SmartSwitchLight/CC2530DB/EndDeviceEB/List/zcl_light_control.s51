///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        10/Nov/2015  10:33:08 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\ZigBee Project\smartSwitch-light\v1.03.1\ZStac /
//                          k-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects\zst /
//                          ack\HomeAutomation\SmartSwitchLight\Source\zcl_li /
//                          ght_control.c                                     /
//    Command line       =  -f "F:\ZigBee Project\smartSwitch-light\v1.03.1\Z /
//                          Stack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects /
//                          \zstack\HomeAutomation\SmartSwitchLight\CC2530DB\ /
//                          ..\Tools\CC2530DB\f8wEndev.cfg" (-DCPU32MHZ       /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3             /
//                          -DHAL_PA_LNA -DHAL_KEY=FALSE -DHAL_LED=FALSE      /
//                          -DHAL_LCD=FALSE -DHAL_ADC=FALSE -DNV_RESTORE      /
//                          -DNV_INIT) -f "F:\ZigBee                          /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\Tools\CC253 /
//                          0DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0        /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=0           /
//                          -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0       /
//                          -DREJOIN_POLL_RATE=440) -f "F:\ZigBee             /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\Tools\CC253 /
//                          0DB\f8wZCL.cfg" (-DZCL_READ -DZCL_WRITE           /
//                          -DZCL_REPORT -DZCL_BASIC -DZCL_IDENTIFY           /
//                          -DZCL_ON_OFF -DZCL_KEY_ESTABLISH                  /
//                          -DZCL_KEY_ESTABLISHMENT_KEY_GENERATE_TIMEOUT=4    /
//                          -DZCL_KEY_ESTABLISHMENT_MAC_GENERATE_TIMEOUT=10   /
//                          -DZCL_KEY_ESTABLISHMENT_EKEY_GENERATE_TIMEOUT=10  /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING -DZCL_MESSAGE -DZCL_TUNNELING       /
//                          -DZCL_TOU) -DZCL_DEVICE_MGMT "F:\ZigBee           /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\Source\zcl_light_contro /
//                          l.c" -lC "F:\ZigBee Project\smartSwitch-light\v1. /
//                          03.1\ZStack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Pr /
//                          ojects\zstack\HomeAutomation\SmartSwitchLight\CC2 /
//                          530DB\EndDeviceEB\List\" -lA "F:\ZigBee           /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\EndDeviceEB\Li /
//                          st\" --diag_suppress Pe001,Pa010 -o "F:\ZigBee    /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\EndDeviceEB\Ob /
//                          j\" -e --debug --core=plain --dptr=16,1           /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I "F:\ZigBee Project\smartSwitch-light\v1.03.1\Z /
//                          Stack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects /
//                          \zstack\HomeAutomation\SmartSwitchLight\CC2530DB\ /
//                          " -I "F:\ZigBee Project\smartSwitch-light\v1.03.1 /
//                          \ZStack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\HomeAutomation\SmartSwitchLight\CC2530D /
//                          B\..\Source\" -I "F:\ZigBee                       /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\Source\" /
//                           -I "F:\ZigBee Project\smartSwitch-light\v1.03.1\ /
//                          ZStack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\HomeAutomation\SmartSwitchLight\CC2530DB /
//                          \..\..\..\ZMain\TI2530DB\" -I "F:\ZigBee          /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\include\" -I "F:\ZigBee           /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\target\CC2530EB\" -I "F:\ZigBee   /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\include\" -I "F:\ZigBee           /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\high_level\" -I "F:\ZigBee        /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\low_level\srf04\" -I "F:\ZigBee   /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\low_level\srf04\single_chip\" -I  /
//                          "F:\ZigBee Project\smartSwitch-light\v1.03.1\ZSta /
//                          ck-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects\zs /
//                          tack\HomeAutomation\SmartSwitchLight\CC2530DB\..\ /
//                          ..\..\..\..\Components\mt\" -I "F:\ZigBee         /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\osal\include\" -I "F:\ZigBee          /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\services\saddr\" -I "F:\ZigBee        /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\services\sdata\" -I "F:\ZigBee        /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\af\" -I "F:\ZigBee              /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\nwk\" -I "F:\ZigBee             /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sapi\" -I "F:\ZigBee            /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sec\" -I "F:\ZigBee             /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sys\" -I "F:\ZigBee             /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\zcl\" -I "F:\ZigBee             /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\zdo\" -I "F:\ZigBee             /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\zmac\" -I "F:\ZigBee                  /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\zmac\f8w\" -Oh --require_prototypes   /
//    List file          =  F:\ZigBee Project\smartSwitch-light\v1.03.1\ZStac /
//                          k-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects\zst /
//                          ack\HomeAutomation\SmartSwitchLight\CC2530DB\EndD /
//                          eviceEB\List\zcl_light_control.s51                /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_light_control

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??zclFactoryResetEvent?relay
        FUNCTION ??zclFactoryResetEvent?relay,0203H
        PUBLIC ??zclFactoryResetInit?relay
        FUNCTION ??zclFactoryResetInit?relay,0203H
        PUBLIC ??zclLightControlInit?relay
        FUNCTION ??zclLightControlInit?relay,0203H
        PUBWEAK `??zclLightControlPort0Isr??INTVEC 107`
        PUBLIC ??zclLightControlTouchPanelEnable?relay
        FUNCTION ??zclLightControlTouchPanelEnable?relay,0203H
        PUBLIC ??zclLightReportEvent?relay
        FUNCTION ??zclLightReportEvent?relay,0203H
        PUBLIC ??zclRestoreInterruptEvent?relay
        FUNCTION ??zclRestoreInterruptEvent?relay,0203H
        PUBLIC ??zclTouchPanelEvent?relay
        FUNCTION ??zclTouchPanelEvent?relay,0203H
        PUBWEAK IEN2
        PUBWEAK P0DIR
        PUBWEAK P0IEN
        PUBWEAK P0IFG
        PUBWEAK P0INP
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBWEAK P1IFG
        PUBWEAK P1SEL
        PUBWEAK P2DIR
        PUBWEAK P2IEN
        PUBWEAK P2IFG
        PUBWEAK P2INP
        PUBWEAK P2SEL
        PUBWEAK PICTL
        PUBWEAK _A_IEN0
        PUBWEAK _A_IEN1
        PUBWEAK _A_IRCON
        PUBWEAK _A_IRCON2
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBLIC zclFactoryResetEvent
        FUNCTION zclFactoryResetEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclFactoryResetInit
        FUNCTION zclFactoryResetInit,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC zclLightControlInit
        FUNCTION zclLightControlInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclLightControlPort0Isr
        FUNCTION zclLightControlPort0Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 15, STACK
        PUBLIC zclLightControlTouchPanelEnable
        FUNCTION zclLightControlTouchPanelEnable,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclLightReportEvent
        FUNCTION zclLightReportEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC zclRestoreInterruptEvent
        FUNCTION zclRestoreInterruptEvent,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclTouchPanelEvent
        FUNCTION zclTouchPanelEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
zcl_SendReportCmd   SYMBOL "zcl_SendReportCmd"
osal_mem_free       SYMBOL "osal_mem_free"
zclFactoryReset     SYMBOL "zclFactoryReset"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??zclFactoryReset?relay SYMBOL "?relay", zclFactoryReset
??zcl_SendReportCmd?relay SYMBOL "?relay", zcl_SendReportCmd
zclFactoryResetEvent SYMBOL "zclFactoryResetEvent"
??zclFactoryResetEvent?relay SYMBOL "?relay", zclFactoryResetEvent
zclFactoryResetInit SYMBOL "zclFactoryResetInit"
??zclFactoryResetInit?relay SYMBOL "?relay", zclFactoryResetInit
zclLightControlInit SYMBOL "zclLightControlInit"
??zclLightControlInit?relay SYMBOL "?relay", zclLightControlInit
zclLightControlPort0Isr SYMBOL "zclLightControlPort0Isr"
`??zclLightControlPort0Isr??INTVEC 107` SYMBOL "??INTVEC 107", zclLightControlPort0Isr
zclLightControlTouchPanelEnable SYMBOL "zclLightControlTouchPanelEnable"
??zclLightControlTouchPanelEnable?relay SYMBOL "?relay", zclLightControlTouchPanelEnable
zclLightReportEvent SYMBOL "zclLightReportEvent"
??zclLightReportEvent?relay SYMBOL "?relay", zclLightReportEvent
zclRestoreInterruptEvent SYMBOL "zclRestoreInterruptEvent"
??zclRestoreInterruptEvent?relay SYMBOL "?relay", zclRestoreInterruptEvent
zclTouchPanelEvent  SYMBOL "zclTouchPanelEvent"
??zclTouchPanelEvent?relay SYMBOL "?relay", zclTouchPanelEvent

        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendReportCmd
        FUNCTION zcl_SendReportCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclFactoryReset
        FUNCTION zclFactoryReset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??zclFactoryReset?relay
        FUNCTION ??zclFactoryReset?relay,00H
        EXTERN ??zcl_SendReportCmd?relay
        FUNCTION ??zcl_SendReportCmd?relay,00H
        EXTERN zclOnOffLight0_OnOff
        EXTERN zclOnOffLight1_OnOff
        EXTERN zclOnOffLight_TaskID

// F:\ZigBee Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAutomation\SmartSwitchLight\Source\zcl_light_control.c
//    1 #include "zcl_light_control.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,089H
// unsigned char volatile __sfr P0IFG
P0IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08aH
// unsigned char volatile __sfr P1IFG
P1IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08bH
// unsigned char volatile __sfr P2IFG
P2IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08cH
// unsigned char volatile __sfr PICTL
PICTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08fH
// unsigned char volatile __sfr P0INP
P0INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09aH
// unsigned char volatile __sfr IEN2
IEN2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0abH
// unsigned char volatile __sfr P0IEN
P0IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0acH
// unsigned char volatile __sfr P2IEN
P2IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c0H
// union <unnamed> volatile __sfr _A_IRCON
_A_IRCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f7H
// unsigned char volatile __sfr P2INP
P2INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//    2 #include "zcl_onofflight.h"
//    3 #include "zcl.h"
//    4 #include "zcl_device_info.h"
//    5 
//    6 extern byte zclOnOffLight_TaskID;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    7 static afAddrType_t zcl_Coord_nwkAddr;
zcl_Coord_nwkAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    8 static uint8 zcl_SeqNum = 0;
zcl_SeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    9 static uint8 zcl_interruptNo = 0;
zcl_interruptNo:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   10 void zclFactoryResetInit(void);
//   11 void zclFactoryResetEvent(void);

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   12 static uint8 zcl_factoryReset = 0;
zcl_factoryReset:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   13 /*
//   14 input   LED     LIGHT
//   15 P1_3 -> P0_7 -> P0_0
//   16 
//   17 p1_2 -> P1_0 -> P0_1
//   18 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   19 void zclLightControlInit(void)
zclLightControlInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function zclLightControlInit
        CODE
//   20 {
        FUNCALL zclLightControlInit, zclFactoryResetInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclLightControlInit, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   21   zclFactoryResetInit();
        ; Setup parameters for call to function zclFactoryResetInit
        LCALL   ??zclFactoryResetInit?relay
//   22 
//   23   P1SEL &= ~BV(0); //LED1
        ANL     0xf4,#0xfe
//   24   P1DIR |= BV(0);
        ORL     0xfe,#0x1
//   25 
//   26   P1SEL &= ~BV(2); //LED2
        ANL     0xf4,#0xfb
//   27   P1DIR |= BV(2);
        ORL     0xfe,#0x4
//   28   
//   29  ///init P0.2 and P0.3 for relay control///////////
//   30   P0SEL &= ~BV(2);
        ANL     0xf3,#0xfb
//   31   P0DIR |= BV(2);
        ORL     0xfd,#0x4
//   32   P0SEL &= ~BV(3);
        ANL     0xf3,#0xf7
//   33   P0DIR |= BV(3); 
        ORL     0xfd,#0x8
//   34   
//   35   // default to turn off the light
//   36   LIGHT_TURN_OFF_LIGHT0();
        CLR     0x80.2
        SETB    0x90.2
//   37   LIGHT_TURN_OFF_LIGHT1(); 
        CLR     0x80.3
        SETB    0x90.0
//   38   ///end init for relay control////////
//   39   LED_ON();
        SETB    0x90.2
        SETB    0x90.0
//   40   
//   41   osal_start_timerEx(zclOnOffLight_TaskID, 
//   42                          ZCL_DEVICE_INIT_DONE_EVENT,
//   43                          1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x8
        LCALL   ?Subroutine1 & 0xFFFF
//   44   
//   45   zcl_Coord_nwkAddr.addrMode = afAddr16Bit;
??CrossCallReturnLabel_2:
        MOV     DPTR,#zcl_Coord_nwkAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//   46   zcl_Coord_nwkAddr.addr.shortAddr = 0x0000;
        MOV     DPTR,#zcl_Coord_nwkAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   47   zcl_Coord_nwkAddr.endPoint = 0xF0;
        MOV     DPTR,#zcl_Coord_nwkAddr + 9
        MOV     A,#-0x10
        MOVX    @DPTR,A
//   48 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock0
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE _A_P0
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond1 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond2 Using cfiCommon0
        CFI (cfiCond2) NoFunction
        CFI (cfiCond2) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond2) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond2) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond2) CFA_SP SP+-5
        CFI Block cfiPicker3 Using cfiCommon1
        CFI (cfiPicker3) NoFunction
        CFI (cfiPicker3) Picker
        MOV     R3,#0x0
        CFI EndBlock cfiCond1
        CFI EndBlock cfiCond2
        CFI EndBlock cfiPicker3
        REQUIRE ??Subroutine3_0
        ; // Fall through to label ??Subroutine3_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine3_0:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond5) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond5) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond5) CFA_SP SP+-5
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond6) CFA_SP SP+-5
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOV     DPTR,#zclOnOffLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
//   49 /*
//   50 input   LED     LIGHT
//   51 P1_3 -> P0_7 -> P0_0
//   52 
//   53 p1_2 -> P1_0 -> P0_1
//   54 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   55 void zclLightControlTouchPanelEnable(void)
zclLightControlTouchPanelEnable:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function zclLightControlTouchPanelEnable
        CODE
//   56 {
        ; Saved register size: 0
        ; Auto size: 0
//   57   P0SEL &= ~BV(0);
        ANL     0xf3,#0xfe
//   58   P0DIR &= ~BV(0);
        ANL     0xfd,#0xfe
//   59   P0INP &= ~BV(0);
        ANL     0x8f,#0xfe
//   60   P0IEN |= BV(0);
        ORL     0xab,#0x1
//   61   
//   62   P0SEL &= ~BV(1);
        ANL     0xf3,#0xfd
//   63   P0DIR &= ~BV(1);
        ANL     0xfd,#0xfd
//   64   P0INP &= ~BV(1);
        ANL     0x8f,#0xfd
//   65   P0IEN |= BV(1);  
        ORL     0xab,#0x2
//   66   PICTL |= (0x1 << 0);
        ORL     0x8c,#0x1
//   67   IEN1 |= (0x1 << 5);
        SETB    0xb8.5
//   68 
//   69   P1IFG = 0;
        MOV     0x8a,#0x0
//   70   P1IF = 0;
        CLR     0xe8.3
//   71 
//   72   LIGHT_TURN_OFF_LIGHT0();
        CLR     0x80.2
        SETB    0x90.2
//   73   LIGHT_TURN_OFF_LIGHT1(); 
        CLR     0x80.3
        SETB    0x90.0
//   74 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock8
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE P0INP
        REQUIRE P0IEN
        REQUIRE PICTL
        REQUIRE _A_IEN1
        REQUIRE P1IFG
        REQUIRE _A_IRCON2
        REQUIRE _A_P0
        REQUIRE _A_P1
//   75 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   76 void zclLightReportEvent(uint16 endpoint, uint8 *zclOnOffLight_OnOff)
zclLightReportEvent:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function zclLightReportEvent
        CODE
//   77 {
        FUNCALL zclLightReportEvent, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclLightReportEvent, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclLightReportEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//   78   zclReportCmd_t *pReportCmd;
//   79 
//   80   pReportCmd = osal_mem_alloc( sizeof(zclReportCmd_t) + sizeof(zclReport_t) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//   81   if ( pReportCmd != NULL )
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??zclLightReportEvent_0
//   82   {
//   83     pReportCmd->numAttr = 1;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x1
        MOVX    @DPTR,A
//   84     pReportCmd->attrList[0].attrID = ATTRID_ON_OFF;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine2 & 0xFFFF
//   85     pReportCmd->attrList[0].dataType = ZCL_DATATYPE_UINT8;
??CrossCallReturnLabel_0:
        MOV     A,#0x20
        LCALL   ?Subroutine2 & 0xFFFF
//   86     pReportCmd->attrList[0].attrData = (void *)(zclOnOffLight_OnOff);
??CrossCallReturnLabel_1:
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//   87 
//   88     zcl_SendReportCmd( endpoint, 
//   89                       &zcl_Coord_nwkAddr,
//   90                        ZCL_CLUSTER_ID_GEN_ON_OFF,
//   91                        pReportCmd, ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, 
//   92                        zcl_SeqNum++ );
        MOV     DPTR,#zcl_SeqNum
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        ADD     A,R0
        MOVX    @DPTR,A
        ; Setup parameters for call to function zcl_SendReportCmd
        MOV     A,R0
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 4,#0x1
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#zcl_Coord_nwkAddr & 0xff
        MOV     R3,#(zcl_Coord_nwkAddr >> 8) & 0xff
        MOV     R1,?V0 + 0
        LCALL   ??zcl_SendReportCmd?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//   93        
//   94     osal_mem_free( pReportCmd );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
//   95   }
//   96 }
??zclLightReportEvent_0:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//   97 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   98 void zclTouchPanelEvent(void)
zclTouchPanelEvent:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function zclTouchPanelEvent
        CODE
//   99 {
        FUNCALL zclTouchPanelEvent, zclLightReportEvent
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclTouchPanelEvent, zclLightReportEvent
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclTouchPanelEvent, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  100   int done = 0;
        MOV     R0,#0x0
//  101   if( zcl_interruptNo & 1 ) {
        MOV     DPTR,#zcl_interruptNo
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??zclTouchPanelEvent_0
//  102    if (P0_0 == 0) {
        MOV     C,0x80.0
        JC      ??zclTouchPanelEvent_0
//  103        if (zclOnOffLight0_OnOff == LIGHT_ON) {
        MOV     DPTR,#zclOnOffLight0_OnOff
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclTouchPanelEvent_1
//  104         zclOnOffLight0_OnOff = LIGHT_OFF;
        CLR     A
        MOVX    @DPTR,A
//  105         LIGHT_TURN_OFF_LIGHT0();
        CLR     0x80.2
        SETB    0x90.2
        SJMP    ??zclTouchPanelEvent_2
//  106        } else {
//  107         zclOnOffLight0_OnOff = LIGHT_ON;
??zclTouchPanelEvent_1:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  108         LIGHT_TURN_ON_LIGHT0();
        SETB    0x80.2
        CLR     0x90.2
//  109       }
//  110       zclLightReportEvent(ONOFFLIGHT0_ENDPOINT, &zclOnOffLight0_OnOff); 
??zclTouchPanelEvent_2:
        ; Setup parameters for call to function zclLightReportEvent
        MOV     R4,#zclOnOffLight0_OnOff & 0xff
        MOV     R5,#(zclOnOffLight0_OnOff >> 8) & 0xff
        MOV     R2,#0x10
        MOV     R3,#0x0
        LCALL   ??zclLightReportEvent?relay
//  111       done = 1;
        MOV     R0,#0x1
//  112    }
//  113   }
//  114   if( zcl_interruptNo & 2 ) {
??zclTouchPanelEvent_0:
        MOV     DPTR,#zcl_interruptNo
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??zclTouchPanelEvent_3
//  115    if (P0_1 == 0) {
        MOV     C,0x80.1
        JC      ??zclTouchPanelEvent_3
//  116       if (zclOnOffLight1_OnOff == LIGHT_ON) {
        MOV     DPTR,#zclOnOffLight1_OnOff
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclTouchPanelEvent_4
//  117         zclOnOffLight1_OnOff = LIGHT_OFF;
        CLR     A
        MOVX    @DPTR,A
//  118         LIGHT_TURN_OFF_LIGHT1();
        CLR     0x80.3
        SETB    0x90.0
        SJMP    ??zclTouchPanelEvent_5
//  119       } else {
//  120         zclOnOffLight1_OnOff = LIGHT_ON;
??zclTouchPanelEvent_4:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  121         LIGHT_TURN_ON_LIGHT1();
        SETB    0x80.3
        CLR     0x90.0
//  122       }  
//  123       zclLightReportEvent(ONOFFLIGHT1_ENDPOINT, &zclOnOffLight1_OnOff);
??zclTouchPanelEvent_5:
        ; Setup parameters for call to function zclLightReportEvent
        MOV     R4,#zclOnOffLight1_OnOff & 0xff
        MOV     R5,#(zclOnOffLight1_OnOff >> 8) & 0xff
        MOV     R2,#0x11
        MOV     R3,#0x0
        LCALL   ??zclLightReportEvent?relay
//  124       done = 1;
        MOV     R0,#0x1
//  125    }
//  126   }  
//  127   
//  128   zcl_interruptNo = 0;
??zclTouchPanelEvent_3:
        MOV     DPTR,#zcl_interruptNo
        CLR     A
        MOVX    @DPTR,A
//  129  if(done) 
        MOV     A,R0
        MOV     C,0xE0 /* A   */.0
        JNC     ??CrossCallReturnLabel_3
//  130   {
//  131       osal_start_timerEx(zclOnOffLight_TaskID, 
//  132                      ZCL_DEVICE_RESTORE_INTERRUPT_EVENT,
//  133                      80);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x50
        MOV     R5,#0x0
        MOV     R2,#0x20
        LCALL   ?Subroutine1 & 0xFFFF
//  134   } 
//  135 }
??CrossCallReturnLabel_3:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock13
        REQUIRE _A_P0
        REQUIRE _A_P1
//  136 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  137 void zclRestoreInterruptEvent(void)
zclRestoreInterruptEvent:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function zclRestoreInterruptEvent
        CODE
//  138 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  139   if(P0_0 == 1)
        MOV     C,0x80.0
        JNC     ??zclRestoreInterruptEvent_0
//  140   {
//  141     P0IFG =0;
        MOV     0x89,#0x0
//  142     P0IF = 0;
        CLR     0xc0.5
//  143     zcl_factoryReset = 0;  
        MOV     DPTR,#zcl_factoryReset
        CLR     A
        MOVX    @DPTR,A
//  144     P0IEN |= BV(0);
        ORL     0xab,#0x1
//  145   }
//  146   if(P0_1 == 1)
??zclRestoreInterruptEvent_0:
        MOV     C,0x80.1
        JNC     ??zclRestoreInterruptEvent_1
//  147   {
//  148     P0IFG = 0;
        MOV     0x89,#0x0
//  149     P0IF = 0;
        CLR     0xc0.5
//  150     zcl_factoryReset = 0;  
        MOV     DPTR,#zcl_factoryReset
        CLR     A
        MOVX    @DPTR,A
//  151     P0IEN |= BV(1);
        ORL     0xab,#0x2
        CFI EndBlock cfiBlock14
//  152   }
//  153 }
??zclRestoreInterruptEvent_1:
        REQUIRE ?Subroutine0
        REQUIRE _A_P0
        REQUIRE P0IFG
        REQUIRE _A_IRCON
        REQUIRE P0IEN
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock15
//  154 
//  155 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  156 void zclFactoryResetInit(void)
zclFactoryResetInit:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function zclFactoryResetInit
        CODE
//  157 {
        ; Saved register size: 0
        ; Auto size: 0
//  158   P2SEL &= ~BV(0);
        ANL     0xf5,#0xfe
//  159   P2DIR &= ~BV(0);
        ANL     0xff,#0xfe
//  160   P2INP &= ~BV(7);
        ANL     0xf7,#0x7f
//  161   P2INP &= ~BV(0);
        ANL     0xf7,#0xfe
//  162   P2IEN |= BV(0);
        ORL     0xac,#0x1
//  163   
//  164   PICTL |= (0x1 << 3);
        ORL     0x8c,#0x8
//  165   IEN2 |= (0x1 << 1);
        ORL     0x9a,#0x2
//  166   P2IFG = 0;
        MOV     0x8b,#0x0
//  167   P2IF = 0;
        CLR     0xe8.0
//  168 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock16
        REQUIRE P2SEL
        REQUIRE P2DIR
        REQUIRE P2INP
        REQUIRE P2IEN
        REQUIRE PICTL
        REQUIRE IEN2
        REQUIRE P2IFG
        REQUIRE _A_IRCON2
//  169 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  170 void zclFactoryResetEvent(void)
zclFactoryResetEvent:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function zclFactoryResetEvent
        CODE
//  171 {
        FUNCALL zclFactoryResetEvent, zclFactoryReset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclFactoryResetEvent, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  172   if (P0_0 == 0 || P0_1 == 0) 
        MOV     C,0x80.0
        JNC     ??zclFactoryResetEvent_0
        MOV     C,0x80.1
        JC      ??zclFactoryResetEvent_1
//  173   {
//  174     zcl_factoryReset++;
??zclFactoryResetEvent_0:
        MOV     DPTR,#zcl_factoryReset
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  175     if (zcl_factoryReset >= ZCL_FACTORY_RESET_TIMECOUNT) 
        CLR     C
        SUBB    A,#0x18
        JC      ??zclFactoryResetEvent_2
//  176     {
//  177       zclFactoryReset(TRUE);
        ; Setup parameters for call to function zclFactoryReset
        MOV     R1,#0x1
        LCALL   ??zclFactoryReset?relay
//  178       zcl_factoryReset = 0;
        MOV     DPTR,#zcl_factoryReset
        CLR     A
        MOVX    @DPTR,A
        SJMP    ??zclFactoryResetEvent_3
//  179     }
//  180     if(zcl_factoryReset >= 12)
??zclFactoryResetEvent_2:
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0xc
        JC      ??zclFactoryResetEvent_3
//  181     {
//  182       if (zcl_factoryReset % 2 == 0) 
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JC      ??zclFactoryResetEvent_4
//  183       {
//  184         LED_ON();
        SETB    0x90.2
        SETB    0x90.0
        SJMP    ??zclFactoryResetEvent_3
//  185       } else {
//  186         LED_OFF();
??zclFactoryResetEvent_4:
        CLR     0x90.2
        CLR     0x90.0
//  187       }
//  188     }
//  189     osal_start_timerEx(zclOnOffLight_TaskID, 
//  190                        ZCL_DEVICE_RESET_EVENT,
//  191                        500);
??zclFactoryResetEvent_3:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R2,#0x0
        MOV     R3,#0x4
        LCALL   ??Subroutine3_0 & 0xFFFF
//  192 //    osal_start_timerEx(zclOnOffLight_TaskID, 
//  193 //                       ZCL_DEVICE_RESTORE_INTERRUPT_EVENT,
//  194 //                       80);
//  195   }
??CrossCallReturnLabel_4:
        SJMP    ??zclFactoryResetEvent_5
//  196   else 
//  197   {
//  198     zcl_factoryReset = 0;
??zclFactoryResetEvent_1:
        MOV     DPTR,#zcl_factoryReset
        CLR     A
        MOVX    @DPTR,A
//  199     P0IFG = 0;
        MOV     0x89,#0x0
//  200     P0IF = 0;
        CLR     0xc0.5
//  201     P0IEN |= BV(0);
        ORL     0xab,#0x1
//  202     P0IEN |= BV(1);
        ORL     0xab,#0x2
//  203   }
//  204 }
??zclFactoryResetEvent_5:
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock17
        REQUIRE _A_P0
        REQUIRE _A_P1
        REQUIRE P0IFG
        REQUIRE _A_IRCON
        REQUIRE P0IEN
//  205 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  206 HAL_ISR_FUNCTION(zclLightControlPort0Isr, P0INT_VECTOR)
zclLightControlPort0Isr:
        CFI Block cfiBlock18 Using cfiCommon1
        CFI Function zclLightControlPort0Isr
        CODE
//  207 {
        FUNCALL zclLightControlPort0Isr, osal_start_timerEx
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  208   HAL_ENTER_ISR();
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R6,A
        SETB    0xa8.7
//  209   
//  210   zcl_interruptNo = 0;
        MOV     DPTR,#zcl_interruptNo
        CLR     A
        MOVX    @DPTR,A
//  211   if (P0IFG & 0x1) {
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.0
        JNC     ??zclLightControlPort0Isr_0
//  212     P0IEN &= ~BV(0);
        ANL     0xab,#0xfe
//  213     zcl_interruptNo |= 1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  214   }
//  215   if (P0IFG & 0x2) {
??zclLightControlPort0Isr_0:
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.1
        JNC     ??zclLightControlPort0Isr_1
//  216     P0IEN &= ~BV(1);
        ANL     0xab,#0xfd
//  217     zcl_interruptNo |= 2;
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.1
        MOVX    @DPTR,A
//  218   }
//  219   
//  220   if( zcl_interruptNo ) {
??zclLightControlPort0Isr_1:
        MOVX    A,@DPTR
        JZ      ??zclLightControlPort0Isr_2
//  221     zcl_factoryReset = 0;
        MOV     DPTR,#zcl_factoryReset
        CLR     A
        MOVX    @DPTR,A
//  222     osal_start_timerEx(zclOnOffLight_TaskID, 
//  223                        ZCL_DEVICE_TOUCHPANEL_EVENT,
//  224                        20);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x14
        MOV     R5,A
        MOV     R2,#0x10
        MOV     R3,A
        MOV     DPTR,#zclOnOffLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  225   }
//  226   
//  227   P0IF = 0;
??zclLightControlPort0Isr_2:
        CLR     0xc0.5
//  228   P0IFG = 0;
        MOV     0x89,#0x0
//  229   CLEAR_SLEEP_MODE();
//  230   HAL_EXIT_ISR();
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  231 }
        MOV     R7,#0x1
        LJMP    ?INTERRUPT_LEAVE_XSP
        CFI EndBlock cfiBlock18
        REQUIRE _A_IEN0
        REQUIRE P0IFG
        REQUIRE P0IEN
        REQUIRE _A_IRCON

        COMMON INTVEC:CODE:ROOT(0)
        ORG 107
`??zclLightControlPort0Isr??INTVEC 107`:
        LJMP       (zclLightControlPort0Isr)

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclLightControlInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclLightControlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclLightControlTouchPanelEnable?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclLightControlTouchPanelEnable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclLightReportEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclLightReportEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclTouchPanelEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclTouchPanelEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclRestoreInterruptEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclRestoreInterruptEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclFactoryResetInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclFactoryResetInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclFactoryResetEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclFactoryResetEvent

        END
//  232 
//  233 //HAL_ISR_FUNCTION(zclSwitchControlPort2Isr, P2INT_VECTOR)
//  234 //{
//  235 //  HAL_ENTER_ISR();
//  236 //
//  237 //  if (P2IFG & 0x1) {
//  238 ////    zcl_factoryReset = 0;
//  239 ////    osal_start_timerEx(zclOnOffLight_TaskID, 
//  240 ////                       ZCL_DEVICE_RESET_EVENT,
//  241 ////                       1000);
//  242 //    P2IEN &= ~BV(0);
//  243 //  }
//  244 //
//  245 //  P2IFG = 0;
//  246 //  P2IF = 0;
//  247 //  
//  248 //  CLEAR_SLEEP_MODE();
//  249 //  HAL_EXIT_ISR();
//  250 //}
// 
// 540 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//   3 bytes in segment INTVEC
//  81 bytes in segment NEAR_CODE
//  21 bytes in segment SFR_AN
//  15 bytes in segment XDATA_Z
// 
// 663 bytes of CODE  memory (+  3 bytes shared)
//   0 bytes of DATA  memory (+ 21 bytes shared)
//  15 bytes of XDATA memory
//
//Errors: none
//Warnings: none
