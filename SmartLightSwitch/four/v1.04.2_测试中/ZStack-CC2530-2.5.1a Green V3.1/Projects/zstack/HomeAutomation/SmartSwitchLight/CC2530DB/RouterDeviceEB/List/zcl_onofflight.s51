///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        15/Aug/2017  16:54:23 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\work space\Smart Product_zstack2.5.1a\Two      /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\Source\zcl_onofflight.c    /
//    Command line       =  -f "D:\work space\Smart Product_zstack2.5.1a\Two  /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\Tools\CC2530DB /
//                          \f8wRouter.cfg" (-DCPU32MHZ -DROOT=__near_func    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK -DNV_RESTORE         /
//                          -DNV_INIT -DHAL_PA_LNA -DHAL_KEY=FALSE            /
//                          -DHAL_LED=FALSE -DHAL_LCD=FALSE -DHAL_ADC=FALSE   /
//                          -DWDT_IN_PM1 -DTC_LINKKEY_JOIN                    /
//                          -DMAX_NEIGHBOR_ENTRIES=48 -DTVSA_DATA_CNF=1       /
//                          -DPACKET_FILTER_STATS -DNWK_LINK_STATUS_PERIOD=30 /
//                          ) -f "D:\work space\Smart                         /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\Tools\CC2530DB /
//                          \f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=1           /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x06108800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=1000            /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          -DDEFAULT_KEY={0x58,0x69,0x6E,0x67,0x48,0x75,     /
//                          0x6F,0x59,0x75,0x61,0x6E,0x53,0x6D,0x61,0x72,     /
//                          0x74} -DMAC_MAX_FRAME_SIZE=116                    /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=0           /
//                          -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0       /
//                          -DREJOIN_POLL_RATE=440) -f "D:\work space\Smart   /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\Tools\CC2530DB /
//                          \f8wZCL.cfg" (-DZCL_READ -DZCL_WRITE              /
//                          -DZCL_REPORT -DZCL_BASIC -DZCL_IDENTIFY           /
//                          -DZCL_ON_OFF -DZCL_KEY_ESTABLISH                  /
//                          -DZCL_KEY_ESTABLISHMENT_KEY_GENERATE_TIMEOUT=4    /
//                          -DZCL_KEY_ESTABLISHMENT_MAC_GENERATE_TIMEOUT=10   /
//                          -DZCL_KEY_ESTABLISHMENT_EKEY_GENERATE_TIMEOUT=10  /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING -DZCL_MESSAGE -DZCL_TUNNELING       /
//                          -DZCL_TOU) -DZCL_DEVICE_MGMT "D:\work             /
//                          space\Smart Product_zstack2.5.1a\Two              /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\Source\zcl_onofflight.c"   /
//                          -lC "D:\work space\Smart                          /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\RouterDeviceEB\Li /
//                          st\" -lA "D:\work space\Smart                     /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\RouterDeviceEB\Li /
//                          st\" --diag_suppress Pe001,Pa010 -o "D:\work      /
//                          space\Smart Product_zstack2.5.1a\Two              /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\RouterDeviceEB\Ob /
//                          j\" -e --debug --core=plain --dptr=16,1           /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I "D:\work space\Smart Product_zstack2.5.1a\Two  /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\" -I "D:\work     /
//                          space\Smart Product_zstack2.5.1a\Two              /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\Source\" -I    /
//                          "D:\work space\Smart Product_zstack2.5.1a\Two     /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\Source\"    /
//                          -I "D:\work space\Smart Product_zstack2.5.1a\Two  /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\ZMain\TI /
//                          2530DB\" -I "D:\work space\Smart                  /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\hal\include\" -I "D:\work space\Smart    /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\hal\target\CC2530EB\" -I "D:\work        /
//                          space\Smart Product_zstack2.5.1a\Two              /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\mac\include\" -I "D:\work space\Smart    /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\mac\high_level\" -I "D:\work             /
//                          space\Smart Product_zstack2.5.1a\Two              /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\mac\low_level\srf04\" -I "D:\work        /
//                          space\Smart Product_zstack2.5.1a\Two              /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\mac\low_level\srf04\single_chip\" -I     /
//                          "D:\work space\Smart Product_zstack2.5.1a\Two     /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\mt\" -I "D:\work space\Smart             /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\osal\include\" -I "D:\work space\Smart   /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\services\saddr\" -I "D:\work             /
//                          space\Smart Product_zstack2.5.1a\Two              /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\services\sdata\" -I "D:\work             /
//                          space\Smart Product_zstack2.5.1a\Two              /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\stack\af\" -I "D:\work space\Smart       /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\stack\nwk\" -I "D:\work space\Smart      /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\stack\sapi\" -I "D:\work space\Smart     /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\stack\sec\" -I "D:\work space\Smart      /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\stack\sys\" -I "D:\work space\Smart      /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\stack\zcl\" -I "D:\work space\Smart      /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\stack\zdo\" -I "D:\work space\Smart      /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\zmac\" -I "D:\work space\Smart           /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\..\..\..\..\..\Co /
//                          mponents\zmac\f8w\" -Oh --require_prototypes      /
//    List file          =  D:\work space\Smart Product_zstack2.5.1a\Two      /
//                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-C /
//                          C2530-2.5.1a Green V3.1\Projects\zstack\HomeAutom /
//                          ation\SmartSwitchLight\CC2530DB\RouterDeviceEB\Li /
//                          st\zcl_onofflight.s51                             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_onofflight

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??AppDeviceNwkJionState?relay
        FUNCTION ??AppDeviceNwkJionState?relay,0203H
        PUBLIC ??Device_App_MessageMSGCB?relay
        FUNCTION ??Device_App_MessageMSGCB?relay,0203H
        FUNCTION ??zclOnOffLight0_OnOffCB?relay,0203H
        FUNCTION ??zclOnOffLight1_OnOffCB?relay,0203H
        FUNCTION ??zclOnOffLight2_OnOffCB?relay,0203H
        FUNCTION ??zclOnOffLight3_OnOffCB?relay,0203H
        FUNCTION ??zclOnOffLight_BasicResetCB?relay,0203H
        FUNCTION ??zclOnOffLight_IdentifyCB?relay,0203H
        FUNCTION ??zclOnOffLight_IdentifyQueryRspCB?relay,0203H
        PUBLIC ??zclOnOffLight_Init?relay
        FUNCTION ??zclOnOffLight_Init?relay,0203H
        FUNCTION ??zclOnOffLight_OnOffCB?relay,0203H
        PUBLIC ??zclOnOffLight_event_loop?relay
        FUNCTION ??zclOnOffLight_event_loop?relay,0203H
        PUBLIC AppDeviceNwkJionState
        FUNCTION AppDeviceNwkJionState,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        PUBLIC DeviceApp_epDesc
        PUBLIC Device_App_MessageMSGCB
        FUNCTION Device_App_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBWEAK P0IEN
        PUBWEAK P1IEN
        PUBLIC ReJoinNetFlagInFlash
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBLIC g_RestCount
        PUBLIC g_u8sendDeviceInfoFlag
        PUBLIC ledcontrol
        PUBLIC zclDevice_InitDone
        PUBLIC zclDevice_JoinNetworkOk
        PUBLIC zclDevice_NwkState
        FUNCTION zclOnOffLight0_OnOffCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclOnOffLight1_OnOffCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclOnOffLight2_OnOffCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclOnOffLight3_OnOffCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclOnOffLight_BasicResetCB,0603H
        ARGFRAME XSTACK, 0, STACK
        FUNCTION zclOnOffLight_IdentifyCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclOnOffLight_IdentifyQueryRspCB,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclOnOffLight_Init
        FUNCTION zclOnOffLight_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclOnOffLight_OnOffCB,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclOnOffLight_TaskID
        PUBLIC zclOnOffLight_event_loop
        FUNCTION zclOnOffLight_event_loop,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_Led_Blink
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
zclHA_Init          SYMBOL "zclHA_Init"
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
RegisterForKeys     SYMBOL "RegisterForKeys"
zclDeviceInfoInit   SYMBOL "zclDeviceInfoInit"
zclLightControlInit SYMBOL "zclLightControlInit"
zclLightReportEvent SYMBOL "zclLightReportEvent"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_rand           SYMBOL "osal_rand"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_mem_free       SYMBOL "osal_mem_free"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
zclLightControlTouchPanelEnable SYMBOL "zclLightControlTouchPanelEnable"
zclSendDeviceInfo   SYMBOL "zclSendDeviceInfo"
zclSendHeartbeat    SYMBOL "zclSendHeartbeat"
zclTouchPanelEvent  SYMBOL "zclTouchPanelEvent"
zclRestoreInterruptEvent SYMBOL "zclRestoreInterruptEvent"
zclFactoryResetEvent SYMBOL "zclFactoryResetEvent"
zclFactoryReset     SYMBOL "zclFactoryReset"
NLME_PermitJoiningRequest SYMBOL "NLME_PermitJoiningRequest"
ZDApp_AnnounceNewAddress SYMBOL "ZDApp_AnnounceNewAddress"
osal_nv_read        SYMBOL "osal_nv_read"
osal_nv_item_init   SYMBOL "osal_nv_item_init"
osal_nv_write       SYMBOL "osal_nv_write"
??NLME_PermitJoiningRequest?relay SYMBOL "?relay", NLME_PermitJoiningRequest
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDApp_AnnounceNewAddress?relay SYMBOL "?relay", ZDApp_AnnounceNewAddress
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??zclDeviceInfoInit?relay SYMBOL "?relay", zclDeviceInfoInit
??zclFactoryReset?relay SYMBOL "?relay", zclFactoryReset
??zclFactoryResetEvent?relay SYMBOL "?relay", zclFactoryResetEvent
??zclGeneral_RegisterCmdCallbacks?relay SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
??zclHA_Init?relay  SYMBOL "?relay", zclHA_Init
??zclLightControlInit?relay SYMBOL "?relay", zclLightControlInit
??zclLightControlTouchPanelEnable?relay SYMBOL "?relay", zclLightControlTouchPanelEnable
??zclLightReportEvent?relay SYMBOL "?relay", zclLightReportEvent
??zclRestoreInterruptEvent?relay SYMBOL "?relay", zclRestoreInterruptEvent
??zclSendDeviceInfo?relay SYMBOL "?relay", zclSendDeviceInfo
??zclSendHeartbeat?relay SYMBOL "?relay", zclSendHeartbeat
??zclTouchPanelEvent?relay SYMBOL "?relay", zclTouchPanelEvent
??zcl_registerAttrList?relay SYMBOL "?relay", zcl_registerAttrList
??zcl_registerForMsg?relay SYMBOL "?relay", zcl_registerForMsg
AppDeviceNwkJionState SYMBOL "AppDeviceNwkJionState"
??AppDeviceNwkJionState?relay SYMBOL "?relay", AppDeviceNwkJionState
Device_App_MessageMSGCB SYMBOL "Device_App_MessageMSGCB"
??Device_App_MessageMSGCB?relay SYMBOL "?relay", Device_App_MessageMSGCB
zclOnOffLight_Init  SYMBOL "zclOnOffLight_Init"
??zclOnOffLight_Init?relay SYMBOL "?relay", zclOnOffLight_Init
zclOnOffLight_event_loop SYMBOL "zclOnOffLight_event_loop"
??zclOnOffLight_event_loop?relay SYMBOL "?relay", zclOnOffLight_event_loop

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclHA_Init
        FUNCTION zclHA_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclDeviceInfoInit
        FUNCTION zclDeviceInfoInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclLightControlInit
        FUNCTION zclLightControlInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclLightReportEvent
        FUNCTION zclLightReportEvent,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclLightControlTouchPanelEnable
        FUNCTION zclLightControlTouchPanelEnable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSendDeviceInfo
        FUNCTION zclSendDeviceInfo,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclSendHeartbeat
        FUNCTION zclSendHeartbeat,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclTouchPanelEvent
        FUNCTION zclTouchPanelEvent,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclRestoreInterruptEvent
        FUNCTION zclRestoreInterruptEvent,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclFactoryResetEvent
        FUNCTION zclFactoryResetEvent,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclFactoryReset
        FUNCTION zclFactoryReset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_PermitJoiningRequest
        FUNCTION NLME_PermitJoiningRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_AnnounceNewAddress
        FUNCTION ZDApp_AnnounceNewAddress,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??NLME_PermitJoiningRequest?relay
        FUNCTION ??NLME_PermitJoiningRequest?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDApp_AnnounceNewAddress?relay
        FUNCTION ??ZDApp_AnnounceNewAddress?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??zclDeviceInfoInit?relay
        FUNCTION ??zclDeviceInfoInit?relay,00H
        EXTERN ??zclFactoryReset?relay
        FUNCTION ??zclFactoryReset?relay,00H
        EXTERN ??zclFactoryResetEvent?relay
        FUNCTION ??zclFactoryResetEvent?relay,00H
        EXTERN ??zclGeneral_RegisterCmdCallbacks?relay
        FUNCTION ??zclGeneral_RegisterCmdCallbacks?relay,00H
        EXTERN ??zclHA_Init?relay
        FUNCTION ??zclHA_Init?relay,00H
        EXTERN ??zclLightControlInit?relay
        FUNCTION ??zclLightControlInit?relay,00H
        EXTERN ??zclLightControlTouchPanelEnable?relay
        FUNCTION ??zclLightControlTouchPanelEnable?relay,00H
        EXTERN ??zclLightReportEvent?relay
        FUNCTION ??zclLightReportEvent?relay,00H
        EXTERN ??zclRestoreInterruptEvent?relay
        FUNCTION ??zclRestoreInterruptEvent?relay,00H
        EXTERN ??zclSendDeviceInfo?relay
        FUNCTION ??zclSendDeviceInfo?relay,00H
        EXTERN ??zclSendHeartbeat?relay
        FUNCTION ??zclSendHeartbeat?relay,00H
        EXTERN ??zclTouchPanelEvent?relay
        FUNCTION ??zclTouchPanelEvent?relay,00H
        EXTERN ??zcl_registerAttrList?relay
        FUNCTION ??zcl_registerAttrList?relay,00H
        EXTERN ??zcl_registerForMsg?relay
        FUNCTION ??zcl_registerForMsg?relay,00H
        EXTERN g_u8HeartBeatCount
        EXTERN zclOnOffLight0_Attrs
        EXTERN zclOnOffLight0_OnOff
        EXTERN zclOnOffLight0_SimpleDesc
        EXTERN zclOnOffLight1_Attrs
        EXTERN zclOnOffLight1_OnOff
        EXTERN zclOnOffLight1_SimpleDesc
        EXTERN zclOnOffLight2_Attrs
        EXTERN zclOnOffLight2_OnOff
        EXTERN zclOnOffLight2_SimpleDesc
        EXTERN zclOnOffLight3_Attrs
        EXTERN zclOnOffLight3_OnOff
        EXTERN zclOnOffLight3_SimpleDesc
        EXTERN zclOnOffLight_IdentifyTime

// D:\work space\Smart Product_zstack2.5.1a\Two YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomation\SmartSwitchLight\Source\zcl_onofflight.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl_sampleLight.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - sample device application.
//    8 
//    9 
//   10   Copyright 2006-2009 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com. 
//   39 **************************************************************************************************/
//   40 
//   41 /*********************************************************************
//   42   This device will be like a Light device.  This application is not
//   43   intended to be a Light device, but will use the device description
//   44   to implement this sample code.
//   45 *********************************************************************/
//   46 
//   47 /*********************************************************************
//   48  * INCLUDES
//   49  */
//   50 #include "ZComDef.h"
//   51 #include "OSAL.h"
//   52 #include "AF.h"
//   53 #include "ZDApp.h"
//   54 
//   55 #include "zcl.h"
//   56 #include "zcl_general.h"
//   57 #include "zcl_ha.h"
//   58 
//   59 #include "zcl_onofflight.h"
//   60 
//   61 #include "onboard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08dH
// unsigned char volatile __sfr P1IEN
P1IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0abH
// unsigned char volatile __sfr P0IEN
P0IEN:
        DATA8
        DS 1
//   62 
//   63 /* HAL */
//   64 #include "hal_lcd.h"
//   65 #include "hal_led.h"
//   66 #include "hal_key.h"
//   67 
//   68 #include "zcl_light_control.h"
//   69 #include "zcl_device_info.h"
//   70 
//   71 /*********************************************************************
//   72  * MACROS
//   73  */
//   74 
//   75 /*********************************************************************
//   76  * CONSTANTS
//   77  */
//   78 /*********************************************************************
//   79  * TYPEDEFS
//   80  */
//   81 
//   82 /*********************************************************************
//   83  * GLOBAL VARIABLES
//   84  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   85 byte zclOnOffLight_TaskID;
zclOnOffLight_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   86 devStates_t zclDevice_NwkState;
zclDevice_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   87 int8 zclDevice_JoinNetworkOk = 8;
zclDevice_JoinNetworkOk:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zclDevice_JoinNetworkOk>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   88 int8 zclDevice_InitDone = 0;
zclDevice_InitDone:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   89 uint8 zcl_Led_Blink = 0;
zcl_Led_Blink:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   90 endPointDesc_t DeviceApp_epDesc;
DeviceApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   91 uint8 ledcontrol = 0;
ledcontrol:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   92 
//   93 extern uint8 g_u8HeartBeatCount;//–ƒÃ¯∞¸º∆ ˝

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   94 uint8 g_u8sendDeviceInfoFlag = 0;//0x00ƒ¨»œ∑¢ÀÕ£ª0x01 ’µΩ∑˛ŒÒ∆˜»±…Ÿ…Ë±∏–≈œ¢µƒªÿ÷¥
g_u8sendDeviceInfoFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//   95 uint8 ReJoinNetFlagInFlash[1] = {0xFF};//0x01:±Ì æ∏¥Œªº”»ÎÕ¯¬Á£ª0x02:±Ì æ∂œµÁ÷ÿ∆Ù
ReJoinNetFlagInFlash:
        DATA8
        DS 1
        REQUIRE `?<Initializer for ReJoinNetFlagInFlash>`
        REQUIRE __INIT_XDATA_I
//   96 /*********************************************************************
//   97  * GLOBAL FUNCTIONS
//   98  */
//   99 /*********************************************************************
//  100  * LOCAL VARIABLES
//  101  */
//  102 //static afAddrType_t zclOnOffLight_DstAddr;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  103 uint8 g_RestCount = 0;
g_RestCount:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  104 /*********************************************************************
//  105  * LOCAL FUNCTIONS
//  106  */
//  107 static void zclOnOffLight_HandleKeys( byte shift, byte keys );
//  108 static void zclOnOffLight_BasicResetCB( void );
//  109 static void zclOnOffLight_IdentifyCB( zclIdentify_t *pCmd );
//  110 static void zclOnOffLight_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  111 static void zclOnOffLight0_OnOffCB(uint8 cmd );
//  112 static void zclOnOffLight1_OnOffCB(uint8 cmd );
//  113 static void zclOnOffLight2_OnOffCB(uint8 cmd );
//  114 static void zclOnOffLight3_OnOffCB(uint8 cmd );
//  115 static void zclOnOffLight_OnOffCB(uint8 light, uint8 cmd );
//  116 static void zclOnOffLight_ProcessIdentifyTimeChange( void );
//  117 
//  118 // Functions to process ZCL Foundation incoming Command/Response messages 
//  119 static void zclOnOffLight_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  120 #ifdef ZCL_READ
//  121 static uint8 zclOnOffLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  122 #endif
//  123 #ifdef ZCL_WRITE
//  124 static uint8 zclOnOffLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  125 #endif
//  126 static uint8 zclOnOffLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  127 #ifdef ZCL_DISCOVER
//  128 static uint8 zclOnOffLight_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg );
//  129 #endif
//  130 
//  131 /*********************************************************************
//  132  * ZCL General Profile Callback table
//  133  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  134 static zclGeneral_AppCallbacks_t zclOnOffLight0_CmdCallbacks =
zclOnOffLight0_CmdCallbacks:
        DATA8
        DS 30
        REQUIRE `?<Initializer for zclOnOffLight0_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  135 {
//  136   zclOnOffLight_BasicResetCB,              // Basic Cluster Reset command
//  137   zclOnOffLight_IdentifyCB,                // Identify command  
//  138   zclOnOffLight_IdentifyQueryRspCB,        // Identify Query Response command
//  139   zclOnOffLight0_OnOffCB,                   // On/Off cluster command
//  140   NULL,                                     // Level Control Move to Level command
//  141   NULL,                                     // Level Control Move command
//  142   NULL,                                     // Level Control Step command
//  143   NULL,                                     // Group Response commands
//  144   NULL,                                     // Scene Store Request command
//  145   NULL,                                     // Scene Recall Request command
//  146   NULL,                                     // Scene Response command
//  147   NULL,                                     // Alarm (Response) command
//  148   NULL,                                     // RSSI Location commands
//  149   NULL,                                     // RSSI Location Response commands
//  150 };

        RSEG XDATA_I:XDATA:NOROOT(0)
//  151 static zclGeneral_AppCallbacks_t zclOnOffLight1_CmdCallbacks =
zclOnOffLight1_CmdCallbacks:
        DATA8
        DS 30
        REQUIRE `?<Initializer for zclOnOffLight1_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  152 {
//  153   zclOnOffLight_BasicResetCB,              // Basic Cluster Reset command
//  154   zclOnOffLight_IdentifyCB,                // Identify command  
//  155   zclOnOffLight_IdentifyQueryRspCB,        // Identify Query Response command
//  156   zclOnOffLight1_OnOffCB,                   // On/Off cluster command
//  157   NULL,                                     // Level Control Move to Level command
//  158   NULL,                                     // Level Control Move command
//  159   NULL,                                     // Level Control Step command
//  160   NULL,                                     // Group Response commands
//  161   NULL,                                     // Scene Store Request command
//  162   NULL,                                     // Scene Recall Request command
//  163   NULL,                                     // Scene Response command
//  164   NULL,                                     // Alarm (Response) command
//  165   NULL,                                     // RSSI Location commands
//  166   NULL,                                     // RSSI Location Response commands
//  167 };

        RSEG XDATA_I:XDATA:NOROOT(0)
//  168 static zclGeneral_AppCallbacks_t zclOnOffLight2_CmdCallbacks =
zclOnOffLight2_CmdCallbacks:
        DATA8
        DS 30
        REQUIRE `?<Initializer for zclOnOffLight2_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  169 {
//  170   zclOnOffLight_BasicResetCB,              // Basic Cluster Reset command
//  171   zclOnOffLight_IdentifyCB,                // Identify command  
//  172   zclOnOffLight_IdentifyQueryRspCB,        // Identify Query Response command
//  173   zclOnOffLight2_OnOffCB,                   // On/Off cluster command
//  174   NULL,                                     // Level Control Move to Level command
//  175   NULL,                                     // Level Control Move command
//  176   NULL,                                     // Level Control Step command
//  177   NULL,                                     // Group Response commands
//  178   NULL,                                     // Scene Store Request command
//  179   NULL,                                     // Scene Recall Request command
//  180   NULL,                                     // Scene Response command
//  181   NULL,                                     // Alarm (Response) command
//  182   NULL,                                     // RSSI Location commands
//  183   NULL,                                     // RSSI Location Response commands
//  184 };

        RSEG XDATA_I:XDATA:NOROOT(0)
//  185 static zclGeneral_AppCallbacks_t zclOnOffLight3_CmdCallbacks =
zclOnOffLight3_CmdCallbacks:
        DATA8
        DS 30
        REQUIRE `?<Initializer for zclOnOffLight3_CmdCallbacks>`
        REQUIRE __INIT_XDATA_I
//  186 {
//  187   zclOnOffLight_BasicResetCB,              // Basic Cluster Reset command
//  188   zclOnOffLight_IdentifyCB,                // Identify command  
//  189   zclOnOffLight_IdentifyQueryRspCB,        // Identify Query Response command
//  190   zclOnOffLight3_OnOffCB,                   // On/Off cluster command
//  191   NULL,                                     // Level Control Move to Level command
//  192   NULL,                                     // Level Control Move command
//  193   NULL,                                     // Level Control Step command
//  194   NULL,                                     // Group Response commands
//  195   NULL,                                     // Scene Store Request command
//  196   NULL,                                     // Scene Recall Request command
//  197   NULL,                                     // Scene Response command
//  198   NULL,                                     // Alarm (Response) command
//  199   NULL,                                     // RSSI Location commands
//  200   NULL,                                     // RSSI Location Response commands
//  201 };
//  202 /*********************************************************************
//  203  * @fn          zclOnOffLight_Init
//  204  *
//  205  * @brief       Initialization function for the zclGeneral layer.
//  206  *
//  207  * @param       none
//  208  *
//  209  * @return      none
//  210  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  211 void zclOnOffLight_Init( byte task_id )
zclOnOffLight_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function zclOnOffLight_Init
        CODE
//  212 {
        FUNCALL zclOnOffLight_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, zclHA_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, zcl_registerForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, zclDeviceInfoInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_Init, zclLightControlInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  213   zclOnOffLight_TaskID = task_id;
        MOV     DPTR,#zclOnOffLight_TaskID
        MOVX    @DPTR,A
//  214   zclDevice_JoinNetworkOk = 6;
        MOV     DPTR,#zclDevice_JoinNetworkOk
        MOV     A,#0x6
        MOVX    @DPTR,A
//  215   zclDevice_NwkState = DEV_INIT;
        MOV     DPTR,#zclDevice_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  216   zclDevice_InitDone = 0;
        MOV     DPTR,#zclDevice_InitDone
        CLR     A
        MOVX    @DPTR,A
//  217   // Set destination address to indirect
//  218   //zclOnOffLight_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
//  219   //zclOnOffLight_DstAddr.endPoint = 0;
//  220   //zclOnOffLight_DstAddr.addr.shortAddr = 0;
//  221     
//  222   DeviceApp_epDesc.endPoint = 0xF0;
        MOV     DPTR,#DeviceApp_epDesc
        MOV     A,#-0x10
        MOVX    @DPTR,A
//  223   DeviceApp_epDesc.task_id = &zclOnOffLight_TaskID;
        INC     DPTR
        MOV     A,#zclOnOffLight_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(zclOnOffLight_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  224   DeviceApp_epDesc.simpleDesc
//  225             = (SimpleDescriptionFormat_t *)&zclOnOffLight0_SimpleDesc;
        INC     DPTR
        MOV     A,#zclOnOffLight0_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(zclOnOffLight0_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  226   DeviceApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  227 
//  228   // Register the endpoint description with the AF
//  229   afRegister( &DeviceApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#DeviceApp_epDesc & 0xff
        MOV     R3,#(DeviceApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  230 
//  231   // This app is part of the Home Automation Profile
//  232   zclHA_Init( &zclOnOffLight0_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zclOnOffLight0_SimpleDesc & 0xff
        MOV     R3,#(zclOnOffLight0_SimpleDesc >> 8) & 0xff
        LCALL   ??zclHA_Init?relay
//  233   zclHA_Init( &zclOnOffLight1_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zclOnOffLight1_SimpleDesc & 0xff
        MOV     R3,#(zclOnOffLight1_SimpleDesc >> 8) & 0xff
        LCALL   ??zclHA_Init?relay
//  234   zclHA_Init( &zclOnOffLight2_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zclOnOffLight2_SimpleDesc & 0xff
        MOV     R3,#(zclOnOffLight2_SimpleDesc >> 8) & 0xff
        LCALL   ??zclHA_Init?relay
//  235   zclHA_Init( &zclOnOffLight3_SimpleDesc );
        ; Setup parameters for call to function zclHA_Init
        MOV     R2,#zclOnOffLight3_SimpleDesc & 0xff
        MOV     R3,#(zclOnOffLight3_SimpleDesc >> 8) & 0xff
        LCALL   ??zclHA_Init?relay
//  236 
//  237   // Register the ZCL General Cluster Library callback functions
//  238   zclGeneral_RegisterCmdCallbacks( ONOFFLIGHT0_ENDPOINT, &zclOnOffLight0_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclOnOffLight0_CmdCallbacks & 0xff
        MOV     R3,#(zclOnOffLight0_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x10
        LCALL   ??zclGeneral_RegisterCmdCallbacks?relay
//  239   zclGeneral_RegisterCmdCallbacks( ONOFFLIGHT1_ENDPOINT, &zclOnOffLight1_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclOnOffLight1_CmdCallbacks & 0xff
        MOV     R3,#(zclOnOffLight1_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x11
        LCALL   ??zclGeneral_RegisterCmdCallbacks?relay
//  240   zclGeneral_RegisterCmdCallbacks( ONOFFLIGHT2_ENDPOINT, &zclOnOffLight2_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclOnOffLight2_CmdCallbacks & 0xff
        MOV     R3,#(zclOnOffLight2_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x12
        LCALL   ??zclGeneral_RegisterCmdCallbacks?relay
//  241   zclGeneral_RegisterCmdCallbacks( ONOFFLIGHT3_ENDPOINT, &zclOnOffLight3_CmdCallbacks );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zclOnOffLight3_CmdCallbacks & 0xff
        MOV     R3,#(zclOnOffLight3_CmdCallbacks >> 8) & 0xff
        MOV     R1,#0x13
        LCALL   ??zclGeneral_RegisterCmdCallbacks?relay
//  242   
//  243   // Register the application's attribute list
//  244   zcl_registerAttrList( ONOFFLIGHT0_ENDPOINT, ONOFFLIGHT_MAX_ATTRIBUTES, zclOnOffLight0_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclOnOffLight0_Attrs & 0xff
        MOV     R5,#(zclOnOffLight0_Attrs >> 8) & 0xff
        MOV     R2,#0xc
        MOV     R1,#0x10
        LCALL   ??zcl_registerAttrList?relay
//  245   zcl_registerAttrList( ONOFFLIGHT1_ENDPOINT, ONOFFLIGHT_MAX_ATTRIBUTES, zclOnOffLight1_Attrs );  
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclOnOffLight1_Attrs & 0xff
        MOV     R5,#(zclOnOffLight1_Attrs >> 8) & 0xff
        MOV     R2,#0xc
        MOV     R1,#0x11
        LCALL   ??zcl_registerAttrList?relay
//  246   zcl_registerAttrList( ONOFFLIGHT2_ENDPOINT, ONOFFLIGHT_MAX_ATTRIBUTES, zclOnOffLight2_Attrs );  
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclOnOffLight2_Attrs & 0xff
        MOV     R5,#(zclOnOffLight2_Attrs >> 8) & 0xff
        MOV     R2,#0xc
        MOV     R1,#0x12
        LCALL   ??zcl_registerAttrList?relay
//  247   zcl_registerAttrList( ONOFFLIGHT3_ENDPOINT, ONOFFLIGHT_MAX_ATTRIBUTES, zclOnOffLight3_Attrs );  
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zclOnOffLight3_Attrs & 0xff
        MOV     R5,#(zclOnOffLight3_Attrs >> 8) & 0xff
        MOV     R2,#0xc
        MOV     R1,#0x13
        LCALL   ??zcl_registerAttrList?relay
//  248   
//  249   // Register the Application to receive the unprocessed Foundation command/response messages
//  250   zcl_registerForMsg( zclOnOffLight_TaskID );
        ; Setup parameters for call to function zcl_registerForMsg
        MOV     DPTR,#zclOnOffLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zcl_registerForMsg?relay
//  251   
//  252   // Register for all key events - This app will handle all key events
//  253   RegisterForKeys( zclOnOffLight_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zclOnOffLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  254  
//  255   zclDeviceInfoInit();
        ; Setup parameters for call to function zclDeviceInfoInit
        LCALL   ??zclDeviceInfoInit?relay
//  256   zclLightControlInit();
        ; Setup parameters for call to function zclLightControlInit
        LCALL   ??zclLightControlInit?relay
//  257 }
        LJMP    ??Subroutine10_0 & 0xFFFF
        CFI EndBlock cfiBlock0
//  258 
//  259 /*********************************************************************
//  260  * @fn          zclSample_event_loop
//  261  *
//  262  * @brief       Event Loop Processor for zclGeneral.
//  263  *
//  264  * @param       none
//  265  *
//  266  * @return      none
//  267  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  268 uint16 zclOnOffLight_event_loop( uint8 task_id, uint16 events )
zclOnOffLight_event_loop:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function zclOnOffLight_event_loop
        CODE
//  269 {
        FUNCALL zclOnOffLight_event_loop, zclLightReportEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, AppDeviceNwkJionState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, Device_App_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, zclLightControlTouchPanelEnable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, zclSendDeviceInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, zclSendHeartbeat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, zclTouchPanelEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, zclRestoreInterruptEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, zclFactoryResetEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, zclFactoryReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  270   afIncomingMSGPacket_t *MSGpkt;
//  271   
//  272   (void)task_id;  // Intentionally unreferenced parameter
//  273 
//  274   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      $+5
        LJMP    ??zclOnOffLight_event_loop_0 & 0xFFFF
//  275   {
//  276     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( zclOnOffLight_TaskID )) )
//  277     {
//  278       switch ( MSGpkt->hdr.event )
//  279       {
//  280       case AF_INCOMING_MSG_CMD:
//  281         Device_App_MessageMSGCB(MSGpkt);
//  282         break;
//  283       case ZCL_INCOMING_MSG:
//  284         // Incoming ZCL Foundation command/response messages
//  285         zclOnOffLight_ProcessIncomingMsg( (zclIncomingMsg_t *)MSGpkt );
//  286         break;
//  287       case KEY_CHANGE:
//  288         zclOnOffLight_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  289         break;
//  290       case ZDO_STATE_CHANGE:
//  291         zclDevice_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  292         if (zclDevice_NwkState == DEV_ROUTER ) {
//  293           AppDeviceNwkJionState();
//  294           osal_start_timerEx(zclOnOffLight_TaskID, 
//  295                              ZCL_DEVICE_INFO_SEND_EVENT,
//  296                              ZCL_DEVICE_SEND_INFO_TIME_30S);
//  297           
//  298         }
//  299         break;
//  300       default:
//  301         break;
//  302       }
//  303 
//  304       // Release the memory
//  305       osal_msg_deallocate( (uint8 *)MSGpkt );
//  306     }
//  307     
//  308     // return unprocessed events
//  309     return (events ^ SYS_EVENT_MSG);
//  310   }
//  311 
//  312   if (events & ZCL_DEVICE_SEND_ONOFF_STATE_EVENT) 
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??zclOnOffLight_event_loop_1
//  313   {
//  314     zclLightReportEvent(ONOFFLIGHT_ENDPONT_0xF0, &zclOnOffLight0_OnOff);  
        ; Setup parameters for call to function zclLightReportEvent
        MOV     R4,#zclOnOffLight0_OnOff & 0xff
        MOV     R5,#(zclOnOffLight0_OnOff >> 8) & 0xff
        MOV     R2,#-0x10
        MOV     R3,#0x0
        LCALL   ??zclLightReportEvent?relay
//  315   }
//  316   
//  317   if (events & ZCL_DEVICE_EXIT_NETWORK_EVENT) 
??zclOnOffLight_event_loop_1:
        MOV     A,R7
        ANL     A,#0x10
        JZ      ??CrossCallReturnLabel_17
//  318   {
//  319     if( !ledcontrol ){
        MOV     DPTR,#ledcontrol
        MOVX    A,@DPTR
        JNZ     ??CrossCallReturnLabel_17
//  320     LED_RED_ON();
        SETB    0x80.5
//  321     osal_start_timerEx(zclOnOffLight_TaskID, 
//  322                        ZCL_DEVICE_LEDOFF_EVENT,
//  323                        200);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x38
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x20
        LCALL   ??Subroutine12_0 & 0xFFFF
//  324     }
//  325   }
//  326   
//  327   if (events & ZCL_DEVICE_LEDOFF_EVENT) 
??CrossCallReturnLabel_17:
        MOV     A,R7
        ANL     A,#0x20
        JZ      ??CrossCallReturnLabel_18
//  328   {
//  329     LED_RED_OFF();
        CLR     0x80.5
//  330     osal_start_timerEx(zclOnOffLight_TaskID, 
//  331                        ZCL_DEVICE_EXIT_NETWORK_EVENT,
//  332                        2000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x0
        MOV     R3,#0x10
        LCALL   ??Subroutine12_0 & 0xFFFF
//  333   }
//  334   
//  335   if ( events & ONOFFLIGHT_IDENTIFY_TIMEOUT_EVT )
??CrossCallReturnLabel_18:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??zclOnOffLight_event_loop_2 & 0xFFFF
//  336   {
//  337     if ( zclOnOffLight_IdentifyTime > 0 )
        MOV     DPTR,#zclOnOffLight_IdentifyTime
        LCALL   ??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??zclOnOffLight_event_loop_3 & 0xFFFF
//  338       zclOnOffLight_IdentifyTime--;
        MOV     DPTR,#zclOnOffLight_IdentifyTime
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  339     zclOnOffLight_ProcessIdentifyTimeChange();
        DEC     R0
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JNZ     $+5
        LJMP    ??zclOnOffLight_event_loop_3 & 0xFFFF
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine3 & 0xFFFF
//  340     
//  341     //return ( events ^ ONOFFLIGHT_IDENTIFY_TIMEOUT_EVT );
//  342   }
??CrossCallReturnLabel_25:
        LJMP    ??zclOnOffLight_event_loop_2 & 0xFFFF
??zclOnOffLight_event_loop_4:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zclDevice_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x7
        JNZ     ??CrossCallReturnLabel_19
        ; Setup parameters for call to function AppDeviceNwkJionState
        LCALL   ??AppDeviceNwkJionState?relay
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        MOV     B,#0x14
        MUL     AB
        ADD     A,#0x60
        MOV     R4,A
        MOV     A,B
        ADDC    A,#0x6d
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x1
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_19:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
??zclOnOffLight_event_loop_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zclOnOffLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??zclOnOffLight_event_loop_5
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??zclOnOffLight_event_loop_6
        ADD     A,#-0x1a
        JZ      ??zclOnOffLight_event_loop_7
        ADD     A,#0x63
        JZ      ??zclOnOffLight_event_loop_4
        SJMP    ??CrossCallReturnLabel_19
??zclOnOffLight_event_loop_6:
        ; Setup parameters for call to function Device_App_MessageMSGCB
        LCALL   ??Device_App_MessageMSGCB?relay
        SJMP    ??CrossCallReturnLabel_19
??zclOnOffLight_event_loop_7:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zclOnOffLight_event_loop_8
        ADD     A,#-0x3
        JNZ     ??zclOnOffLight_event_loop_9
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        JZ      ??zclOnOffLight_event_loop_9
??zclOnOffLight_event_loop_10:
        INC     R0
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JNC     ??zclOnOffLight_event_loop_9
        SJMP    ??zclOnOffLight_event_loop_10
??zclOnOffLight_event_loop_8:
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_4:
        JZ      ??zclOnOffLight_event_loop_9
??zclOnOffLight_event_loop_11:
        INC     R0
        MOV     A,R0
        CLR     C
        SUBB    A,R1
        JC      ??zclOnOffLight_event_loop_11
??zclOnOffLight_event_loop_9:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??CrossCallReturnLabel_19
        ; Setup parameters for call to function osal_mem_free
        LCALL   ??osal_mem_free?relay
        SJMP    ??CrossCallReturnLabel_19
??zclOnOffLight_event_loop_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        MOV     R3,A
        LJMP    ??zclOnOffLight_event_loop_12 & 0xFFFF
??zclOnOffLight_event_loop_3:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclOnOffLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  343   
//  344   if (events & ZCL_DEVICE_INIT_DONE_EVENT) 
??zclOnOffLight_event_loop_2:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??CrossCallReturnLabel_20
//  345   {
//  346     zclDevice_InitDone = 1;
        MOV     DPTR,#zclDevice_InitDone
        MOV     A,#0x1
        MOVX    @DPTR,A
//  347     LED_RED_OFF();
        CLR     0x80.5
//  348     zclLightControlTouchPanelEnable();
        ; Setup parameters for call to function zclLightControlTouchPanelEnable
        LCALL   ??zclLightControlTouchPanelEnable?relay
//  349     
//  350     //≥ı ºªØÕÍ≥…LED…¡À∏
//  351     ledcontrol=0;
        MOV     DPTR,#ledcontrol
        CLR     A
        MOVX    @DPTR,A
//  352     osal_start_timerEx(zclOnOffLight_TaskID, 
//  353                        ZCL_DEVICE_EXIT_NETWORK_EVENT,
//  354                        2000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,A
        MOV     R3,#0x10
        LCALL   ??Subroutine12_0 & 0xFFFF
//  355     //return (events ^ ZCL_DEVICE_INIT_DONE_EVENT);
//  356   }
//  357   
//  358   if (events & ZCL_DEVICE_INFO_SEND_EVENT) 
??CrossCallReturnLabel_20:
        MOV     A,R7
        ANL     A,#0x1
        JZ      ??zclOnOffLight_event_loop_13
//  359   {
//  360     zclSendDeviceInfo();
        ; Setup parameters for call to function zclSendDeviceInfo
        LCALL   ??zclSendDeviceInfo?relay
//  361   }
//  362   
//  363   if (events & ZCL_DEVICE_HEARTBEAT_EVENT) 
??zclOnOffLight_event_loop_13:
        MOV     A,R7
        ANL     A,#0x2
        JZ      ??CrossCallReturnLabel_21
//  364   {
//  365     
//  366     g_u8HeartBeatCount++;
        MOV     DPTR,#g_u8HeartBeatCount
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  367     if(g_u8HeartBeatCount >= 2)
        CLR     C
        SUBB    A,#0x2
        JC      ??zclOnOffLight_event_loop_14
//  368     {
//  369       g_u8HeartBeatCount = 0;
        CLR     A
        MOVX    @DPTR,A
//  370       zclSendHeartbeat();
        ; Setup parameters for call to function zclSendHeartbeat
        LCALL   ??zclSendHeartbeat?relay
//  371     }
//  372     
//  373     osal_start_timerEx(zclOnOffLight_TaskID, 
//  374                        ZCL_DEVICE_HEARTBEAT_EVENT,
//  375                        ZCL_HEARTBEAT_PERIOD);
??zclOnOffLight_event_loop_14:
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        MOV     B,#0x1e
        MUL     AB
        ADD     A,#0x50
        MOV     R4,A
        MOV     A,B
        ADDC    A,#-0x3d
        MOV     R5,A
        MOV     R2,#0x0
        MOV     R3,#0x2
        LCALL   ??Subroutine12_0 & 0xFFFF
//  376   }
//  377   
//  378   if (events & ZCL_DEVICE_TOUCHPANEL_EVENT) //»•∂∂200ms
??CrossCallReturnLabel_21:
        MOV     A,R6
        ANL     A,#0x10
        JZ      ??zclOnOffLight_event_loop_15
//  379   {
//  380     if( (P0_0 == 0) || (P0_1 == 0) || (P1_0 == 0) || (P1_2 == 0)){
        MOV     C,0x80.0
        JNC     ??zclOnOffLight_event_loop_16
        MOV     C,0x80.1
        JNC     ??zclOnOffLight_event_loop_16
        MOV     C,0x90.0
        JNC     ??zclOnOffLight_event_loop_16
        MOV     C,0x90.2
        JC      ??zclOnOffLight_event_loop_17
//  381       osal_start_timerEx(zclOnOffLight_TaskID,
//  382                          ZCL_DEVICE_DONEINTERRUPT_EVENT,
//  383                          100);
??zclOnOffLight_event_loop_16:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x40
        LCALL   ??Subroutine12_0 & 0xFFFF
//  384     }else{
??CrossCallReturnLabel_22:
        SJMP    ??zclOnOffLight_event_loop_15
//  385       P0IEN |= BV(0);
??zclOnOffLight_event_loop_17:
        ORL     0xab,#0x1
//  386       P0IEN |= BV(1);
        ORL     0xab,#0x2
//  387       P1IEN |= BV(0);
        ORL     0x8d,#0x1
//  388       P1IEN |= BV(2);
        ORL     0x8d,#0x4
//  389     }
//  390     //return (events ^ ZCL_DEVICE_LIGHT0_TOUCHPANEL_EVENT);
//  391   }
//  392   
//  393   if(events & ZCL_DEVICE_DONEINTERRUPT_EVENT) 
??zclOnOffLight_event_loop_15:
        MOV     A,R7
        ANL     A,#0x40
        JZ      ??zclOnOffLight_event_loop_18
//  394   {
//  395     zclTouchPanelEvent();
        ; Setup parameters for call to function zclTouchPanelEvent
        LCALL   ??zclTouchPanelEvent?relay
//  396     //return (events ^ ZCL_DEVICE_DONEINTERRUPT_EVENT);
//  397   }
//  398   
//  399   if (events & ZCL_DEVICE_RESTORE_INTERRUPT_EVENT) 
??zclOnOffLight_event_loop_18:
        MOV     A,R6
        ANL     A,#0x20
        JZ      ??zclOnOffLight_event_loop_19
//  400   {
//  401     zclRestoreInterruptEvent();
        ; Setup parameters for call to function zclRestoreInterruptEvent
        LCALL   ??zclRestoreInterruptEvent?relay
//  402     //return (events ^ ZCL_DEVICE_LIGHT1_TOUCHPANEL_EVENT);
//  403   }
//  404   
//  405   if(events & ZCL_DEVICE_RESET_1_EVENT)
??zclOnOffLight_event_loop_19:
        MOV     A,R7
        ANL     A,#0x8
        JZ      ??zclOnOffLight_event_loop_20
//  406   {
//  407     if(P0_7 == 0)
        MOV     C,0x80.7
        JC      ??zclOnOffLight_event_loop_21
//  408     {
//  409       g_RestCount++;
        MOV     DPTR,#g_RestCount
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  410       if(g_RestCount>=3)
        CLR     C
        SUBB    A,#0x3
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        JC      ??zclOnOffLight_event_loop_22
//  411       {
//  412         osal_start_timerEx(zclOnOffLight_TaskID, 
//  413                            ZCL_DEVICE_RESET_EVENT,
//  414                            100);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R3,#0x4
//  415       }
??zclOnOffLight_event_loop_23:
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_23:
        SJMP    ??zclOnOffLight_event_loop_20
//  416       else
//  417       {
//  418         osal_start_timerEx(zclOnOffLight_TaskID, 
//  419                            ZCL_DEVICE_RESET_1_EVENT,
//  420                            100);
??zclOnOffLight_event_loop_22:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R3,#0x8
        SJMP    ??zclOnOffLight_event_loop_23
//  421       }
//  422     }
//  423     else
//  424     {
//  425       P0IEN |= BV(7);
??zclOnOffLight_event_loop_21:
        ORL     0xab,#0x80
//  426       g_RestCount=0;
        MOV     DPTR,#g_RestCount
        CLR     A
        MOVX    @DPTR,A
//  427     }
//  428   }
//  429   
//  430   if (events & ZCL_DEVICE_RESET_EVENT) 
??zclOnOffLight_event_loop_20:
        MOV     A,R7
        ANL     A,#0x4
        JZ      ??zclOnOffLight_event_loop_24
//  431   {
//  432     zclFactoryResetEvent();
        ; Setup parameters for call to function zclFactoryResetEvent
        LCALL   ??zclFactoryResetEvent?relay
//  433   }
//  434   
//  435   if(events & ZCL_DEVICE_SOFT_RESTART_EVENT)
??zclOnOffLight_event_loop_24:
        MOV     A,R6
        ANL     A,#0x40
        JZ      ??CrossCallReturnLabel_16
//  436   {
//  437     if(zcl_Led_Blink >= 30)
        MOV     DPTR,#zcl_Led_Blink
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x1e
        JC      ??zclOnOffLight_event_loop_25
//  438     {
//  439       zclFactoryReset(TRUE);
        ; Setup parameters for call to function zclFactoryReset
        MOV     R1,#0x1
        LCALL   ??zclFactoryReset?relay
        SJMP    ??CrossCallReturnLabel_16
//  440     }
//  441     else
//  442     {
//  443       if(zcl_Led_Blink %2 == 0)
??zclOnOffLight_event_loop_25:
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JC      ??zclOnOffLight_event_loop_26
//  444       {
//  445         LED_RED_OFF();
        CLR     0x80.5
        SJMP    ??zclOnOffLight_event_loop_27
//  446       } else {
//  447         LED_RED_ON();
??zclOnOffLight_event_loop_26:
        SETB    0x80.5
//  448       }
//  449       zcl_Led_Blink++;
??zclOnOffLight_event_loop_27:
        INC     A
        MOVX    @DPTR,A
//  450       osal_start_timerEx(zclOnOffLight_TaskID, 
//  451                          ZCL_DEVICE_SOFT_RESTART_EVENT,
//  452                          ZCL_FACTORY_RESET_HINT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x38
        MOV     R5,#0x0
        MOV     R2,#0x40
        LCALL   ??Subroutine11_0 & 0xFFFF
//  453     }
//  454   }
//  455   // Discard unknown events
//  456   return 0;
??CrossCallReturnLabel_16:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zclOnOffLight_event_loop_12:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
        REQUIRE _A_P0
        REQUIRE _A_P1
        REQUIRE P0IEN
        REQUIRE P1IEN
//  457 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_3
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond3) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond3) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond3) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond3) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond3) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond3) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond3) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond3) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond3) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond3) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond3) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond3) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond3) CFA_SP SP+0
        CFI (cfiCond3) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker4 Using cfiCommon1
        CFI (cfiPicker4) NoFunction
        CFI (cfiPicker4) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R0,#0x0
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiPicker4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_3
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_10, ??CrossCallReturnLabel_4
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker8 Using cfiCommon1
        CFI (cfiPicker8) NoFunction
        CFI (cfiPicker8) Picker
        MOV     A,R2
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiPicker8
//  458 
//  459 /*********************************************************************
//  460  * @fn      zclOnOffLight_HandleKeys
//  461  *
//  462  * @brief   Handles all key events for this device.
//  463  *
//  464  * @param   shift - true if in shift/alt.
//  465  * @param   keys - bit field for key events. Valid entries:
//  466  *                 HAL_KEY_SW_4
//  467  *                 HAL_KEY_SW_3
//  468  *                 HAL_KEY_SW_2
//  469  *                 HAL_KEY_SW_1
//  470  *
//  471  * @return  none
//  472  */
//  473 static void zclOnOffLight_HandleKeys( byte shift, byte keys )
//  474 {
//  475  // zAddrType_t dstAddr;
//  476   
//  477   (void)shift;  // Intentionally unreferenced parameter
//  478 
//  479   if ( keys & HAL_KEY_SW_2 )
//  480   {
//  481   }
//  482 
//  483   if ( keys & HAL_KEY_SW_3 )
//  484   {
//  485   }
//  486 
//  487   if ( keys & HAL_KEY_SW_4 )
//  488   {
//  489   }
//  490 }
//  491 
//  492 /*********************************************************************
//  493  * @fn      zclOnOffLight_ProcessIdentifyTimeChange
//  494  *
//  495  * @brief   Called to process any change to the IdentifyTime attribute.
//  496  *
//  497  * @param   none
//  498  *
//  499  * @return  none
//  500  */
//  501 static void zclOnOffLight_ProcessIdentifyTimeChange( void )
//  502 {
//  503   if ( zclOnOffLight_IdentifyTime > 0 )
//  504   {
//  505     osal_start_timerEx( zclOnOffLight_TaskID, ONOFFLIGHT_IDENTIFY_TIMEOUT_EVT, 1000 );
//  506   }
//  507   else
//  508   {
//  509     osal_stop_timerEx( zclOnOffLight_TaskID, ONOFFLIGHT_IDENTIFY_TIMEOUT_EVT );
//  510   }
//  511 }
//  512 
//  513 /*********************************************************************
//  514  * @fn      zclOnOffLight_BasicResetCB
//  515  *
//  516  * @brief   Callback from the ZCL General Cluster Library
//  517  *          to set all the Basic Cluster attributes to default values.
//  518  *
//  519  * @param   none
//  520  *
//  521  * @return  none
//  522  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  523 static void zclOnOffLight_BasicResetCB( void )
zclOnOffLight_BasicResetCB:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function zclOnOffLight_BasicResetCB
        CODE
//  524 {
        ; Saved register size: 0
        ; Auto size: 0
//  525   // Reset all attributes to default values
//  526 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock9
//  527 
//  528 /*********************************************************************
//  529  * @fn      zclOnOffLight_IdentifyCB
//  530  *
//  531  * @brief   Callback from the ZCL General Cluster Library when
//  532  *          it received an Identity Command for this application.
//  533  *
//  534  * @param   srcAddr - source address and endpoint of the response message
//  535  * @param   identifyTime - the number of seconds to identify yourself
//  536  *
//  537  * @return  none
//  538  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  539 static void zclOnOffLight_IdentifyCB( zclIdentify_t *pCmd )
zclOnOffLight_IdentifyCB:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function zclOnOffLight_IdentifyCB
        CODE
//  540 {
        FUNCALL zclOnOffLight_IdentifyCB, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_IdentifyCB, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  541   zclOnOffLight_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     DPTR,#zclOnOffLight_IdentifyTime
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  542   zclOnOffLight_ProcessIdentifyTimeChange();
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclOnOffLight_IdentifyCB_0
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_15:
        SJMP    ??zclOnOffLight_IdentifyCB_1
??zclOnOffLight_IdentifyCB_0:
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zclOnOffLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  543 }
??zclOnOffLight_IdentifyCB_1:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock10

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond11 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond12 Using cfiCommon0
        CFI (cfiCond12) NoFunction
        CFI (cfiCond12) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond12) CFA_SP SP+0
        CFI (cfiCond12) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker13 Using cfiCommon1
        CFI (cfiPicker13) NoFunction
        CFI (cfiPicker13) Picker
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        CFI EndBlock cfiCond11
        CFI EndBlock cfiCond12
        CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine9_0:
        CFI Block cfiCond14 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond15) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond15) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond15) CFA_SP SP+-5
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
//  544 
//  545 /*********************************************************************
//  546  * @fn      zclOnOffLight_IdentifyQueryRspCB
//  547  *
//  548  * @brief   Callback from the ZCL General Cluster Library when
//  549  *          it received an Identity Query Response Command for this application.
//  550  *
//  551  * @param   srcAddr - requestor's address
//  552  * @param   timeout - number of seconds to identify yourself (valid for query response)
//  553  *
//  554  * @return  none
//  555  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  556 static void zclOnOffLight_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
zclOnOffLight_IdentifyQueryRspCB:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function zclOnOffLight_IdentifyQueryRspCB
        CODE
//  557 {
        ; Saved register size: 0
        ; Auto size: 0
//  558   // Query Response (with timeout value)
//  559   (void)pRsp;
//  560 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock19
//  561 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  562 static void zclOnOffLight0_OnOffCB(uint8 cmd )
zclOnOffLight0_OnOffCB:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function zclOnOffLight0_OnOffCB
        CODE
//  563 {
        FUNCALL zclOnOffLight0_OnOffCB, zclOnOffLight_OnOffCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  564   zclOnOffLight_OnOffCB(0, cmd);
        ; Setup parameters for call to function zclOnOffLight_OnOffCB
        MOV     R2,A
        MOV     R1,#0x0
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock20
//  565 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  566 static void zclOnOffLight1_OnOffCB(uint8 cmd )
zclOnOffLight1_OnOffCB:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function zclOnOffLight1_OnOffCB
        CODE
//  567 {
        FUNCALL zclOnOffLight1_OnOffCB, zclOnOffLight_OnOffCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  568   zclOnOffLight_OnOffCB(1, cmd);
        ; Setup parameters for call to function zclOnOffLight_OnOffCB
        MOV     R2,A
        MOV     R1,#0x1
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock21
//  569 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  570 static void zclOnOffLight2_OnOffCB(uint8 cmd )
zclOnOffLight2_OnOffCB:
        CFI Block cfiBlock22 Using cfiCommon0
        CFI Function zclOnOffLight2_OnOffCB
        CODE
//  571 {
        FUNCALL zclOnOffLight2_OnOffCB, zclOnOffLight_OnOffCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  572   zclOnOffLight_OnOffCB(2, cmd);
        ; Setup parameters for call to function zclOnOffLight_OnOffCB
        MOV     R2,A
        MOV     R1,#0x2
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock22
//  573 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  574 static void zclOnOffLight3_OnOffCB(uint8 cmd )
zclOnOffLight3_OnOffCB:
        CFI Block cfiBlock23 Using cfiCommon0
        CFI Function zclOnOffLight3_OnOffCB
        CODE
//  575 {
        FUNCALL zclOnOffLight3_OnOffCB, zclOnOffLight_OnOffCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  576   zclOnOffLight_OnOffCB(3, cmd);
        ; Setup parameters for call to function zclOnOffLight_OnOffCB
        MOV     R2,A
        MOV     R1,#0x3
        CFI EndBlock cfiBlock23
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  577 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock24 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ??zclOnOffLight_OnOffCB?relay
        CFI EndBlock cfiBlock24
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine10_0:
        CFI Block cfiBlock25 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock25
//  578 /*********************************************************************
//  579  * @fn      zclOnOffLight_OnOffCB
//  580  *
//  581  * @brief   Callback from the ZCL General Cluster Library when
//  582  *          it received an On/Off Command for this application.
//  583  *
//  584  * @param   cmd - COMMAND_ON, COMMAND_OFF or COMMAND_TOGGLE
//  585  *
//  586  * @return  none
//  587  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  588 static void zclOnOffLight_OnOffCB(uint8 light, uint8 cmd )
zclOnOffLight_OnOffCB:
        CFI Block cfiBlock26 Using cfiCommon0
        CFI Function zclOnOffLight_OnOffCB
        CODE
//  589 {
        FUNCALL zclOnOffLight_OnOffCB, zclLightReportEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_OnOffCB, zclLightReportEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_OnOffCB, zclLightReportEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclOnOffLight_OnOffCB, zclLightReportEvent
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  590   uint8 *zclOnOffLight_OnOff;
//  591   
//  592   if (light == 0)
        MOV     A,R6
        JNZ     ??zclOnOffLight_OnOffCB_0
//  593     zclOnOffLight_OnOff = &zclOnOffLight0_OnOff;
        MOV     DPL,#zclOnOffLight0_OnOff & 0xff
        MOV     DPH,#(zclOnOffLight0_OnOff >> 8) & 0xff
        SJMP    ??zclOnOffLight_OnOffCB_1
//  594   else if(light == 1)
??zclOnOffLight_OnOffCB_0:
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??zclOnOffLight_OnOffCB_2
//  595     zclOnOffLight_OnOff = &zclOnOffLight1_OnOff;
        MOV     DPL,#zclOnOffLight1_OnOff & 0xff
        MOV     DPH,#(zclOnOffLight1_OnOff >> 8) & 0xff
        SJMP    ??zclOnOffLight_OnOffCB_1
//  596   else if(light == 2)
??zclOnOffLight_OnOffCB_2:
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zclOnOffLight_OnOffCB_3
//  597    zclOnOffLight_OnOff = &zclOnOffLight2_OnOff;
        MOV     DPL,#zclOnOffLight2_OnOff & 0xff
        MOV     DPH,#(zclOnOffLight2_OnOff >> 8) & 0xff
        SJMP    ??zclOnOffLight_OnOffCB_1
//  598   else if(light == 3)
??zclOnOffLight_OnOffCB_3:
        MOV     A,#0x3
        XRL     A,R6
        JNZ     ??zclOnOffLight_OnOffCB_1
//  599    zclOnOffLight_OnOff = &zclOnOffLight3_OnOff;
        MOV     DPL,#zclOnOffLight3_OnOff & 0xff
        MOV     DPH,#(zclOnOffLight3_OnOff >> 8) & 0xff
//  600   
//  601   if ( cmd == COMMAND_ON ) 
??zclOnOffLight_OnOffCB_1:
        MOV     A,#0x1
        XRL     A,R7
        JNZ     ??zclOnOffLight_OnOffCB_4
//  602   {
//  603     *zclOnOffLight_OnOff = LIGHT_ON;
??zclOnOffLight_OnOffCB_5:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  604   } else if ( cmd == COMMAND_OFF ) 
//  605   {
//  606     *zclOnOffLight_OnOff = LIGHT_OFF;
//  607   } else 
//  608   {
//  609     if ( *zclOnOffLight_OnOff == LIGHT_OFF )
//  610       *zclOnOffLight_OnOff = LIGHT_ON;
//  611     else
//  612       *zclOnOffLight_OnOff = LIGHT_OFF;
//  613   }
//  614   
//  615   if ( *zclOnOffLight_OnOff == LIGHT_ON ) 
//  616   {
//  617     if (light == 0)
        MOV     A,R6
        JNZ     ??zclOnOffLight_OnOffCB_6
//  618       LIGHT_TURN_ON_LIGHT0();
        SETB    0x80.2
//  619     else if(light == 1)
//  620       LIGHT_TURN_ON_LIGHT1();
//  621     else if(light == 2)
//  622      LIGHT_TURN_ON_LIGHT2();
//  623     else if(light == 3)
//  624       LIGHT_TURN_ON_LIGHT3();
//  625   } else 
//  626   {
//  627     if (light == 0)
//  628       LIGHT_TURN_OFF_LIGHT0();
//  629     else if(light == 1)
//  630       LIGHT_TURN_OFF_LIGHT1();
//  631    else if(light == 2)
//  632      LIGHT_TURN_OFF_LIGHT2();
//  633     else if(light == 3)
//  634       LIGHT_TURN_OFF_LIGHT3();
//  635   }
//  636   
//  637   if (light == 0) {
//  638     zclLightReportEvent(ONOFFLIGHT0_ENDPOINT, &zclOnOffLight0_OnOff);
??zclOnOffLight_OnOffCB_7:
        ; Setup parameters for call to function zclLightReportEvent
        MOV     R4,#zclOnOffLight0_OnOff & 0xff
        MOV     R5,#(zclOnOffLight0_OnOff >> 8) & 0xff
        MOV     R2,#0x10
        SJMP    ??zclOnOffLight_OnOffCB_8
//  639   } else if(light == 1) {
??zclOnOffLight_OnOffCB_4:
        MOV     A,R7
        JNZ     ??zclOnOffLight_OnOffCB_9
??zclOnOffLight_OnOffCB_10:
        CLR     A
        MOVX    @DPTR,A
        MOV     A,R6
        JNZ     ??zclOnOffLight_OnOffCB_11
        CLR     0x80.2
        SJMP    ??zclOnOffLight_OnOffCB_7
??zclOnOffLight_OnOffCB_9:
        MOVX    A,@DPTR
        JNZ     ??zclOnOffLight_OnOffCB_10
        SJMP    ??zclOnOffLight_OnOffCB_5
??zclOnOffLight_OnOffCB_6:
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??zclOnOffLight_OnOffCB_12
        SETB    0x80.3
//  640     zclLightReportEvent(ONOFFLIGHT1_ENDPOINT, &zclOnOffLight1_OnOff);
??zclOnOffLight_OnOffCB_13:
        ; Setup parameters for call to function zclLightReportEvent
        MOV     R4,#zclOnOffLight1_OnOff & 0xff
        MOV     R5,#(zclOnOffLight1_OnOff >> 8) & 0xff
        MOV     R2,#0x11
        SJMP    ??zclOnOffLight_OnOffCB_8
//  641   } else if(light == 2){
??zclOnOffLight_OnOffCB_12:
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zclOnOffLight_OnOffCB_14
        SETB    0x80.4
//  642   zclLightReportEvent(ONOFFLIGHT2_ENDPOINT, &zclOnOffLight2_OnOff);
??zclOnOffLight_OnOffCB_15:
        ; Setup parameters for call to function zclLightReportEvent
        MOV     R4,#zclOnOffLight2_OnOff & 0xff
        MOV     R5,#(zclOnOffLight2_OnOff >> 8) & 0xff
        MOV     R2,#0x12
        SJMP    ??zclOnOffLight_OnOffCB_8
//  643   } 
??zclOnOffLight_OnOffCB_14:
        MOV     A,#0x3
        XRL     A,R6
        JNZ     ??zclOnOffLight_OnOffCB_16
        SETB    0x80.6
        SJMP    ??zclOnOffLight_OnOffCB_17
??zclOnOffLight_OnOffCB_11:
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??zclOnOffLight_OnOffCB_18
        CLR     0x80.3
        SJMP    ??zclOnOffLight_OnOffCB_13
??zclOnOffLight_OnOffCB_18:
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??zclOnOffLight_OnOffCB_19
        CLR     0x80.4
        SJMP    ??zclOnOffLight_OnOffCB_15
??zclOnOffLight_OnOffCB_19:
        MOV     A,#0x3
        XRL     A,R6
        JNZ     ??zclOnOffLight_OnOffCB_16
        CLR     0x80.6
        SJMP    ??zclOnOffLight_OnOffCB_17
//  644   else if(light == 3){
??zclOnOffLight_OnOffCB_16:
        MOV     A,#0x3
        XRL     A,R6
        JNZ     ??zclOnOffLight_OnOffCB_20
//  645     zclLightReportEvent(ONOFFLIGHT3_ENDPOINT, &zclOnOffLight3_OnOff);
??zclOnOffLight_OnOffCB_17:
        ; Setup parameters for call to function zclLightReportEvent
        MOV     R4,#zclOnOffLight3_OnOff & 0xff
        MOV     R5,#(zclOnOffLight3_OnOff >> 8) & 0xff
        MOV     R2,#0x13
??zclOnOffLight_OnOffCB_8:
        MOV     R3,#0x0
        LCALL   ??zclLightReportEvent?relay
//  646   }
//  647 }
??zclOnOffLight_OnOffCB_20:
        LJMP    ??Subroutine10_0 & 0xFFFF
        CFI EndBlock cfiBlock26
        REQUIRE _A_P0
//  648 
//  649 
//  650 /****************************************************************************** 
//  651 * 
//  652  *  Functions for processing ZCL Foundation incoming Command/Response messages
//  653  *
//  654  *****************************************************************************/
//  655 
//  656 /*********************************************************************
//  657  * @fn      zclOnOffLight_ProcessIncomingMsg
//  658  *
//  659  * @brief   Process ZCL Foundation incoming message
//  660  *
//  661  * @param   pInMsg - pointer to the received message
//  662  *
//  663  * @return  none
//  664  */
//  665 static void zclOnOffLight_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
//  666 {
//  667  
//  668   switch ( pInMsg->zclHdr.commandID )
//  669   {
//  670 #ifdef ZCL_READ
//  671     case ZCL_CMD_READ_RSP:
//  672       zclOnOffLight_ProcessInReadRspCmd( pInMsg );
//  673       break;
//  674 #endif
//  675 #ifdef ZCL_WRITE    
//  676     case ZCL_CMD_WRITE_RSP:
//  677       zclOnOffLight_ProcessInWriteRspCmd( pInMsg );
//  678       break;
//  679 #endif
//  680 #ifdef ZCL_REPORT
//  681     // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
//  682     case ZCL_CMD_CONFIG_REPORT:
//  683       //zclOnOffLight_ProcessInConfigReportCmd( pInMsg );
//  684       break;
//  685     
//  686     case ZCL_CMD_CONFIG_REPORT_RSP:
//  687       //zclOnOffLight_ProcessInConfigReportRspCmd( pInMsg );
//  688       break;
//  689     
//  690     case ZCL_CMD_READ_REPORT_CFG:
//  691       //zclOnOffLight_ProcessInReadReportCfgCmd( pInMsg );
//  692       break;
//  693     
//  694     case ZCL_CMD_READ_REPORT_CFG_RSP:
//  695       //zclOnOffLight_ProcessInReadReportCfgRspCmd( pInMsg );
//  696       break;
//  697     
//  698     case ZCL_CMD_REPORT:
//  699       //zclOnOffLight_ProcessInReportCmd( pInMsg );
//  700       break;
//  701 #endif   
//  702     case ZCL_CMD_DEFAULT_RSP:
//  703       zclOnOffLight_ProcessInDefaultRspCmd( pInMsg );
//  704       break;
//  705 #ifdef ZCL_DISCOVER     
//  706     case ZCL_CMD_DISCOVER_RSP:
//  707       zclOnOffLight_ProcessInDiscRspCmd( pInMsg );
//  708       break;
//  709 #endif  
//  710     default:
//  711       break;
//  712   }
//  713   
//  714   if ( pInMsg->attrCmd )
//  715     osal_mem_free( pInMsg->attrCmd );
//  716 }
//  717 
//  718 #ifdef ZCL_READ
//  719 /*********************************************************************
//  720  * @fn      zclOnOffLight_ProcessInReadRspCmd
//  721  *
//  722  * @brief   Process the "Profile" Read Response Command
//  723  *
//  724  * @param   pInMsg - incoming message to process
//  725  *
//  726  * @return  none
//  727  */
//  728 static uint8 zclOnOffLight_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
//  729 {
//  730   zclReadRspCmd_t *readRspCmd;
//  731   uint8 i;
//  732 
//  733   readRspCmd = (zclReadRspCmd_t *)pInMsg->attrCmd;
//  734   for (i = 0; i < readRspCmd->numAttr; i++)
//  735   {
//  736     // Notify the originator of the results of the original read attributes 
//  737     // attempt and, for each successfull request, the value of the requested 
//  738     // attribute
//  739   }
//  740 
//  741   return TRUE; 
//  742 }
//  743 #endif // ZCL_READ
//  744 
//  745 #ifdef ZCL_WRITE
//  746 /*********************************************************************
//  747  * @fn      zclOnOffLight_ProcessInWriteRspCmd
//  748  *
//  749  * @brief   Process the "Profile" Write Response Command
//  750  *
//  751  * @param   pInMsg - incoming message to process
//  752  *
//  753  * @return  none
//  754  */
//  755 static uint8 zclOnOffLight_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
//  756 {
//  757   zclWriteRspCmd_t *writeRspCmd;
//  758   uint8 i;
//  759 
//  760   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
//  761   for (i = 0; i < writeRspCmd->numAttr; i++)
//  762   {
//  763     // Notify the device of the results of the its original write attributes
//  764     // command.
//  765   }
//  766 
//  767   return TRUE; 
//  768 }
//  769 #endif // ZCL_WRITE
//  770 
//  771 /*********************************************************************
//  772  * @fn      zclOnOffLight_ProcessInDefaultRspCmd
//  773  *
//  774  * @brief   Process the "Profile" Default Response Command
//  775  *
//  776  * @param   pInMsg - incoming message to process
//  777  *
//  778  * @return  none
//  779  */
//  780 static uint8 zclOnOffLight_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
//  781 {
//  782   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
//  783    
//  784   // Device is notified of the Default Response command.
//  785   (void)pInMsg;
//  786   
//  787   return TRUE; 
//  788 }
//  789 
//  790 #ifdef ZCL_DISCOVER
//  791 /*********************************************************************
//  792  * @fn      zclOnOffLight_ProcessInDiscRspCmd
//  793  *
//  794  * @brief   Process the "Profile" Discover Response Command
//  795  *
//  796  * @param   pInMsg - incoming message to process
//  797  *
//  798  * @return  none
//  799  */
//  800 static uint8 zclOnOffLight_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg )
//  801 {
//  802   zclDiscoverRspCmd_t *discoverRspCmd;
//  803   uint8 i;
//  804   
//  805   discoverRspCmd = (zclDiscoverRspCmd_t *)pInMsg->attrCmd;
//  806   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
//  807   {
//  808     // Device is notified of the result of its attribute discovery command.
//  809   }
//  810   
//  811   return TRUE;
//  812 }
//  813 #endif // ZCL_DISCOVER
//  814 
//  815 
//  816 /****************************************************************************
//  817 ****************************************************************************/
//  818 
//  819 
//  820 /***************************************************************************
//  821 *****************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  822 void Device_App_MessageMSGCB(afIncomingMSGPacket_t *pkt)
Device_App_MessageMSGCB:
        CFI Block cfiBlock27 Using cfiCommon0
        CFI Function Device_App_MessageMSGCB
        CODE
//  823 {
        FUNCALL Device_App_MessageMSGCB, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Device_App_MessageMSGCB, ZDApp_AnnounceNewAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Device_App_MessageMSGCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Device_App_MessageMSGCB, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Device_App_MessageMSGCB, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  824   switch(pkt->clusterId)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for Device_App_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        6
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Device_App_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2304
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Device_App_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2305
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??Device_App_MessageMSGCB_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??CrossCallReturnLabel_24
        CODE
//  825   {
//  826   case ZCL_CLUSTER_ID_PREMIT_JOIN_ZB_NET:
//  827     if(pkt->cmd.Data[0] == 0xFF)
??Device_App_MessageMSGCB_1:
        MOV     A,R2
        ADD     A,#0x22
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_13:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??Device_App_MessageMSGCB_3
//  828     {
//  829       pkt->cmd.Data[0] = 60;
        MOV     A,#0x3c
        MOVX    @DPTR,A
//  830     }
//  831     NLME_PermitJoiningRequest(pkt->cmd.Data[0]);
??Device_App_MessageMSGCB_3:
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     R1,A
        LCALL   ??NLME_PermitJoiningRequest?relay
//  832     break;
        LJMP    ??CrossCallReturnLabel_24 & 0xFFFF
//  833     
//  834   case ZCL_CLUSTER_ID_SEND_DEVICE_INFO:
//  835     if(pkt->cmd.Data[0] == 0x01)
??Device_App_MessageMSGCB_2:
        MOV     A,R2
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        XRL     A,#0x1
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_24 & 0xFFFF
//  836     {
//  837       if(g_u8sendDeviceInfoFlag == 0)//…Ë±∏Œ¥∑¢ÀÕÕÍœ˚œ¢÷Æ«∞≤ªΩ” ‹–¬µƒ∑¢ÀÕ»ŒŒÒ
        MOV     DPTR,#g_u8sendDeviceInfoFlag
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_24 & 0xFFFF
//  838       {
//  839         g_u8sendDeviceInfoFlag=1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  840         ZDApp_AnnounceNewAddress();
        ; Setup parameters for call to function ZDApp_AnnounceNewAddress
        LCALL   ??ZDApp_AnnounceNewAddress?relay
//  841         osal_start_timerEx(zclOnOffLight_TaskID, 
//  842                            ZCL_DEVICE_INFO_SEND_EVENT,
//  843                            500);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R2,#0x0
        MOV     R3,#0x1
        SJMP    ??Device_App_MessageMSGCB_4
//  844       }
//  845     }break;
//  846     
//  847     
//  848   case ZCL_CLUSTER_ID_GEN_ON_OFF:
//  849     {
//  850       if(pkt->cmd.Data[3]== DEVICE_All || pkt->cmd.Data[3]== DEVICE_LIGHT)
??Device_App_MessageMSGCB_0:
        MOV     A,R2
        ADD     A,#0x22
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_14:
        MOV     A,R0
        ADD     A,#0x3
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        JZ      ??Device_App_MessageMSGCB_5
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_24
//  851       {
//  852         if(pkt->cmd.Data[2] == COMMAND_ON)
??Device_App_MessageMSGCB_5:
        MOV     A,R0
        ADD     A,#0x2
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??Device_App_MessageMSGCB_6
//  853         {
//  854           LIGHT_TURN_ON_LIGHT0();
        SETB    0x80.2
//  855           LIGHT_TURN_ON_LIGHT1();
        SETB    0x80.3
//  856           LIGHT_TURN_ON_LIGHT2();
        SETB    0x80.4
//  857           LIGHT_TURN_ON_LIGHT3();
        SETB    0x80.6
        SJMP    ??Device_App_MessageMSGCB_7
//  858         }
//  859         else if(pkt->cmd.Data[2] == COMMAND_OFF)
??Device_App_MessageMSGCB_6:
        MOVX    A,@DPTR
        JNZ     ??Device_App_MessageMSGCB_7
//  860         {
//  861           LIGHT_TURN_OFF_LIGHT0();
        CLR     0x80.2
//  862           LIGHT_TURN_OFF_LIGHT1();
        CLR     0x80.3
//  863           LIGHT_TURN_OFF_LIGHT2(); 
        CLR     0x80.4
//  864           LIGHT_TURN_OFF_LIGHT3();
        CLR     0x80.6
//  865         }
//  866         
//  867         zclOnOffLight0_OnOff = pkt->cmd.Data[2];
??Device_App_MessageMSGCB_7:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zclOnOffLight0_OnOff
        LCALL   ?Subroutine2 & 0xFFFF
//  868         zclOnOffLight1_OnOff = pkt->cmd.Data[2];
??CrossCallReturnLabel_0:
        MOV     DPTR,#zclOnOffLight1_OnOff
        LCALL   ?Subroutine2 & 0xFFFF
//  869         zclOnOffLight2_OnOff = pkt->cmd.Data[2];
??CrossCallReturnLabel_1:
        MOV     DPTR,#zclOnOffLight2_OnOff
        LCALL   ?Subroutine2 & 0xFFFF
//  870         zclOnOffLight3_OnOff = pkt->cmd.Data[2];
??CrossCallReturnLabel_2:
        MOV     DPTR,#zclOnOffLight3_OnOff
        MOVX    @DPTR,A
//  871         
//  872         osal_start_timerEx(zclOnOffLight_TaskID, 
//  873                            ZCL_DEVICE_SEND_ONOFF_STATE_EVENT,
//  874                            ZCL_DEVICE_SEND_INFO_TIME_2S);
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x30
        MOV     R4,A
        CLR     A
        ADDC    A,#0x7
        MOV     R5,A
        MOV     R2,#0x2
        MOV     R3,#0x0
//  875       }
//  876     }
//  877     break;
//  878   default:
//  879     break;
//  880   }
??Device_App_MessageMSGCB_4:
        LCALL   ??Subroutine12_0 & 0xFFFF
        CFI EndBlock cfiBlock27
//  881 
//  882 }
??CrossCallReturnLabel_24:
        REQUIRE ?Subroutine1
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock28 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond29 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker31 Using cfiCommon1
        CFI (cfiPicker31) NoFunction
        CFI (cfiPicker31) Picker
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiPicker31

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond32 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_25
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond33) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond33) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond33) CFA_SP SP+-5
        CFI Block cfiPicker34 Using cfiCommon1
        CFI (cfiPicker34) NoFunction
        CFI (cfiPicker34) Picker
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x1
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiPicker34
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
        CFI Block cfiCond35 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond37) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond37) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond37) CFA_SP SP+-5
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOV     R3,#0x0
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond49) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond49) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond49) CFA_SP SP+-5
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        MOV     DPTR,#zclOnOffLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond55 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_6
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond57 Using cfiCommon0
        CFI (cfiCond57) NoFunction
        CFI (cfiCond57) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_0
        CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond57) CFA_SP SP+0
        CFI (cfiCond57) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_1
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond59 Using cfiCommon0
        CFI (cfiCond59) NoFunction
        CFI (cfiCond59) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_2
        CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond59) CFA_SP SP+0
        CFI (cfiCond59) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker60 Using cfiCommon1
        CFI (cfiPicker60) NoFunction
        CFI (cfiPicker60) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiCond59
        CFI EndBlock cfiPicker60
//  883 
//  884 
//  885 //////////////////////////////////////////////////////////////////////////////////
//  886 //≈–∂œ…Ë±∏ «∑Ò «–¬Ω⁄µ„…Ë±∏º”»ÎÕ¯¬Á£¨ «‘Ú¥Úø™…Ë±∏
//  887 ///////////////////////////////////////////////////////////////////////////////////

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  888 void AppDeviceNwkJionState(void)
AppDeviceNwkJionState:
        CFI Block cfiBlock61 Using cfiCommon0
        CFI Function AppDeviceNwkJionState
        CODE
//  889 {
        FUNCALL AppDeviceNwkJionState, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AppDeviceNwkJionState, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AppDeviceNwkJionState, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AppDeviceNwkJionState, NLME_PermitJoiningRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AppDeviceNwkJionState, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL AppDeviceNwkJionState, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  890   if(SUCCESS == osal_nv_read(ZDAPP_NV_SYSTEM_RESTART_FLAG,0,sizeof(ReJoinNetFlagInFlash),ReJoinNetFlagInFlash))
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 0,#ReJoinNetFlagInFlash & 0xff
        MOV     ?V0 + 1,#(ReJoinNetFlagInFlash >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     DPTR,#ReJoinNetFlagInFlash
        JNZ     ??AppDeviceNwkJionState_0
//  891   {
//  892     if(ReJoinNetFlagInFlash[0] ==0x01)//±Ì æ∏¥Œª÷ÿ∆Ù
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??AppDeviceNwkJionState_1
//  893     {
//  894       NLME_PermitJoiningRequest(60);//…œµÁÕ¯¬Á‘ –Ìº”»Î
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,#0x3c
??AppDeviceNwkJionState_2:
        LCALL   ??NLME_PermitJoiningRequest?relay
        SJMP    ??AppDeviceNwkJionState_3
//  895     }
//  896     else
//  897     {
//  898       NLME_PermitJoiningRequest(0);//…œµÁπÿ±’Õ¯¬Á‘ –Ìº”»Î
??AppDeviceNwkJionState_1:
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,#0x0
        SJMP    ??AppDeviceNwkJionState_2
//  899     }
//  900     
//  901   }
//  902   else
//  903   {
//  904     ReJoinNetFlagInFlash[0] = 0x02;
??AppDeviceNwkJionState_0:
        MOV     A,#0x2
        MOVX    @DPTR,A
//  905     NLME_PermitJoiningRequest(60);//…œµÁÕ¯¬Á‘ –Ìº”»Î
        ; Setup parameters for call to function NLME_PermitJoiningRequest
        MOV     R1,#0x3c
        LCALL   ??NLME_PermitJoiningRequest?relay
//  906     osal_nv_item_init(ZDAPP_NV_SYSTEM_RESTART_FLAG,sizeof(ReJoinNetFlagInFlash),NULL);
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  907     osal_nv_write(ZDAPP_NV_SYSTEM_RESTART_FLAG,0,sizeof(ReJoinNetFlagInFlash),ReJoinNetFlagInFlash);
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#ReJoinNetFlagInFlash & 0xff
        MOV     ?V0 + 1,#(ReJoinNetFlagInFlash >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  908   }
//  909   
//  910 }
??AppDeviceNwkJionState_3:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock61

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclDevice_JoinNetworkOk>`:
        DATA8
        DB 8

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ReJoinNetFlagInFlash>`:
        DATA8
        DB 255

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclOnOffLight0_CmdCallbacks>`:
        DATA16
        DW ??zclOnOffLight_BasicResetCB?relay
        DW ??zclOnOffLight_IdentifyCB?relay
        DW ??zclOnOffLight_IdentifyQueryRspCB?relay
        DW ??zclOnOffLight0_OnOffCB?relay
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DB 0, 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclOnOffLight1_CmdCallbacks>`:
        DATA16
        DW ??zclOnOffLight_BasicResetCB?relay
        DW ??zclOnOffLight_IdentifyCB?relay
        DW ??zclOnOffLight_IdentifyQueryRspCB?relay
        DW ??zclOnOffLight1_OnOffCB?relay
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DB 0, 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclOnOffLight2_CmdCallbacks>`:
        DATA16
        DW ??zclOnOffLight_BasicResetCB?relay
        DW ??zclOnOffLight_IdentifyCB?relay
        DW ??zclOnOffLight_IdentifyQueryRspCB?relay
        DW ??zclOnOffLight2_OnOffCB?relay
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DB 0, 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclOnOffLight3_CmdCallbacks>`:
        DATA16
        DW ??zclOnOffLight_BasicResetCB?relay
        DW ??zclOnOffLight_IdentifyCB?relay
        DW ??zclOnOffLight_IdentifyQueryRspCB?relay
        DW ??zclOnOffLight3_OnOffCB?relay
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DB 0, 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclOnOffLight_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclOnOffLight_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclOnOffLight_event_loop?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclOnOffLight_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclOnOffLight_BasicResetCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclOnOffLight_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclOnOffLight_IdentifyCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclOnOffLight_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclOnOffLight_IdentifyQueryRspCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclOnOffLight_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclOnOffLight0_OnOffCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclOnOffLight0_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclOnOffLight1_OnOffCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclOnOffLight1_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclOnOffLight2_OnOffCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclOnOffLight2_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclOnOffLight3_OnOffCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclOnOffLight3_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclOnOffLight_OnOffCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclOnOffLight_OnOffCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Device_App_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Device_App_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??AppDeviceNwkJionState?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    AppDeviceNwkJionState

        END
//  911 
// 
// 1 477 bytes in segment BANKED_CODE
//    72 bytes in segment BANK_RELAYS
//     4 bytes in segment SFR_AN
//   122 bytes in segment XDATA_I
//   122 bytes in segment XDATA_ID
//    13 bytes in segment XDATA_Z
// 
// 1 671 bytes of CODE  memory
//     0 bytes of DATA  memory (+ 4 bytes shared)
//   135 bytes of XDATA memory
//
//Errors: none
//Warnings: none
