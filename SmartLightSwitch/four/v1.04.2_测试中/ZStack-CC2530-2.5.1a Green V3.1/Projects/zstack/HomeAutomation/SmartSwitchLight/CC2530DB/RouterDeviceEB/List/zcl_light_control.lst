###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         15/Aug/2017  16:54:23 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\work space\Smart Product_zstack2.5.1a\Two       #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\Source\zcl_light_control.c    #
#    Command line       =  -f "D:\work space\Smart Product_zstack2.5.1a\Two   #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\Tools\CC2530DB\f8 #
#                          wRouter.cfg" (-DCPU32MHZ -DROOT=__near_func        #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK -DNV_RESTORE          #
#                          -DNV_INIT -DHAL_PA_LNA -DHAL_KEY=FALSE             #
#                          -DHAL_LED=FALSE -DHAL_LCD=FALSE -DHAL_ADC=FALSE    #
#                          -DWDT_IN_PM1 -DTC_LINKKEY_JOIN                     #
#                          -DMAX_NEIGHBOR_ENTRIES=48 -DTVSA_DATA_CNF=1        #
#                          -DPACKET_FILTER_STATS -DNWK_LINK_STATUS_PERIOD=30) #
#                           -f "D:\work space\Smart Product_zstack2.5.1a\Two  #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\Tools\CC2530DB\f8 #
#                          wConfig.cfg" (-DZIGBEEPRO -DSECURE=1               #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x06108800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=1000              #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4                        #
#                          -DDEFAULT_KEY={0x58,0x69,0x6E,0x67,0x48,0x75,0x6F, #
#                          0x59,0x75,0x61,0x6E,0x53,0x6D,0x61,0x72,0x74}      #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=0            #
#                          -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0        #
#                          -DREJOIN_POLL_RATE=440) -f "D:\work space\Smart    #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\Tools\CC2530DB\f8 #
#                          wZCL.cfg" (-DZCL_READ -DZCL_WRITE -DZCL_REPORT     #
#                          -DZCL_BASIC -DZCL_IDENTIFY -DZCL_ON_OFF            #
#                          -DZCL_KEY_ESTABLISH -DZCL_KEY_ESTABLISHMENT_KEY_GE #
#                          NERATE_TIMEOUT=4 -DZCL_KEY_ESTABLISHMENT_MAC_GENER #
#                          ATE_TIMEOUT=10 -DZCL_KEY_ESTABLISHMENT_EKEY_GENERA #
#                          TE_TIMEOUT=10 -DZCL_LOAD_CONTROL                   #
#                          -DZCL_SIMPLE_METERING -DZCL_PRICING -DZCL_MESSAGE  #
#                          -DZCL_TUNNELING -DZCL_TOU) -DZCL_DEVICE_MGMT       #
#                          "D:\work space\Smart Product_zstack2.5.1a\Two      #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\Source\zcl_light_control.c"   #
#                          -lC "D:\work space\Smart Product_zstack2.5.1a\Two  #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\RouterDeviceEB\List\ #
#                          " -lA "D:\work space\Smart                         #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\RouterDeviceEB\List\ #
#                          " --diag_suppress Pe001,Pa010 -o "D:\work          #
#                          space\Smart Product_zstack2.5.1a\Two               #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\RouterDeviceEB\Obj\" #
#                           -e --debug --core=plain --dptr=16,1               #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\work space\Smart Product_zstack2.5.1a\Two   #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\" -I "D:\work        #
#                          space\Smart Product_zstack2.5.1a\Two               #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\Source\" -I       #
#                          "D:\work space\Smart Product_zstack2.5.1a\Two      #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\Source\" -I    #
#                          "D:\work space\Smart Product_zstack2.5.1a\Two      #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\ZMain\TI253 #
#                          0DB\" -I "D:\work space\Smart                      #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\hal\include\" -I "D:\work space\Smart        #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\hal\target\CC2530EB\" -I "D:\work            #
#                          space\Smart Product_zstack2.5.1a\Two               #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mac\include\" -I "D:\work space\Smart        #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mac\high_level\" -I "D:\work space\Smart     #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mac\low_level\srf04\" -I "D:\work            #
#                          space\Smart Product_zstack2.5.1a\Two               #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mac\low_level\srf04\single_chip\" -I         #
#                          "D:\work space\Smart Product_zstack2.5.1a\Two      #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\mt\" -I "D:\work space\Smart                 #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\osal\include\" -I "D:\work space\Smart       #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\services\saddr\" -I "D:\work space\Smart     #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\services\sdata\" -I "D:\work space\Smart     #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\stack\af\" -I "D:\work space\Smart           #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\stack\nwk\" -I "D:\work space\Smart          #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\stack\sapi\" -I "D:\work space\Smart         #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\stack\sec\" -I "D:\work space\Smart          #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\stack\sys\" -I "D:\work space\Smart          #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\stack\zcl\" -I "D:\work space\Smart          #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\stack\zdo\" -I "D:\work space\Smart          #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\zmac\" -I "D:\work space\Smart               #
#                          Product_zstack2.5.1a\Two                           #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Compo #
#                          nents\zmac\f8w\" -Oh --require_prototypes          #
#    List file          =  D:\work space\Smart Product_zstack2.5.1a\Two       #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\RouterDeviceEB\List\ #
#                          zcl_light_control.lst                              #
#    Object file        =  D:\work space\Smart Product_zstack2.5.1a\Two       #
#                          YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC #
#                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomat #
#                          ion\SmartSwitchLight\CC2530DB\RouterDeviceEB\Obj\z #
#                          cl_light_control.r51                               #
#                                                                             #
#                                                                             #
###############################################################################

D:\work space\Smart Product_zstack2.5.1a\Two YHY\SmartLightSwitch\four\v1.04.2_≤‚ ‘÷–\ZStack-CC2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomation\SmartSwitchLight\Source\zcl_light_control.c
      1          #include "zcl_light_control.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x89
   \   unsigned char volatile __sfr P0IFG
   \                     P0IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8a
   \   unsigned char volatile __sfr P1IFG
   \                     P1IFG:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8c
   \   unsigned char volatile __sfr PICTL
   \                     PICTL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8d
   \   unsigned char volatile __sfr P1IEN
   \                     P1IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x8f
   \   unsigned char volatile __sfr P0INP
   \                     P0INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9a
   \   unsigned char volatile __sfr IEN2
   \                     IEN2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xab
   \   unsigned char volatile __sfr P0IEN
   \                     P0IEN:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xb8
   \   union <unnamed> volatile __sfr _A_IEN1
   \                     _A_IEN1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc0
   \   union <unnamed> volatile __sfr _A_IRCON
   \                     _A_IRCON:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xe8
   \   union <unnamed> volatile __sfr _A_IRCON2
   \                     _A_IRCON2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf6
   \   unsigned char volatile __sfr P1INP
   \                     P1INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf7
   \   unsigned char volatile __sfr P2INP
   \                     P2INP:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
      2          #include "zcl_onofflight.h"
      3          #include "zcl.h"
      4          #include "zcl_device_info.h"
      5          //#include <ioCC2530.h>
      6          
      7          extern byte zclOnOffLight_TaskID;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      8          static afAddrType_t zcl_Coord_nwkAddr;
   \                     zcl_Coord_nwkAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      9          static uint8 zcl_SeqNum = 0;
   \                     zcl_SeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     10          static uint8 zcl_interruptNo = 0;
   \                     zcl_interruptNo:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     11          void zclFactoryResetEvent(void);

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     12          static uint8 zcl_factoryReset = 0;
   \                     zcl_factoryReset:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     13          extern uint8 zcl_Led_Blink;
     14          
     15          extern uint8 ReJoinNetFlagInFlash[1];
     16          extern devStates_t zclDevice_NwkState;
     17          
     18          /*********************************************************************
     19           * @fn      zclLightControlInit
     20           *
     21           * @brief   ≈‰÷√÷∏ æµ∆p0.5 ≈‰÷√ ‰≥ˆIOø⁄p0.2 p0.3 p0.4 p0,6
     22           *          
     23           * @param   none
     24           *
     25           * @return  none
     26           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     27          void zclLightControlInit(void)      //LED≥ı ºªØ
   \                     zclLightControlInit:
     28          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     29            P0SEL &= ~BV(5); //LED-RED
   \   000004   53F3DF       ANL     0xf3,#0xdf
     30            P0DIR |= BV(5);
   \   000007   43FD20       ORL     0xfd,#0x20
     31            
     32            ///init P1.4  P1.5 P1.6and P0.3 for relay control///////////
     33            P0SEL &= ~BV(2);      //π¶ƒ‹£∫∆’Õ®I/Oø⁄ 
   \   00000A   53F3FB       ANL     0xf3,#0xfb
     34            P0DIR |= BV(2);       //∑ΩœÚ£∫ ‰≥ˆ
   \   00000D   43FD04       ORL     0xfd,#0x4
     35            
     36            P0SEL &= ~BV(3);
   \   000010   53F3F7       ANL     0xf3,#0xf7
     37            P0DIR |= BV(3); 
   \   000013   43FD08       ORL     0xfd,#0x8
     38            
     39            P0SEL &= ~BV(4);
   \   000016   53F3EF       ANL     0xf3,#0xef
     40            P0DIR |= BV(4);
   \   000019   43FD10       ORL     0xfd,#0x10
     41            
     42            P0SEL &= ~BV(6);
   \   00001C   53F3BF       ANL     0xf3,#0xbf
     43            P0DIR |= BV(6);
   \   00001F   43FD40       ORL     0xfd,#0x40
     44            
     45            //…œµÁƒ¨»œ÷∏ æµ∆ø™£¨∞¥º¸πÿ»´
     46            LED_RED_ON();
   \   000022   D285         SETB    0x80.5
     47            LIGHT_TURN_OFF_LIGHT0();
   \   000024   C282         CLR     0x80.2
     48            LIGHT_TURN_OFF_LIGHT1();
   \   000026   C283         CLR     0x80.3
     49            LIGHT_TURN_OFF_LIGHT2();
   \   000028   C284         CLR     0x80.4
     50            LIGHT_TURN_OFF_LIGHT3(); 
   \   00002A   C286         CLR     0x80.6
     51            
     52            //…Ë±∏≥ı ºªØÕÍ≥…£¨∆Ù∂Ø∂® ±∆˜
     53            osal_start_timerEx(zclOnOffLight_TaskID, 
     54                               ZCL_DEVICE_INIT_DONE_EVENT,                    
     55                               500);
   \   00002C                ; Setup parameters for call to function osal_start_timerEx
   \   00002C   7CF4         MOV     R4,#-0xc
   \   00002E   7D01         MOV     R5,#0x1
   \   000030   7A08         MOV     R2,#0x8
   \   000032   12....       LCALL   ?Subroutine3 & 0xFFFF
     56            
     57            zcl_Coord_nwkAddr.addrMode = afAddr16Bit;       //–≠µ˜∆˜–≈œ¢
   \                     ??CrossCallReturnLabel_4:
   \   000035   90....       MOV     DPTR,#zcl_Coord_nwkAddr + 8
   \   000038   7402         MOV     A,#0x2
   \   00003A   F0           MOVX    @DPTR,A
     58            zcl_Coord_nwkAddr.addr.shortAddr = 0x0000;
   \   00003B   90....       MOV     DPTR,#zcl_Coord_nwkAddr
   \   00003E   E4           CLR     A
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   F0           MOVX    @DPTR,A
     59            zcl_Coord_nwkAddr.endPoint = 0xF0;
   \   000042   90....       MOV     DPTR,#zcl_Coord_nwkAddr + 9
   \   000045   74F0         MOV     A,#-0x10
   \   000047   F0           MOVX    @DPTR,A
     60          }
   \   000048                REQUIRE ?Subroutine0
   \   000048                REQUIRE P0SEL
   \   000048                REQUIRE P0DIR
   \   000048                REQUIRE _A_P0
   \   000048                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7B00         MOV     R3,#0x0
   \   000002                REQUIRE ??Subroutine6_0
   \   000002                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   90....       MOV     DPTR,#zclOnOffLight_TaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??osal_start_timerEx?relay
   \   000008   22           RET
     61          /*********************************************************************
     62           * @fn      zclLightControlTouchPanelEnable
     63           *
     64           * @brief   ≈‰÷√∞¥º¸p0.0 p0.1 p1.0 p1.2 ≈‰÷√∏¥Œª∞¥º¸p0.7
     65           *          
     66           * @param   none
     67           *
     68           * @return  none
     69           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     70          void zclLightControlTouchPanelEnable(void)
   \                     zclLightControlTouchPanelEnable:
     71          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     72            //KEY_1
     73            P0SEL &= ~BV(0);          //∆’Õ®I/Oø⁄
   \   000000   53F3FE       ANL     0xf3,#0xfe
     74            P0DIR &= ~BV(0);          // ‰»Î
   \   000003   53FDFE       ANL     0xfd,#0xfe
     75            P0INP &= ~BV(0);          
   \   000006   538FFE       ANL     0x8f,#0xfe
     76            P0IEN |= BV(0);           // πƒ‹÷–∂œ
   \   000009   43AB01       ORL     0xab,#0x1
     77            
     78            //KEY_2
     79            P0SEL &= ~BV(1);
   \   00000C   53F3FD       ANL     0xf3,#0xfd
     80            P0DIR &= ~BV(1);
   \   00000F   53FDFD       ANL     0xfd,#0xfd
     81            P0INP &= ~BV(1);
   \   000012   538FFD       ANL     0x8f,#0xfd
     82            P0IEN |= BV(1);  
   \   000015   43AB02       ORL     0xab,#0x2
     83            
     84            P0SEL &= ~BV(7);
   \   000018   53F37F       ANL     0xf3,#0x7f
     85            P0DIR &= ~BV(7);
   \   00001B   53FD7F       ANL     0xfd,#0x7f
     86            P0INP &= ~BV(7);
   \   00001E   538F7F       ANL     0x8f,#0x7f
     87            P2INP &= ~BV(5);
   \   000021   53F7DF       ANL     0xf7,#0xdf
     88            P0IEN |= BV(7);  
   \   000024   43AB80       ORL     0xab,#0x80
     89            
     90            //KEY_3
     91            P1SEL &= ~BV(0);
   \   000027   53F4FE       ANL     0xf4,#0xfe
     92            P1DIR &= ~BV(0);
   \   00002A   53FEFE       ANL     0xfe,#0xfe
     93            P1INP &= ~BV(0);
   \   00002D   53F6FE       ANL     0xf6,#0xfe
     94            P1IEN |= BV(0);  
   \   000030   438D01       ORL     0x8d,#0x1
     95            
     96            //KEY_4
     97            P1SEL &= ~BV(2);
   \   000033   53F4FB       ANL     0xf4,#0xfb
     98            P1DIR &= ~BV(2);
   \   000036   53FEFB       ANL     0xfe,#0xfb
     99            P1INP &= ~BV(2);
   \   000039   53F6FB       ANL     0xf6,#0xfb
    100            P1IEN |= BV(2);  
   \   00003C   438D04       ORL     0x8d,#0x4
    101            
    102            PICTL |= (0x1 << 0);
   \   00003F   438C01       ORL     0x8c,#0x1
    103            IEN1 |= (0x1 << 5);
   \   000042   D2BD         SETB    0xb8.5
    104            PICTL |= (0x1 << 1);
   \   000044   438C02       ORL     0x8c,#0x2
    105            IEN2 |= (0x1 << 4);
   \   000047   439A10       ORL     0x9a,#0x10
    106            P0IFG = 0;
   \   00004A   758900       MOV     0x89,#0x0
    107            P0IF = 0;
   \   00004D   C2C5         CLR     0xc0.5
    108            P1IFG = 0;
   \   00004F   758A00       MOV     0x8a,#0x0
    109            P1IF = 0;
   \   000052   C2EB         CLR     0xe8.3
    110          }
   \   000054   02....       LJMP    ?BRET
   \   000057                REQUIRE P0SEL
   \   000057                REQUIRE P0DIR
   \   000057                REQUIRE P0INP
   \   000057                REQUIRE P0IEN
   \   000057                REQUIRE P2INP
   \   000057                REQUIRE P1SEL
   \   000057                REQUIRE P1DIR
   \   000057                REQUIRE P1INP
   \   000057                REQUIRE P1IEN
   \   000057                REQUIRE PICTL
   \   000057                REQUIRE _A_IEN1
   \   000057                REQUIRE IEN2
   \   000057                REQUIRE P0IFG
   \   000057                REQUIRE _A_IRCON
   \   000057                REQUIRE P1IFG
   \   000057                REQUIRE _A_IRCON2
    111          /*********************************************************************
    112           * @fn      zclLightReportEvent
    113           *
    114           * @brief   ◊¥Ã¨…œ±®
    115           *          
    116           * @param   endpoint - ∂Àµ„
    117           *          zclOnOffLight_OnOff - µ±«∞◊¥Ã¨
    118           *
    119           * @return  none
    120           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          ZStatus_t retstatus = 0;
   \                     retstatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    122          void zclLightReportEvent(uint16 endpoint, uint8 *zclOnOffLight_OnOff)
   \                     zclLightReportEvent:
    123          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   8C..         MOV     ?V0 + 0,R4
   \   000009   8D..         MOV     ?V0 + 1,R5
    124            zclReportCmd_t *pReportCmd;
    125            
    126            pReportCmd = osal_mem_alloc( sizeof(zclReportCmd_t) + sizeof(zclReport_t) );
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   7A06         MOV     R2,#0x6
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   ??osal_mem_alloc?relay
   \   000012   8A..         MOV     ?V0 + 2,R2
   \   000014   8B..         MOV     ?V0 + 3,R3
    127            if ( pReportCmd != NULL )
   \   000016   EA           MOV     A,R2
   \   000017   45..         ORL     A,?V0 + 3
   \   000019   6079         JZ      ??zclLightReportEvent_0
    128            {
    129              pReportCmd->numAttr = 1;
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   7401         MOV     A,#0x1
   \   000021   F0           MOVX    @DPTR,A
    130              pReportCmd->attrList[0].attrID = ATTRID_ON_OFF;
   \   000022   A3           INC     DPTR
   \   000023   E4           CLR     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   12....       LCALL   ?Subroutine4 & 0xFFFF
    131              pReportCmd->attrList[0].dataType = ZCL_DATATYPE_UINT8;
   \                     ??CrossCallReturnLabel_2:
   \   000029   7420         MOV     A,#0x20
   \   00002B   12....       LCALL   ?Subroutine4 & 0xFFFF
    132              pReportCmd->attrList[0].attrData = (void *)(zclOnOffLight_OnOff);
   \                     ??CrossCallReturnLabel_3:
   \   00002E   A3           INC     DPTR
   \   00002F   E5..         MOV     A,?V0 + 0
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   E5..         MOV     A,?V0 + 1
   \   000035   F0           MOVX    @DPTR,A
    133              
    134              if (afStatus_SUCCESS != zcl_SendReportCmd( endpoint, 
    135                                                        &zcl_Coord_nwkAddr,
    136                                                        ZCL_CLUSTER_ID_GEN_ON_OFF,
    137                                                        pReportCmd, ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, 
    138                                                        zcl_SeqNum++ ))
   \   000036   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003C   75..01       MOV     ?V0 + 0,#0x1
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000049   78..         MOV     R0,#?V0 + 2
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   7C06         MOV     R4,#0x6
   \   000050   7D00         MOV     R5,#0x0
   \   000052   7A..         MOV     R2,#zcl_Coord_nwkAddr & 0xff
   \   000054   7B..         MOV     R3,#(zcl_Coord_nwkAddr >> 8) & 0xff
   \   000056   EE           MOV     A,R6
   \   000057   F9           MOV     R1,A
   \   000058   12....       LCALL   ??zcl_SendReportCmd?relay
   \   00005B   7405         MOV     A,#0x5
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000060   E9           MOV     A,R1
   \   000061   602A         JZ      ??zclLightReportEvent_1
    139              {
    140                zcl_SendReportCmd( endpoint, 
    141                                  &zcl_Coord_nwkAddr,
    142                                  ZCL_CLUSTER_ID_GEN_ON_OFF,
    143                                  pReportCmd, ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, 
    144                                  zcl_SeqNum++ );
   \   000063   12....       LCALL   ?Subroutine2 & 0xFFFF
    145              }
   \                     ??CrossCallReturnLabel_1:
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000069   75..01       MOV     ?V0 + 0,#0x1
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000071   78..         MOV     R0,#?V0 + 0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000076   78..         MOV     R0,#?V0 + 2
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007B   7C06         MOV     R4,#0x6
   \   00007D   7D00         MOV     R5,#0x0
   \   00007F   7A..         MOV     R2,#zcl_Coord_nwkAddr & 0xff
   \   000081   7B..         MOV     R3,#(zcl_Coord_nwkAddr >> 8) & 0xff
   \   000083   EE           MOV     A,R6
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??zcl_SendReportCmd?relay
   \   000088   7405         MOV     A,#0x5
   \   00008A   12....       LCALL   ?DEALLOC_XSTACK8
    146              osal_mem_free( pReportCmd );
   \                     ??zclLightReportEvent_1:
   \   00008D                ; Setup parameters for call to function osal_mem_free
   \   00008D   AA..         MOV     R2,?V0 + 2
   \   00008F   AB..         MOV     R3,?V0 + 3
   \   000091   12....       LCALL   ??osal_mem_free?relay
    147            }
    148          }
   \                     ??zclLightReportEvent_0:
   \   000094   7F06         MOV     R7,#0x6
   \   000096   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV     DPTR,#zcl_SeqNum
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   7401         MOV     A,#0x1
   \   000007   28           ADD     A,R0
   \   000008   F0           MOVX    @DPTR,A
   \   000009                ; Setup parameters for call to function zcl_SendReportCmd
   \   000009                ; Setup parameters for call to function zcl_SendReportCmd
   \   000009   E8           MOV     A,R0
   \   00000A   F5..         MOV     ?V0 + 0,A
   \   00000C   78..         MOV     R0,#?V0 + 0
   \   00000E   22           RET
    149          /*********************************************************************
    150           * @fn      zclTouchPanelEvent
    151           *
    152           * @brief   ∞¥º¸ø™πÿ
    153           *          
    154           * @param   none
    155           *
    156           * @return  none
    157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    158          void zclTouchPanelEvent(void)      //∞¥œ¬ø™¥∞¡±ø™£¨∞¥œ¬πÿ¥∞¡±πÿ£¨∞¥œ¬‘›Õ£Õ£÷πø™/πÿ∂Ø◊˜
   \                     zclTouchPanelEvent:
    159          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    160            int done = 0;
   \   000004   7800         MOV     R0,#0x0
    161            //LED1
    162            if( zcl_interruptNo & 1 ) {
   \   000006   90....       MOV     DPTR,#zcl_interruptNo
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000C   502C         JNC     ??zclTouchPanelEvent_0
    163              if (P0_0 == 0) {
   \   00000E   A280         MOV     C,0x80.0
   \   000010   4026         JC      ??zclTouchPanelEvent_1
    164                if (zclOnOffLight0_OnOff == LIGHT_ON) {
   \   000012   90....       MOV     DPTR,#zclOnOffLight0_OnOff
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6401         XRL     A,#0x1
   \   000018   7006         JNZ     ??zclTouchPanelEvent_2
    165                  zclOnOffLight0_OnOff = LIGHT_OFF;
   \   00001A   E4           CLR     A
   \   00001B   F0           MOVX    @DPTR,A
    166                  LIGHT_TURN_OFF_LIGHT0();
   \   00001C   C282         CLR     0x80.2
   \   00001E   8005         SJMP    ??zclTouchPanelEvent_3
    167                } else {
    168                  zclOnOffLight0_OnOff = LIGHT_ON;
   \                     ??zclTouchPanelEvent_2:
   \   000020   7401         MOV     A,#0x1
   \   000022   F0           MOVX    @DPTR,A
    169                  LIGHT_TURN_ON_LIGHT0();
   \   000023   D282         SETB    0x80.2
    170                }
    171                if(zclDevice_NwkState == DEV_ROUTER)
   \                     ??zclTouchPanelEvent_3:
   \   000025   90....       MOV     DPTR,#zclDevice_NwkState
   \   000028   E0           MOVX    A,@DPTR
   \   000029   6407         XRL     A,#0x7
   \   00002B   700B         JNZ     ??zclTouchPanelEvent_1
    172                zclLightReportEvent(ONOFFLIGHT0_ENDPOINT, &zclOnOffLight0_OnOff); 
   \   00002D                ; Setup parameters for call to function zclLightReportEvent
   \   00002D   7C..         MOV     R4,#zclOnOffLight0_OnOff & 0xff
   \   00002F   7D..         MOV     R5,#(zclOnOffLight0_OnOff >> 8) & 0xff
   \   000031   7A10         MOV     R2,#0x10
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   ??zclLightReportEvent?relay
    173                //done = 1;
    174              }
    175              done = 1;
   \                     ??zclTouchPanelEvent_1:
   \   000038   7801         MOV     R0,#0x1
    176            }
    177            //LED2
    178            if( zcl_interruptNo & 0x04 ) {
   \                     ??zclTouchPanelEvent_0:
   \   00003A   90....       MOV     DPTR,#zcl_interruptNo
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   A2E2         MOV     C,0xE0 /* A   */.2
   \   000040   502C         JNC     ??zclTouchPanelEvent_4
    179              if (P0_1 == 0) {
   \   000042   A281         MOV     C,0x80.1
   \   000044   4026         JC      ??zclTouchPanelEvent_5
    180                if (zclOnOffLight1_OnOff == LIGHT_ON) {
   \   000046   90....       MOV     DPTR,#zclOnOffLight1_OnOff
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   6401         XRL     A,#0x1
   \   00004C   7006         JNZ     ??zclTouchPanelEvent_6
    181                  zclOnOffLight1_OnOff = LIGHT_OFF;
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
    182                  LIGHT_TURN_OFF_LIGHT1();
   \   000050   C283         CLR     0x80.3
   \   000052   8005         SJMP    ??zclTouchPanelEvent_7
    183                } else {
    184                  zclOnOffLight1_OnOff = LIGHT_ON;
   \                     ??zclTouchPanelEvent_6:
   \   000054   7401         MOV     A,#0x1
   \   000056   F0           MOVX    @DPTR,A
    185                  LIGHT_TURN_ON_LIGHT1();
   \   000057   D283         SETB    0x80.3
    186                }  
    187                if(zclDevice_NwkState == DEV_ROUTER)
   \                     ??zclTouchPanelEvent_7:
   \   000059   90....       MOV     DPTR,#zclDevice_NwkState
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   6407         XRL     A,#0x7
   \   00005F   700B         JNZ     ??zclTouchPanelEvent_5
    188                zclLightReportEvent(ONOFFLIGHT1_ENDPOINT, &zclOnOffLight1_OnOff);
   \   000061                ; Setup parameters for call to function zclLightReportEvent
   \   000061   7C..         MOV     R4,#zclOnOffLight1_OnOff & 0xff
   \   000063   7D..         MOV     R5,#(zclOnOffLight1_OnOff >> 8) & 0xff
   \   000065   7A11         MOV     R2,#0x11
   \   000067   7B00         MOV     R3,#0x0
   \   000069   12....       LCALL   ??zclLightReportEvent?relay
    189                //done = 1;
    190              }
    191              done = 1;
   \                     ??zclTouchPanelEvent_5:
   \   00006C   7801         MOV     R0,#0x1
    192            }  
    193            
    194            //LED3
    195            if( zcl_interruptNo & 0x08 ) {
   \                     ??zclTouchPanelEvent_4:
   \   00006E   90....       MOV     DPTR,#zcl_interruptNo
   \   000071   E0           MOVX    A,@DPTR
   \   000072   A2E3         MOV     C,0xE0 /* A   */.3
   \   000074   502C         JNC     ??zclTouchPanelEvent_8
    196              if (P1_2 == 0) {
   \   000076   A292         MOV     C,0x90.2
   \   000078   4026         JC      ??zclTouchPanelEvent_9
    197                if (zclOnOffLight3_OnOff == LIGHT_ON) {
   \   00007A   90....       MOV     DPTR,#zclOnOffLight3_OnOff
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   6401         XRL     A,#0x1
   \   000080   7006         JNZ     ??zclTouchPanelEvent_10
    198                  zclOnOffLight3_OnOff = LIGHT_OFF;
   \   000082   E4           CLR     A
   \   000083   F0           MOVX    @DPTR,A
    199                  LIGHT_TURN_OFF_LIGHT3();
   \   000084   C286         CLR     0x80.6
   \   000086   8005         SJMP    ??zclTouchPanelEvent_11
    200                } else {
    201                  zclOnOffLight3_OnOff = LIGHT_ON;
   \                     ??zclTouchPanelEvent_10:
   \   000088   7401         MOV     A,#0x1
   \   00008A   F0           MOVX    @DPTR,A
    202                  LIGHT_TURN_ON_LIGHT3();
   \   00008B   D286         SETB    0x80.6
    203                }
    204                if(zclDevice_NwkState == DEV_ROUTER)
   \                     ??zclTouchPanelEvent_11:
   \   00008D   90....       MOV     DPTR,#zclDevice_NwkState
   \   000090   E0           MOVX    A,@DPTR
   \   000091   6407         XRL     A,#0x7
   \   000093   700B         JNZ     ??zclTouchPanelEvent_9
    205                zclLightReportEvent(ONOFFLIGHT3_ENDPOINT, &zclOnOffLight3_OnOff);
   \   000095                ; Setup parameters for call to function zclLightReportEvent
   \   000095   7C..         MOV     R4,#zclOnOffLight3_OnOff & 0xff
   \   000097   7D..         MOV     R5,#(zclOnOffLight3_OnOff >> 8) & 0xff
   \   000099   7A13         MOV     R2,#0x13
   \   00009B   7B00         MOV     R3,#0x0
   \   00009D   12....       LCALL   ??zclLightReportEvent?relay
    206                //done = 1;
    207              }
    208              done = 1;
   \                     ??zclTouchPanelEvent_9:
   \   0000A0   7801         MOV     R0,#0x1
    209            }    
    210            // LED4
    211            if( zcl_interruptNo & 0x10 ) {
   \                     ??zclTouchPanelEvent_8:
   \   0000A2   90....       MOV     DPTR,#zcl_interruptNo
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   A2E4         MOV     C,0xE0 /* A   */.4
   \   0000A8   502C         JNC     ??zclTouchPanelEvent_12
    212              if (P1_0 == 0) {
   \   0000AA   A290         MOV     C,0x90.0
   \   0000AC   4026         JC      ??zclTouchPanelEvent_13
    213                if (zclOnOffLight2_OnOff == LIGHT_ON) {
   \   0000AE   90....       MOV     DPTR,#zclOnOffLight2_OnOff
   \   0000B1   E0           MOVX    A,@DPTR
   \   0000B2   6401         XRL     A,#0x1
   \   0000B4   7006         JNZ     ??zclTouchPanelEvent_14
    214                  zclOnOffLight2_OnOff = LIGHT_OFF;
   \   0000B6   E4           CLR     A
   \   0000B7   F0           MOVX    @DPTR,A
    215                  LIGHT_TURN_OFF_LIGHT2();
   \   0000B8   C284         CLR     0x80.4
   \   0000BA   8005         SJMP    ??zclTouchPanelEvent_15
    216                } else {
    217                  zclOnOffLight2_OnOff = LIGHT_ON;
   \                     ??zclTouchPanelEvent_14:
   \   0000BC   7401         MOV     A,#0x1
   \   0000BE   F0           MOVX    @DPTR,A
    218                  LIGHT_TURN_ON_LIGHT2();
   \   0000BF   D284         SETB    0x80.4
    219                }
    220                
    221                if(zclDevice_NwkState == DEV_ROUTER)
   \                     ??zclTouchPanelEvent_15:
   \   0000C1   90....       MOV     DPTR,#zclDevice_NwkState
   \   0000C4   E0           MOVX    A,@DPTR
   \   0000C5   6407         XRL     A,#0x7
   \   0000C7   700B         JNZ     ??zclTouchPanelEvent_13
    222                zclLightReportEvent(ONOFFLIGHT2_ENDPOINT, &zclOnOffLight2_OnOff);
   \   0000C9                ; Setup parameters for call to function zclLightReportEvent
   \   0000C9   7C..         MOV     R4,#zclOnOffLight2_OnOff & 0xff
   \   0000CB   7D..         MOV     R5,#(zclOnOffLight2_OnOff >> 8) & 0xff
   \   0000CD   7A12         MOV     R2,#0x12
   \   0000CF   7B00         MOV     R3,#0x0
   \   0000D1   12....       LCALL   ??zclLightReportEvent?relay
    223                //done = 1;
    224              }
    225              done = 1;
   \                     ??zclTouchPanelEvent_13:
   \   0000D4   7801         MOV     R0,#0x1
    226            }  
    227            
    228            zcl_interruptNo = 0;
   \                     ??zclTouchPanelEvent_12:
   \   0000D6   90....       MOV     DPTR,#zcl_interruptNo
   \   0000D9   E4           CLR     A
   \   0000DA   F0           MOVX    @DPTR,A
    229            if(done)
   \   0000DB   E8           MOV     A,R0
   \   0000DC   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000DE   5009         JNC     ??CrossCallReturnLabel_5
    230            {
    231              osal_start_timerEx(zclOnOffLight_TaskID, 
    232                                 ZCL_DEVICE_RESTORE_INTERRUPT_EVENT,
    233                                 80);
   \   0000E0                ; Setup parameters for call to function osal_start_timerEx
   \   0000E0   7C50         MOV     R4,#0x50
   \   0000E2   7D00         MOV     R5,#0x0
   \   0000E4   7A20         MOV     R2,#0x20
   \   0000E6   12....       LCALL   ?Subroutine3 & 0xFFFF
    234            }
    235          }
   \                     ??CrossCallReturnLabel_5:
   \   0000E9   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0000EC                REQUIRE _A_P0
   \   0000EC                REQUIRE _A_P1
    236          /*********************************************************************
    237           * @fn      zclRestoreInterruptEvent
    238           *
    239           * @brief   ø™÷–∂œ
    240           *          
    241           * @param   none
    242           *
    243           * @return  none
    244           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    245          void zclRestoreInterruptEvent(void)
   \                     zclRestoreInterruptEvent:
    246          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    247            
    248            P0IFG =0;         //√ø¥Œ÷–∂œ÷Æ∫Û∂º“™÷ÿ–¬‘ –Ì÷–∂œ
   \   000000   758900       MOV     0x89,#0x0
    249            P0IF = 0;
   \   000003   C2C5         CLR     0xc0.5
    250            P1IFG =0;         //√ø¥Œ÷–∂œ÷Æ∫Û∂º“™÷ÿ–¬‘ –Ì÷–∂œ
   \   000005   758A00       MOV     0x8a,#0x0
    251            P1IF = 0;
   \   000008   C2EB         CLR     0xe8.3
    252            P0IEN |= BV(0);
   \   00000A   43AB01       ORL     0xab,#0x1
    253            P0IEN |= BV(1);
   \   00000D   43AB02       ORL     0xab,#0x2
    254            P0IEN |= BV(7);
   \   000010   43AB80       ORL     0xab,#0x80
    255            P1IEN |= BV(0);
   \   000013   438D01       ORL     0x8d,#0x1
    256            P1IEN |= BV(2);
   \   000016   438D04       ORL     0x8d,#0x4
    257          }
   \   000019   02....       LJMP    ?BRET
   \   00001C                REQUIRE P0IFG
   \   00001C                REQUIRE _A_IRCON
   \   00001C                REQUIRE P1IFG
   \   00001C                REQUIRE _A_IRCON2
   \   00001C                REQUIRE P0IEN
   \   00001C                REQUIRE P1IEN
    258          /*********************************************************************
    259           * @fn      zclFactoryResetEvent
    260           *
    261           * @brief   ≥§∞¥<6s÷∏ æµ∆≥£¡¡À…ø™÷ÿ∆Ù£¨≥§∞¥>=6s∏¥Œª÷∏ æµ∆øÏ…¡
    262           *          
    263           * @param   none
    264           *
    265           * @return  none
    266           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    267          void zclFactoryResetEvent(void)
   \                     zclFactoryResetEvent:
    268          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    269            if( P0_7 == 0 ){
   \   000005   A287         MOV     C,0x80.7
   \   000007   90....       MOV     DPTR,#zcl_factoryReset
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   4062         JC      ??zclFactoryResetEvent_0
    270              if (zcl_factoryReset >= ZCL_FACTORY_RESET_TIMECOUNT) 
   \   00000D   C3           CLR     C
   \   00000E   9414         SUBB    A,#0x14
   \   000010   4045         JC      ??zclFactoryResetEvent_1
    271              {
    272                if(zcl_Led_Blink == 0)
   \   000012   90....       MOV     DPTR,#zcl_Led_Blink
   \   000015   E0           MOVX    A,@DPTR
   \   000016   6003         JZ      $+5
   \   000018   02....       LJMP    ??CrossCallReturnLabel_7 & 0xFFFF
    273                {
    274                  
    275                  ReJoinNetFlagInFlash[0] = 0x01;//±Ì æ…Ë±∏∏¥Œª÷ÿ∆Ù
   \   00001B   90....       MOV     DPTR,#ReJoinNetFlagInFlash
   \   00001E   7401         MOV     A,#0x1
   \   000020   F0           MOVX    @DPTR,A
    276                  osal_nv_write(ZDAPP_NV_SYSTEM_RESTART_FLAG,0,sizeof(ReJoinNetFlagInFlash),ReJoinNetFlagInFlash);
   \   000021                ; Setup parameters for call to function osal_nv_write
   \   000021   75....       MOV     ?V0 + 0,#ReJoinNetFlagInFlash & 0xff
   \   000024   75....       MOV     ?V0 + 1,#(ReJoinNetFlagInFlash >> 8) & 0xff
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   75..01       MOV     ?V0 + 0,#0x1
   \   00002F   75..00       MOV     ?V0 + 1,#0x0
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   7C00         MOV     R4,#0x0
   \   000039   7D00         MOV     R5,#0x0
   \   00003B   7A01         MOV     R2,#0x1
   \   00003D   7B04         MOV     R3,#0x4
   \   00003F   12....       LCALL   ??osal_nv_write?relay
   \   000042   7404         MOV     A,#0x4
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
    277                  osal_start_timerEx(zclOnOffLight_TaskID, 
    278                                     ZCL_DEVICE_SOFT_RESTART_EVENT,
    279                                     ZCL_FACTORY_RESET_HINT);
   \   000047                ; Setup parameters for call to function osal_start_timerEx
   \   000047   7CC8         MOV     R4,#-0x38
   \   000049   7D00         MOV     R5,#0x0
   \   00004B   7A40         MOV     R2,#0x40
   \   00004D   12....       LCALL   ?Subroutine3 & 0xFFFF
    280                  zcl_factoryReset=0;
   \                     ??CrossCallReturnLabel_6:
   \   000050   90....       MOV     DPTR,#zcl_factoryReset
   \   000053   E4           CLR     A
   \   000054   F0           MOVX    @DPTR,A
   \   000055   8049         SJMP    ??CrossCallReturnLabel_7
    281                }
    282              }else{
    283                LED_RED_ON();
   \                     ??zclFactoryResetEvent_1:
   \   000057   D285         SETB    0x80.5
    284                ledcontrol = 1;
   \   000059   90....       MOV     DPTR,#ledcontrol
   \   00005C   7401         MOV     A,#0x1
   \   00005E   F0           MOVX    @DPTR,A
    285                zcl_factoryReset++;
   \   00005F   90....       MOV     DPTR,#zcl_factoryReset
   \   000062   E0           MOVX    A,@DPTR
   \   000063   04           INC     A
   \   000064   F0           MOVX    @DPTR,A
    286                osal_start_timerEx(zclOnOffLight_TaskID, 
    287                                   ZCL_DEVICE_RESET_EVENT,
    288                                   300);
   \   000065                ; Setup parameters for call to function osal_start_timerEx
   \   000065   7C2C         MOV     R4,#0x2c
   \   000067   7D01         MOV     R5,#0x1
   \   000069   7A00         MOV     R2,#0x0
   \   00006B   7B04         MOV     R3,#0x4
   \   00006D   802E         SJMP    ??zclFactoryResetEvent_2
    289              }
    290            }
    291            else
    292            {
    293              if(( zcl_factoryReset < 20) && ( P0_7 == 1 )){
   \                     ??zclFactoryResetEvent_0:
   \   00006F   C3           CLR     C
   \   000070   9414         SUBB    A,#0x14
   \   000072   500E         JNC     ??zclFactoryResetEvent_3
   \   000074   A287         MOV     C,0x80.7
   \   000076   500A         JNC     ??zclFactoryResetEvent_3
    294                LED_RED_OFF();
   \   000078   C285         CLR     0x80.5
    295                P0IEN |= BV(7);
   \   00007A   43AB80       ORL     0xab,#0x80
    296                zcl_factoryReset=0;
   \   00007D   E4           CLR     A
   \   00007E   F0           MOVX    @DPTR,A
    297                SystemResetSoft();
   \   00007F                ; Setup parameters for call to function Onboard_soft_reset
   \   00007F   12....       LCALL   Onboard_soft_reset & 0xFFFF
    298              }
    299              LED_RED_OFF();
   \                     ??zclFactoryResetEvent_3:
   \   000082   C285         CLR     0x80.5
    300              P0IEN |= BV(7);
   \   000084   43AB80       ORL     0xab,#0x80
    301              zcl_factoryReset = 0;    		
   \   000087   E4           CLR     A
   \   000088   F0           MOVX    @DPTR,A
    302              if (zclDevice_NwkState != DEV_ROUTER ){
   \   000089   90....       MOV     DPTR,#zclDevice_NwkState
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   6407         XRL     A,#0x7
   \   00008F   600F         JZ      ??CrossCallReturnLabel_7
    303                ledcontrol=0;
   \   000091   90....       MOV     DPTR,#ledcontrol
   \   000094   E4           CLR     A
   \   000095   F0           MOVX    @DPTR,A
    304                osal_start_timerEx(zclOnOffLight_TaskID, 
    305                                   ZCL_DEVICE_EXIT_NETWORK_EVENT,
    306                                   2000);
   \   000096                ; Setup parameters for call to function osal_start_timerEx
   \   000096   7CD0         MOV     R4,#-0x30
   \   000098   7D07         MOV     R5,#0x7
   \   00009A   FA           MOV     R2,A
   \   00009B   7B10         MOV     R3,#0x10
    307              }
    308            }
   \                     ??zclFactoryResetEvent_2:
   \   00009D   12....       LCALL   ??Subroutine6_0 & 0xFFFF
    309          }
   \                     ??CrossCallReturnLabel_7:
   \   0000A0   7F02         MOV     R7,#0x2
   \   0000A2   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000A5                REQUIRE _A_P0
   \   0000A5                REQUIRE P0IEN
    310          //÷–∂œ,À˘”–Õ‚≤ø÷–∂œ»Îø⁄

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    311          HAL_ISR_FUNCTION(zclLightControlPort0Isr, P0INT_VECTOR)
   \                     zclLightControlPort0Isr:
    312          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 15
   \   000007                ; Auto size: 0
    313            HAL_ENTER_ISR();
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   33           RLC     A
   \   00000B   FE           MOV     R6,A
   \   00000C   D2AF         SETB    0xa8.7
    314            zcl_interruptNo=0;
   \   00000E   90....       MOV     DPTR,#zcl_interruptNo
   \   000011   E4           CLR     A
   \   000012   F0           MOVX    @DPTR,A
    315            if (P0IFG & 0x01) {     //≈–∂œœ‡”¶π‹Ω≈µƒ÷–∂œ±Í÷æŒª
   \   000013   E589         MOV     A,0x89
   \   000015   A2E0         MOV     C,0xE0 /* A   */.0
   \   000017   5006         JNC     ??zclLightControlPort0Isr_0
    316              zcl_interruptNo |= 1;
   \   000019   7401         MOV     A,#0x1
   \   00001B   F0           MOVX    @DPTR,A
    317              P0IEN &= ~BV(0);
   \   00001C   53ABFE       ANL     0xab,#0xfe
    318            }
    319            if (P0IFG & 0x02) {
   \                     ??zclLightControlPort0Isr_0:
   \   00001F   E589         MOV     A,0x89
   \   000021   A2E1         MOV     C,0xE0 /* A   */.1
   \   000023   5007         JNC     ??zclLightControlPort0Isr_1
    320              P0IEN &= ~BV(1);
   \   000025   53ABFD       ANL     0xab,#0xfd
    321              zcl_interruptNo |= BV(2);
   \   000028   E0           MOVX    A,@DPTR
   \   000029   D2E2         SETB    0xE0 /* A   */.2
   \   00002B   F0           MOVX    @DPTR,A
    322            }
    323            if (P0IFG & 0x80) {
   \                     ??zclLightControlPort0Isr_1:
   \   00002C   E589         MOV     A,0x89
   \   00002E   A2E7         MOV     C,0xE0 /* A   */.7
   \   000030   5014         JNC     ??CrossCallReturnLabel_10
    324              if(zcl_interruptNo == 0)
   \   000032   E0           MOVX    A,@DPTR
   \   000033   7011         JNZ     ??CrossCallReturnLabel_10
    325              {
    326                P0IEN &= ~BV(7);
   \   000035   53AB7F       ANL     0xab,#0x7f
    327                zcl_factoryReset = 0;
   \   000038   90....       MOV     DPTR,#zcl_factoryReset
   \   00003B   E4           CLR     A
   \   00003C   F0           MOVX    @DPTR,A
    328                osal_start_timerEx(zclOnOffLight_TaskID, 
    329                                   ZCL_DEVICE_RESET_1_EVENT,
    330                                   100);
   \   00003D                ; Setup parameters for call to function osal_start_timerEx
   \   00003D   7C64         MOV     R4,#0x64
   \   00003F   FD           MOV     R5,A
   \   000040   FA           MOV     R2,A
   \   000041   7B08         MOV     R3,#0x8
   \   000043   12....       LCALL   ??Subroutine7_0
    331              }
    332            }
    333            
    334            if( zcl_interruptNo ) {
   \                     ??CrossCallReturnLabel_10:
   \   000046   90....       MOV     DPTR,#zcl_interruptNo
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   6003         JZ      ??CrossCallReturnLabel_8
    335              osal_start_timerEx(zclOnOffLight_TaskID, 
    336                                 ZCL_DEVICE_TOUCHPANEL_EVENT,
    337                                 100);
   \   00004C                ; Setup parameters for call to function osal_start_timerEx
   \   00004C   12....       LCALL   ?Subroutine5
    338            }
    339            
    340            P0IFG = 0;
   \                     ??CrossCallReturnLabel_8:
   \   00004F   758900       MOV     0x89,#0x0
    341            P0IF = 0;
   \   000052   C2C5         CLR     0xc0.5
    342            CLEAR_SLEEP_MODE();
    343            HAL_EXIT_ISR();
   \   000054                REQUIRE ?Subroutine1
   \   000054                REQUIRE _A_IEN0
   \   000054                REQUIRE P0IFG
   \   000054                REQUIRE P0IEN
   \   000054                REQUIRE _A_IRCON
   \   000054                ; // Fall through to label ?Subroutine1
    344          }

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EE           MOV     A,R6
   \   000001   A2E0         MOV     C,0xE0 /* A   */.0
   \   000003   92AF         MOV     0xa8.7,C
   \   000005   7F01         MOV     R7,#0x1
   \   000007   02....       LJMP    ?INTERRUPT_LEAVE_XSP

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7C64         MOV     R4,#0x64
   \   000002   7D00         MOV     R5,#0x0
   \   000004   7A10         MOV     R2,#0x10
   \   000006   7B00         MOV     R3,#0x0
   \   000008                REQUIRE ??Subroutine7_0
   \   000008                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   90....       MOV     DPTR,#zclOnOffLight_TaskID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   12....       LCALL   ??osal_start_timerEx?relay
   \   000008   22           RET
    345          

   \                                 In  segment NEAR_CODE, align 1, keep-with-next
    346          HAL_ISR_FUNCTION(zclLightControlPort1Isr, P1INT_VECTOR)
   \                     zclLightControlPort1Isr:
    347          {
   \   000000   C0E0         PUSH    A
   \   000002   74F2         MOV     A,#-0xe
   \   000004   12....       LCALL   ?INTERRUPT_ENTER_XSP
   \   000007                ; Saved register size: 15
   \   000007                ; Auto size: 0
    348            HAL_ENTER_ISR();
   \   000007   A2AF         MOV     C,0xa8.7
   \   000009   E4           CLR     A
   \   00000A   33           RLC     A
   \   00000B   FE           MOV     R6,A
   \   00000C   D2AF         SETB    0xa8.7
    349            
    350            if (P1IFG & 0x01) {
   \   00000E   E58A         MOV     A,0x8a
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   500A         JNC     ??zclLightControlPort1Isr_0
    351              P1IEN &= ~BV(0);
   \   000014   538DFE       ANL     0x8d,#0xfe
    352              zcl_interruptNo |= BV(4);
   \   000017   90....       MOV     DPTR,#zcl_interruptNo
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   D2E4         SETB    0xE0 /* A   */.4
   \   00001D   F0           MOVX    @DPTR,A
    353            }
    354            if (P1IFG & 0x04) {
   \                     ??zclLightControlPort1Isr_0:
   \   00001E   E58A         MOV     A,0x8a
   \   000020   A2E2         MOV     C,0xE0 /* A   */.2
   \   000022   500A         JNC     ??zclLightControlPort1Isr_1
    355              P1IEN &= ~BV(2);
   \   000024   538DFB       ANL     0x8d,#0xfb
    356              zcl_interruptNo |= BV(3);
   \   000027   90....       MOV     DPTR,#zcl_interruptNo
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   D2E3         SETB    0xE0 /* A   */.3
   \   00002D   F0           MOVX    @DPTR,A
    357            }
    358            
    359            if( zcl_interruptNo ) {
   \                     ??zclLightControlPort1Isr_1:
   \   00002E   90....       MOV     DPTR,#zcl_interruptNo
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6003         JZ      ??CrossCallReturnLabel_9
    360              osal_start_timerEx(zclOnOffLight_TaskID, 
    361                                 ZCL_DEVICE_TOUCHPANEL_EVENT,
    362                                 100);
   \   000034                ; Setup parameters for call to function osal_start_timerEx
   \   000034   12....       LCALL   ?Subroutine5
    363            }
    364             
    365            P1IFG = 0;
   \                     ??CrossCallReturnLabel_9:
   \   000037   758A00       MOV     0x8a,#0x0
    366            P1IF = 0;
   \   00003A   C2EB         CLR     0xe8.3
    367            CLEAR_SLEEP_MODE();
    368            HAL_EXIT_ISR();
   \   00003C   80..         SJMP    ?Subroutine1
   \   00003E                REQUIRE _A_IEN0
   \   00003E                REQUIRE P1IFG
   \   00003E                REQUIRE P1IEN
   \   00003E                REQUIRE _A_IRCON2
    369          }

   \                                 In  segment INTVEC, offset 0x6b, root
   \                     `??zclLightControlPort0Isr??INTVEC 107`:
   \   00006B   02....       LJMP       (zclLightControlPort0Isr)

   \                                 In  segment INTVEC, offset 0x7b, root
   \                     `??zclLightControlPort1Isr??INTVEC 123`:
   \   00007B   02....       LJMP       (zclLightControlPort1Isr)

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLightControlInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLightControlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLightControlTouchPanelEnable?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLightControlTouchPanelEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLightReportEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLightReportEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclTouchPanelEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclTouchPanelEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclRestoreInterruptEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclRestoreInterruptEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclFactoryResetEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclFactoryResetEvent

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     zclFactoryResetEvent               0      0     14
       -> osal_nv_write                 0      0     28
       -> osal_start_timerEx            0      0     20
       -> osal_start_timerEx            0      0     20
       -> Onboard_soft_reset            0      0     20
       -> osal_start_timerEx            0      0     20
     zclLightControlInit                2      0      0
       -> osal_start_timerEx            4      0      0
     zclLightControlPort0Isr           15      0      0
       -> osal_start_timerEx           30      0      0
       -> osal_start_timerEx           30      0      0
     zclLightControlPort1Isr           15      0      0
       -> osal_start_timerEx           30      0      0
     zclLightControlTouchPanelEnable
                                        0      0      0
     zclLightReportEvent                0      0     19
       -> osal_mem_alloc                0      0     28
       -> zcl_SendReportCmd             0      0     38
       -> zcl_SendReportCmd             0      0     38
       -> osal_mem_free                 0      0     28
     zclRestoreInterruptEvent           0      0      0
     zclTouchPanelEvent                 2      0      0
       -> zclLightReportEvent           4      0      0
       -> zclLightReportEvent           4      0      0
       -> zclLightReportEvent           4      0      0
       -> zclLightReportEvent           4      0      0
       -> osal_start_timerEx            4      0      0


   Segment part sizes:

     Function/Label                          Bytes
     --------------                          -----
     _A_P0                                      1
     P0IFG                                      1
     P1IFG                                      1
     PICTL                                      1
     P1IEN                                      1
     P0INP                                      1
     _A_P1                                      1
     IEN2                                       1
     _A_IEN0                                    1
     P0IEN                                      1
     _A_IEN1                                    1
     _A_IRCON                                   1
     _A_IRCON2                                  1
     P0SEL                                      1
     P1SEL                                      1
     P1INP                                      1
     P2INP                                      1
     P0DIR                                      1
     P1DIR                                      1
     zcl_Coord_nwkAddr                         12
     zcl_SeqNum                                 1
     zcl_interruptNo                            1
     zcl_factoryReset                           1
     zclLightControlInit                       72
     ?Subroutine0                               7
     ?Subroutine3                               2
     ??Subroutine6_0                            9
     zclLightControlTouchPanelEnable
                                               87
     retstatus                                  1
     zclLightReportEvent                      153
     ?Subroutine4                               9
     ?Subroutine2                              15
     zclTouchPanelEvent                       236
     zclRestoreInterruptEvent                  28
     zclFactoryResetEvent                     165
     zclLightControlPort0Isr                   84
     ?Subroutine1                              10
     ?Subroutine5                               8
     ??Subroutine7_0                            9
     zclLightControlPort1Isr                   62
     ??zclLightControlPort0Isr??INTVEC 107      3
     ??zclLightControlPort1Isr??INTVEC 123      3
     ??zclLightControlInit?relay                6
     ??zclLightControlTouchPanelEnable?relay    6
     ??zclLightReportEvent?relay                6
     ??zclTouchPanelEvent?relay                 6
     ??zclRestoreInterruptEvent?relay           6
     ??zclFactoryResetEvent?relay               6

 
 783 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
   6 bytes in segment INTVEC
 173 bytes in segment NEAR_CODE
  19 bytes in segment SFR_AN
  16 bytes in segment XDATA_Z
 
 992 bytes of CODE  memory (+  6 bytes shared)
   0 bytes of DATA  memory (+ 19 bytes shared)
  16 bytes of XDATA memory

Errors: none
Warnings: none
