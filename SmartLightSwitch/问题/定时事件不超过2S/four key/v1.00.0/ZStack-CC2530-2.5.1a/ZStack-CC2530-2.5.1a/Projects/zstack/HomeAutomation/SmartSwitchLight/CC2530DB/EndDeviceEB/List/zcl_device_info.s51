///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        10/Nov/2015  10:33:08 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\ZigBee Project\smartSwitch-light\v1.03.1\ZStac /
//                          k-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects\zst /
//                          ack\HomeAutomation\SmartSwitchLight\Source\zcl_de /
//                          vice_info.c                                       /
//    Command line       =  -f "F:\ZigBee Project\smartSwitch-light\v1.03.1\Z /
//                          Stack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects /
//                          \zstack\HomeAutomation\SmartSwitchLight\CC2530DB\ /
//                          ..\Tools\CC2530DB\f8wEndev.cfg" (-DCPU32MHZ       /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3             /
//                          -DHAL_PA_LNA -DHAL_KEY=FALSE -DHAL_LED=FALSE      /
//                          -DHAL_LCD=FALSE -DHAL_ADC=FALSE -DNV_RESTORE      /
//                          -DNV_INIT) -f "F:\ZigBee                          /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\Tools\CC253 /
//                          0DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=0        /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=0           /
//                          -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0       /
//                          -DREJOIN_POLL_RATE=440) -f "F:\ZigBee             /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\Tools\CC253 /
//                          0DB\f8wZCL.cfg" (-DZCL_READ -DZCL_WRITE           /
//                          -DZCL_REPORT -DZCL_BASIC -DZCL_IDENTIFY           /
//                          -DZCL_ON_OFF -DZCL_KEY_ESTABLISH                  /
//                          -DZCL_KEY_ESTABLISHMENT_KEY_GENERATE_TIMEOUT=4    /
//                          -DZCL_KEY_ESTABLISHMENT_MAC_GENERATE_TIMEOUT=10   /
//                          -DZCL_KEY_ESTABLISHMENT_EKEY_GENERATE_TIMEOUT=10  /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING -DZCL_MESSAGE -DZCL_TUNNELING       /
//                          -DZCL_TOU) -DZCL_DEVICE_MGMT "F:\ZigBee           /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\Source\zcl_device_info. /
//                          c" -lC "F:\ZigBee Project\smartSwitch-light\v1.03 /
//                          .1\ZStack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Proj /
//                          ects\zstack\HomeAutomation\SmartSwitchLight\CC253 /
//                          0DB\EndDeviceEB\List\" -lA "F:\ZigBee             /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\EndDeviceEB\Li /
//                          st\" --diag_suppress Pe001,Pa010 -o "F:\ZigBee    /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\EndDeviceEB\Ob /
//                          j\" -e --debug --core=plain --dptr=16,1           /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I "F:\ZigBee Project\smartSwitch-light\v1.03.1\Z /
//                          Stack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects /
//                          \zstack\HomeAutomation\SmartSwitchLight\CC2530DB\ /
//                          " -I "F:\ZigBee Project\smartSwitch-light\v1.03.1 /
//                          \ZStack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projec /
//                          ts\zstack\HomeAutomation\SmartSwitchLight\CC2530D /
//                          B\..\Source\" -I "F:\ZigBee                       /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\Source\" /
//                           -I "F:\ZigBee Project\smartSwitch-light\v1.03.1\ /
//                          ZStack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Project /
//                          s\zstack\HomeAutomation\SmartSwitchLight\CC2530DB /
//                          \..\..\..\ZMain\TI2530DB\" -I "F:\ZigBee          /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\include\" -I "F:\ZigBee           /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\hal\target\CC2530EB\" -I "F:\ZigBee   /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\include\" -I "F:\ZigBee           /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\high_level\" -I "F:\ZigBee        /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\low_level\srf04\" -I "F:\ZigBee   /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\mac\low_level\srf04\single_chip\" -I  /
//                          "F:\ZigBee Project\smartSwitch-light\v1.03.1\ZSta /
//                          ck-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects\zs /
//                          tack\HomeAutomation\SmartSwitchLight\CC2530DB\..\ /
//                          ..\..\..\..\Components\mt\" -I "F:\ZigBee         /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\osal\include\" -I "F:\ZigBee          /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\services\saddr\" -I "F:\ZigBee        /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\services\sdata\" -I "F:\ZigBee        /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\af\" -I "F:\ZigBee              /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\nwk\" -I "F:\ZigBee             /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sapi\" -I "F:\ZigBee            /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sec\" -I "F:\ZigBee             /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\sys\" -I "F:\ZigBee             /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\zcl\" -I "F:\ZigBee             /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\stack\zdo\" -I "F:\ZigBee             /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\zmac\" -I "F:\ZigBee                  /
//                          Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2 /
//                          .5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAu /
//                          tomation\SmartSwitchLight\CC2530DB\..\..\..\..\.. /
//                          \Components\zmac\f8w\" -Oh --require_prototypes   /
//    List file          =  F:\ZigBee Project\smartSwitch-light\v1.03.1\ZStac /
//                          k-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects\zst /
//                          ack\HomeAutomation\SmartSwitchLight\CC2530DB\EndD /
//                          eviceEB\List\zcl_device_info.s51                  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_device_info

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??zclActiveEPRsp?relay,0203H
        PUBLIC ??zclDeviceInfoInit?relay
        FUNCTION ??zclDeviceInfoInit?relay,0203H
        PUBLIC ??zclFactoryReset?relay
        FUNCTION ??zclFactoryReset?relay,0203H
        PUBLIC ??zclSendDeviceInfo?relay
        FUNCTION ??zclSendDeviceInfo?relay,0203H
        PUBLIC ??zclSendHeartbeat?relay
        FUNCTION ??zclSendHeartbeat?relay,0203H
        FUNCTION zclActiveEPRsp,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 90, STACK
        PUBLIC zclDeviceInfoInit
        FUNCTION zclDeviceInfoInit,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclFactoryReset
        FUNCTION zclFactoryReset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclIASZoneMotionIR_Coord_nwkAddr
        PUBLIC zclSendDeviceInfo
        FUNCTION zclSendDeviceInfo,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zclSendHeartbeat
        FUNCTION zclSendHeartbeat,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afNumEndPoints      SYMBOL "afNumEndPoints"
afEndPoints         SYMBOL "afEndPoints"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
ZDP_EPRsp           SYMBOL "ZDP_EPRsp"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_msg_allocate   SYMBOL "osal_msg_allocate"
ZDO_ProcessSimpleDescReq SYMBOL "ZDO_ProcessSimpleDescReq"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
zgWriteStartupOptions SYMBOL "zgWriteStartupOptions"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??ZDO_ProcessSimpleDescReq?relay SYMBOL "?relay", ZDO_ProcessSimpleDescReq
??ZDP_EPRsp?relay   SYMBOL "?relay", ZDP_EPRsp
??afEndPoints?relay SYMBOL "?relay", afEndPoints
??afNumEndPoints?relay SYMBOL "?relay", afNumEndPoints
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??zgWriteStartupOptions?relay SYMBOL "?relay", zgWriteStartupOptions
zclDeviceInfoInit   SYMBOL "zclDeviceInfoInit"
??zclDeviceInfoInit?relay SYMBOL "?relay", zclDeviceInfoInit
zclFactoryReset     SYMBOL "zclFactoryReset"
??zclFactoryReset?relay SYMBOL "?relay", zclFactoryReset
zclSendDeviceInfo   SYMBOL "zclSendDeviceInfo"
??zclSendDeviceInfo?relay SYMBOL "?relay", zclSendDeviceInfo
zclSendHeartbeat    SYMBOL "zclSendHeartbeat"
??zclSendHeartbeat?relay SYMBOL "?relay", zclSendHeartbeat

        EXTERN afNumEndPoints
        FUNCTION afNumEndPoints,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afEndPoints
        FUNCTION afEndPoints,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EPRsp
        FUNCTION ZDP_EPRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ProcessSimpleDescReq
        FUNCTION ZDO_ProcessSimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgWriteStartupOptions
        FUNCTION zgWriteStartupOptions,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??ZDO_ProcessSimpleDescReq?relay
        FUNCTION ??ZDO_ProcessSimpleDescReq?relay,00H
        EXTERN ??ZDP_EPRsp?relay
        FUNCTION ??ZDP_EPRsp?relay,00H
        EXTERN ??afEndPoints?relay
        FUNCTION ??afEndPoints?relay,00H
        EXTERN ??afNumEndPoints?relay
        FUNCTION ??afNumEndPoints?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??zgWriteStartupOptions?relay
        FUNCTION ??zgWriteStartupOptions?relay,00H
        EXTERN zclOnOffLight0_SimpleDesc
        EXTERN zclOnOffLight_TaskID

// F:\ZigBee Project\smartSwitch-light\v1.03.1\ZStack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAutomation\SmartSwitchLight\Source\zcl_device_info.c
//    1 #include "zcl.h"
//    2 #include "ZDObject.h"
//    3 #include "zcl_device_info.h"
//    4 #include "zcl_onofflight.h"
//    5 #include "OnBoard.h"
//    6 #include "ZGlobals.h"
//    7 #include "ZComDef.h"
//    8 
//    9 extern byte zclOnOffLight_TaskID;
//   10 #define ZCL_TASK_ID zclOnOffLight_TaskID
//   11 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   12 afAddrType_t zclIASZoneMotionIR_Coord_nwkAddr;
zclIASZoneMotionIR_Coord_nwkAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   13 static uint16 gDeviceInfoSendStatus = 0;
gDeviceInfoSendStatus:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   14 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   15 void zclDeviceInfoInit(void)
zclDeviceInfoInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function zclDeviceInfoInit
        CODE
//   16 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   17   gDeviceInfoSendStatus = 0;
        MOV     DPTR,#gDeviceInfoSendStatus
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   18   zclIASZoneMotionIR_Coord_nwkAddr.addrMode = afAddr16Bit;
        MOV     DPTR,#zclIASZoneMotionIR_Coord_nwkAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//   19   zclIASZoneMotionIR_Coord_nwkAddr.addr.shortAddr = 0x0000;
        MOV     DPTR,#zclIASZoneMotionIR_Coord_nwkAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   20   zclIASZoneMotionIR_Coord_nwkAddr.endPoint = 0xF0;
        MOV     DPTR,#zclIASZoneMotionIR_Coord_nwkAddr + 9
        MOV     A,#-0x10
        MOVX    @DPTR,A
//   21 }
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   22 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   23 static void zclActiveEPRsp(void)
zclActiveEPRsp:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function zclActiveEPRsp
        CODE
//   24 {
        FUNCALL zclActiveEPRsp, afNumEndPoints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 83, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclActiveEPRsp, afEndPoints
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 83, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclActiveEPRsp, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclActiveEPRsp, ZDP_EPRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 90, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 90, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclActiveEPRsp, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 83, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 83, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 73
        MOV     A,#-0x49
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 83)
//   25   uint8 pBuf[64];
//   26   byte cnt = 0;
//   27   zAddrType_t srcAddr;
//   28   
//   29   srcAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//   30   srcAddr.addr.shortAddr = 0x0000;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   31   
//   32   cnt = afNumEndPoints() - 1;
        ; Setup parameters for call to function afNumEndPoints
        LCALL   ??afNumEndPoints?relay
        MOV     A,R1
        MOV     R6,A
//   33   afEndPoints( (uint8 *)pBuf, true );
        ; Setup parameters for call to function afEndPoints
        MOV     R1,#0x1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??afEndPoints?relay
//   34   ZDP_ActiveEPRsp(0x0, &srcAddr, ZDP_SUCCESS,
//   35                   NLME_GetShortAddr(), 
//   36                   cnt, (uint8 *)pBuf, 0);
        ; Setup parameters for call to function ZDP_EPRsp
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 84)
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 86)
        MOV     A,#-0x1
        ADD     A,R6
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 87)
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 89)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 90)
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R1,#0x0
        MOV     R2,#0x5
        MOV     R3,#-0x80
        LCALL   ??ZDP_EPRsp?relay
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 83)
//   37   gDeviceInfoSendStatus++;
        LCALL   ?Subroutine2 & 0xFFFF
//   38   
//   39   osal_start_timerEx(ZCL_TASK_ID, 
//   40                      ZCL_DEVICE_INFO_SEND_EVENT,
//   41                      100);
??CrossCallReturnLabel_2:
        LCALL   ?Subroutine3 & 0xFFFF
//   42 }
??CrossCallReturnLabel_4:
        MOV     A,#0x49
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//   43 
//   44 static void zclSimpleDescRsp(uint16 endpoint)
//   45 {
//   46   zdoIncomingMsg_t *imMsg;
//   47   uint16 nwkAddr = 0;
//   48   
//   49   nwkAddr = NLME_GetShortAddr();
//   50   
//   51   imMsg = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + 3 );
//   52   imMsg->srcAddr.addrMode = Addr16Bit;
//   53   imMsg->srcAddr.addr.shortAddr = 0x0000;
//   54   imMsg->TransSeq = (uint8)0x00;
//   55   imMsg->asdu = (byte*)(((byte*)imMsg) + sizeof( zdoIncomingMsg_t ));
//   56   imMsg->asdu[0] = LO_UINT16( nwkAddr );
//   57   imMsg->asdu[1] = HI_UINT16( nwkAddr );
//   58   imMsg->asdu[2] = endpoint;
//   59     
//   60   ZDO_ProcessSimpleDescReq(imMsg);
//   61   osal_msg_deallocate((uint8 *)imMsg);
//   62   
//   63   gDeviceInfoSendStatus++;
//   64   osal_start_timerEx(ZCL_TASK_ID, 
//   65                      ZCL_DEVICE_INFO_SEND_EVENT,
//   66                      100);
//   67 }
//   68 

        RSEG XDATA_I:XDATA:NOROOT(0)
//   69 static endPointDesc_t zclHeartbeatDesc = {
zclHeartbeatDesc:
        DATA8
        DS 6
        REQUIRE `?<Initializer for zclHeartbeatDesc>`
        REQUIRE __INIT_XDATA_I
//   70   ZCL_HEARTBEAT_ENDPOINT,
//   71   &ZCL_TASK_ID,
//   72   (SimpleDescriptionFormat_t *)&zclOnOffLight0_SimpleDesc,
//   73   (afNetworkLatencyReq_t)0
//   74 };
//   75 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   76 static uint8 zclHeartbeatCounter = 0;
zclHeartbeatCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   77 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   78 afStatus_t zclSendHeartbeat(void)
zclSendHeartbeat:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function zclSendHeartbeat
        CODE
//   79 {
        FUNCALL zclSendHeartbeat, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSendHeartbeat, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   80   afStatus_t stat;
//   81   stat = AF_DataRequest(&zclIASZoneMotionIR_Coord_nwkAddr, 
//   82                         &zclHeartbeatDesc,
//   83                         ZCL_HEARTBEAT_CLUSTERID,
//   84                         ZCL_HEARTBEAT_DATA_LEN,
//   85                         (uint8 *)&zclHeartbeatCounter,
//   86                         (uint8 *)&zclHeartbeatCounter,
//   87                         0,
//   88                         AF_DEFAULT_RADIUS);
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#zclHeartbeatCounter & 0xff
        MOV     ?V0 + 1,#(zclHeartbeatCounter >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#-0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x0
        MOV     R4,#zclHeartbeatDesc & 0xff
        MOV     R5,#(zclHeartbeatDesc >> 8) & 0xff
        MOV     R2,#zclIASZoneMotionIR_Coord_nwkAddr & 0xff
        MOV     R3,#(zclIASZoneMotionIR_Coord_nwkAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     R6,A
//   89   
//   90   osal_start_timerEx(ZCL_TASK_ID, 
//   91                      ZCL_DEVICE_HEARTBEAT_EVENT,
//   92                      ZCL_HEARTBEAT_PERIOD);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x60
        MOV     R5,#-0x16
        MOV     R2,#0x0
        MOV     R3,#0x2
        LCALL   ?Subroutine3 & 0xFFFF
//   93   return stat;
??CrossCallReturnLabel_5:
        MOV     A,R6
        MOV     R1,A
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock3
//   94   
//   95 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 83)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOV     DPTR,#zclOnOffLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
//   96 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   97 void zclSendDeviceInfo(void)
zclSendDeviceInfo:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function zclSendDeviceInfo
        CODE
//   98 {
        FUNCALL zclSendDeviceInfo, zclActiveEPRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSendDeviceInfo, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSendDeviceInfo, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSendDeviceInfo, ZDO_ProcessSimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSendDeviceInfo, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSendDeviceInfo, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSendDeviceInfo, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSendDeviceInfo, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSendDeviceInfo, ZDO_ProcessSimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSendDeviceInfo, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSendDeviceInfo, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSendDeviceInfo, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//   99   switch (gDeviceInfoSendStatus)
        MOV     DPTR,#gDeviceInfoSendStatus
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for zclSendDeviceInfo>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSendDeviceInfo_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSendDeviceInfo_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSendDeviceInfo_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSendDeviceInfo_3
        CODE
//  100   {
//  101   case 0:
//  102     zclActiveEPRsp();
??zclSendDeviceInfo_1:
        ; Setup parameters for call to function zclActiveEPRsp
        LCALL   ??zclActiveEPRsp?relay
//  103     break;
        SJMP    ??CrossCallReturnLabel_6
//  104   case 1:
//  105     zclSimpleDescRsp(ONOFFLIGHT0_ENDPOINT);
??zclSendDeviceInfo_2:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        MOV     A,#0x10
??zclSendDeviceInfo_4:
        MOVX    @DPTR,A
        ; Setup parameters for call to function ZDO_ProcessSimpleDescReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??ZDO_ProcessSimpleDescReq?relay
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        SJMP    ??zclSendDeviceInfo_5
//  106     break;
//  107   case 2:
//  108     zclSimpleDescRsp(ONOFFLIGHT1_ENDPOINT);
??zclSendDeviceInfo_3:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     A,#0x11
        SJMP    ??zclSendDeviceInfo_4
//  109     break;
//  110   default:
//  111     gDeviceInfoSendStatus = 0;
??zclSendDeviceInfo_0:
        MOV     DPTR,#gDeviceInfoSendStatus
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  112     osal_start_timerEx(ZCL_TASK_ID, 
//  113                      ZCL_DEVICE_HEARTBEAT_EVENT,
//  114                      ZCL_HEARTBEAT_PERIOD);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x60
        MOV     R5,#-0x16
        MOV     R2,A
        MOV     R3,#0x2
??zclSendDeviceInfo_5:
        LCALL   ?Subroutine3 & 0xFFFF
//  115     break;
//  116   }
//  117 }
??CrossCallReturnLabel_6:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond9 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 83)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOV     DPTR,#gDeviceInfoSendStatus
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_start_timerEx
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x1
        RET
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        ; Setup parameters for call to function osal_msg_allocate
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x18
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        MOV     A,R6
        ADD     A,#0x15
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x13
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        MOV     A,?V0 + 1
        MOV     ?V0 + 0,A
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        INC     DPTR
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_7, ??CrossCallReturnLabel_1
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_0
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_8, ??CrossCallReturnLabel_1
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker19 Using cfiCommon1
        CFI (cfiPicker19) NoFunction
        CFI (cfiPicker19) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiPicker19
//  118 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  119 void zclFactoryReset(uint8 DataCleanFlag)
zclFactoryReset:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function zclFactoryReset
        CODE
//  120 {
        FUNCALL zclFactoryReset, zgWriteStartupOptions
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclFactoryReset, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  121   static uint8 hasDoReset = 0;
//  122   if (hasDoReset)
        MOV     DPTR,#??hasDoReset
        MOVX    A,@DPTR
        JNZ     ??zclFactoryReset_0
//  123     return;
//  124   
//  125   hasDoReset = 1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  126   if(DataCleanFlag)
        MOV     A,R6
        JZ      ??zclFactoryReset_1
//  127   {
//  128     zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
        ; Setup parameters for call to function zgWriteStartupOptions
        MOV     R2,#0x2
        MOV     R1,#-0x1
        LCALL   ??zgWriteStartupOptions?relay
//  129   }
//  130   SystemResetSoft();
??zclFactoryReset_1:
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  131 }
??zclFactoryReset_0:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock20

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??hasDoReset:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zclHeartbeatDesc>`:
        DATA8
        DB 239
        DATA16
        DW zclOnOffLight_TaskID
        DW zclOnOffLight0_SimpleDesc
        DATA8
        DB 0

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclDeviceInfoInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclDeviceInfoInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclActiveEPRsp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclActiveEPRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSendHeartbeat?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclSendHeartbeat

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSendDeviceInfo?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclSendDeviceInfo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclFactoryReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclFactoryReset

        END
// 
// 539 bytes in segment BANKED_CODE
//  30 bytes in segment BANK_RELAYS
//   6 bytes in segment XDATA_I
//   6 bytes in segment XDATA_ID
//  16 bytes in segment XDATA_Z
// 
// 575 bytes of CODE  memory
//  22 bytes of XDATA memory
//
//Errors: none
//Warnings: none
