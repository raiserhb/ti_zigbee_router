///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        20/Oct/2016  11:21:18 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\work space\Smart Product\SmartLightSwitch\Œ Ã‚ /
//                          \four key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\HomeAutomation\SmartSw /
//                          itchLight\Source\zcl_light_control.c              /
//    Command line       =  -f "D:\work space\Smart                           /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\Tools\CC2530DB\f8wRouter.cfg"     /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK -DNV_RESTORE         /
//                          -DNV_INIT -DHAL_KEY=FALSE -DHAL_LED=FALSE         /
//                          -DHAL_LCD=FALSE -DHAL_ADC=FALSE                   /
//                          -DTC_LINKKEY_JOIN) -f "D:\work space\Smart        /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\Tools\CC2530DB\f8wConfig.cfg"     /
//                          (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=1000            /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          -DDEFAULT_KEY={0x58,0x69,0x6E,0x67,0x48,0x75,     /
//                          0x6F,0x59,0x75,0x61,0x6E,0x53,0x6D,0x61,0x72,     /
//                          0x74} -DMAC_MAX_FRAME_SIZE=116                    /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=0           /
//                          -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0       /
//                          -DREJOIN_POLL_RATE=440) -f "D:\work space\Smart   /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\Tools\CC2530DB\f8wZCL.cfg"        /
//                          (-DZCL_READ -DZCL_WRITE -DZCL_REPORT -DZCL_BASIC  /
//                          -DZCL_IDENTIFY -DZCL_ON_OFF -DZCL_KEY_ESTABLISH   /
//                          -DZCL_KEY_ESTABLISHMENT_KEY_GENERATE_TIMEOUT=4    /
//                          -DZCL_KEY_ESTABLISHMENT_MAC_GENERATE_TIMEOUT=10   /
//                          -DZCL_KEY_ESTABLISHMENT_EKEY_GENERATE_TIMEOUT=10  /
//                          -DZCL_LOAD_CONTROL -DZCL_SIMPLE_METERING          /
//                          -DZCL_PRICING -DZCL_MESSAGE -DZCL_TUNNELING       /
//                          -DZCL_TOU) -DZCL_DEVICE_MGMT "D:\work             /
//                          space\Smart Product\SmartLightSwitch\Œ Ã‚\four    /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\Source\zcl_light_control.c" -lC "D:\work      /
//                          space\Smart Product\SmartLightSwitch\Œ Ã‚\four    /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\RouterDeviceEB\List\" -lA "D:\work   /
//                          space\Smart Product\SmartLightSwitch\Œ Ã‚\four    /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\RouterDeviceEB\List\"                /
//                          --diag_suppress Pe001,Pa010 -o "D:\work           /
//                          space\Smart Product\SmartLightSwitch\Œ Ã‚\four    /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\RouterDeviceEB\Obj\" -e --debug      /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "D:\work space\Smart      /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\" -I "D:\work space\Smart            /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\Source\" -I "D:\work space\Smart  /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\Source\" -I "D:\work           /
//                          space\Smart Product\SmartLightSwitch\Œ Ã‚\four    /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\ZMain\TI2530DB\" -I         /
//                          "D:\work space\Smart Product\SmartLightSwitch\Œ Ã /
//                          ‚\four key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC /
//                          2530-2.5.1a\Projects\zstack\HomeAutomation\SmartS /
//                          witchLight\CC2530DB\..\..\..\..\..\Components\hal /
//                          \include\" -I "D:\work space\Smart                /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\hal\target /
//                          \CC2530EB\" -I "D:\work space\Smart               /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\mac\includ /
//                          e\" -I "D:\work space\Smart                       /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\mac\high_l /
//                          evel\" -I "D:\work space\Smart                    /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\mac\low_le /
//                          vel\srf04\" -I "D:\work space\Smart               /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\mac\low_le /
//                          vel\srf04\single_chip\" -I "D:\work space\Smart   /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\mt\" -I    /
//                          "D:\work space\Smart Product\SmartLightSwitch\Œ Ã /
//                          ‚\four key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC /
//                          2530-2.5.1a\Projects\zstack\HomeAutomation\SmartS /
//                          witchLight\CC2530DB\..\..\..\..\..\Components\osa /
//                          l\include\" -I "D:\work space\Smart               /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\services\s /
//                          addr\" -I "D:\work space\Smart                    /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\services\s /
//                          data\" -I "D:\work space\Smart                    /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\stack\af\" /
//                           -I "D:\work space\Smart                          /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\stack\nwk\ /
//                          " -I "D:\work space\Smart                         /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\stack\sapi /
//                          \" -I "D:\work space\Smart                        /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\stack\sec\ /
//                          " -I "D:\work space\Smart                         /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\stack\sys\ /
//                          " -I "D:\work space\Smart                         /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\stack\zcl\ /
//                          " -I "D:\work space\Smart                         /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\stack\zdo\ /
//                          " -I "D:\work space\Smart                         /
//                          Product\SmartLightSwitch\Œ Ã‚\four                /
//                          key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2. /
//                          5.1a\Projects\zstack\HomeAutomation\SmartSwitchLi /
//                          ght\CC2530DB\..\..\..\..\..\Components\zmac\" -I  /
//                          "D:\work space\Smart Product\SmartLightSwitch\Œ Ã /
//                          ‚\four key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC /
//                          2530-2.5.1a\Projects\zstack\HomeAutomation\SmartS /
//                          witchLight\CC2530DB\..\..\..\..\..\Components\zma /
//                          c\f8w\" -Oh --require_prototypes                  /
//    List file          =  D:\work space\Smart Product\SmartLightSwitch\Œ Ã‚ /
//                          \four key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2 /
//                          530-2.5.1a\Projects\zstack\HomeAutomation\SmartSw /
//                          itchLight\CC2530DB\RouterDeviceEB\List\zcl_light_ /
//                          control.s51                                       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_light_control

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??zclFactoryResetEvent?relay
        FUNCTION ??zclFactoryResetEvent?relay,0203H
        PUBLIC ??zclFactoryResetInit?relay
        FUNCTION ??zclFactoryResetInit?relay,0203H
        PUBLIC ??zclLightControlInit?relay
        FUNCTION ??zclLightControlInit?relay,0203H
        PUBWEAK `??zclLightControlPort0Isr??INTVEC 107`
        PUBLIC ??zclLightControlTouchPanelEnable?relay
        FUNCTION ??zclLightControlTouchPanelEnable?relay,0203H
        PUBLIC ??zclLightReportEvent?relay
        FUNCTION ??zclLightReportEvent?relay,0203H
        PUBLIC ??zclRestoreInterruptEvent?relay
        FUNCTION ??zclRestoreInterruptEvent?relay,0203H
        PUBLIC ??zclTouchPanelEvent?relay
        FUNCTION ??zclTouchPanelEvent?relay,0203H
        PUBWEAK IEN2
        PUBWEAK P0DIR
        PUBWEAK P0IEN
        PUBWEAK P0IFG
        PUBWEAK P0INP
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBWEAK P2DIR
        PUBWEAK P2IEN
        PUBWEAK P2IFG
        PUBWEAK P2INP
        PUBWEAK P2SEL
        PUBWEAK PICTL
        PUBWEAK _A_IEN0
        PUBWEAK _A_IEN1
        PUBWEAK _A_IRCON
        PUBWEAK _A_IRCON2
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBLIC zclFactoryResetEvent
        FUNCTION zclFactoryResetEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclFactoryResetInit
        FUNCTION zclFactoryResetInit,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC zclLightControlInit
        FUNCTION zclLightControlInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclLightControlPort0Isr
        FUNCTION zclLightControlPort0Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 15, STACK
        PUBLIC zclLightControlTouchPanelEnable
        FUNCTION zclLightControlTouchPanelEnable,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclLightReportEvent
        FUNCTION zclLightReportEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC zclRestoreInterruptEvent
        FUNCTION zclRestoreInterruptEvent,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclTouchPanelEvent
        FUNCTION zclTouchPanelEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
zcl_SendReportCmd   SYMBOL "zcl_SendReportCmd"
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??zcl_SendReportCmd?relay SYMBOL "?relay", zcl_SendReportCmd
zclFactoryResetEvent SYMBOL "zclFactoryResetEvent"
??zclFactoryResetEvent?relay SYMBOL "?relay", zclFactoryResetEvent
zclFactoryResetInit SYMBOL "zclFactoryResetInit"
??zclFactoryResetInit?relay SYMBOL "?relay", zclFactoryResetInit
zclLightControlInit SYMBOL "zclLightControlInit"
??zclLightControlInit?relay SYMBOL "?relay", zclLightControlInit
zclLightControlPort0Isr SYMBOL "zclLightControlPort0Isr"
`??zclLightControlPort0Isr??INTVEC 107` SYMBOL "??INTVEC 107", zclLightControlPort0Isr
zclLightControlTouchPanelEnable SYMBOL "zclLightControlTouchPanelEnable"
??zclLightControlTouchPanelEnable?relay SYMBOL "?relay", zclLightControlTouchPanelEnable
zclLightReportEvent SYMBOL "zclLightReportEvent"
??zclLightReportEvent?relay SYMBOL "?relay", zclLightReportEvent
zclRestoreInterruptEvent SYMBOL "zclRestoreInterruptEvent"
??zclRestoreInterruptEvent?relay SYMBOL "?relay", zclRestoreInterruptEvent
zclTouchPanelEvent  SYMBOL "zclTouchPanelEvent"
??zclTouchPanelEvent?relay SYMBOL "?relay", zclTouchPanelEvent

        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendReportCmd
        FUNCTION zcl_SendReportCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??zcl_SendReportCmd?relay
        FUNCTION ??zcl_SendReportCmd?relay,00H
        EXTERN g_u8restFlag
        EXTERN zclOnOffLight0_OnOff
        EXTERN zclOnOffLight1_OnOff
        EXTERN zclOnOffLight2_OnOff
        EXTERN zclOnOffLight3_OnOff
        EXTERN zclOnOffLight_TaskID

// D:\work space\Smart Product\SmartLightSwitch\Œ Ã‚\four key\v1.00.0\ZStack-CC2530-2.5.1a\ZStack-CC2530-2.5.1a\Projects\zstack\HomeAutomation\SmartSwitchLight\Source\zcl_light_control.c
//    1 #include "zcl_light_control.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,089H
// unsigned char volatile __sfr P0IFG
P0IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08bH
// unsigned char volatile __sfr P2IFG
P2IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08cH
// unsigned char volatile __sfr PICTL
PICTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08fH
// unsigned char volatile __sfr P0INP
P0INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09aH
// unsigned char volatile __sfr IEN2
IEN2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0abH
// unsigned char volatile __sfr P0IEN
P0IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0acH
// unsigned char volatile __sfr P2IEN
P2IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c0H
// union <unnamed> volatile __sfr _A_IRCON
_A_IRCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e8H
// union <unnamed> volatile __sfr _A_IRCON2
_A_IRCON2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f7H
// unsigned char volatile __sfr P2INP
P2INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//    2 #include "zcl_onofflight.h"
//    3 #include "zcl.h"
//    4 #include "zcl_device_info.h"
//    5 //#include <ioCC2530.h>
//    6 
//    7 extern byte zclOnOffLight_TaskID;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    8 static afAddrType_t zcl_Coord_nwkAddr;
zcl_Coord_nwkAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    9 static uint8 zcl_SeqNum = 0;
zcl_SeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   10 static uint8 zcl_interruptNo = 0;
zcl_interruptNo:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   11 void zclFactoryResetInit(void);
//   12 void zclFactoryResetEvent(void);

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   13 static uint8 zcl_factoryReset = 0;
zcl_factoryReset:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   14 extern uint8 g_u8restFlag;
//   15 
//   16 /*
//   17 input   LED     LIGHT
//   18 P1_3 -> P0_7 -> P0_0
//   19 
//   20 p1_2 -> P1_0 -> P0_1
//   21 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   22 void zclLightControlInit(void)      //LED≥ı ºªØ
zclLightControlInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function zclLightControlInit
        CODE
//   23 {
        FUNCALL zclLightControlInit, zclFactoryResetInit
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclLightControlInit, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   24   zclFactoryResetInit();
        ; Setup parameters for call to function zclFactoryResetInit
        LCALL   ??zclFactoryResetInit?relay
//   25 
//   26   P1SEL &= ~BV(7); //LED-RED
        ANL     0xf4,#0x7f
//   27   P1DIR |= BV(7);
        ORL     0xfe,#0x80
//   28   
//   29   ///init P1.4  P1.5 P1.6and P0.3 for relay control///////////
//   30   
//   31   P1SEL &= ~BV(4);      //π¶ƒ‹£∫∆’Õ®I/Oø⁄ 
        ANL     0xf4,#0xef
//   32   P1DIR |= BV(4);       //∑ΩœÚ£∫ ‰≥ˆ
        ORL     0xfe,#0x10
//   33   
//   34   P0SEL &= ~BV(3);
        ANL     0xf3,#0xf7
//   35   P0DIR |= BV(3); 
        ORL     0xfd,#0x8
//   36   
//   37   P1SEL &= ~BV(5);
        ANL     0xf4,#0xdf
//   38   P1DIR |= BV(5);
        ORL     0xfe,#0x20
//   39   
//   40   P1SEL &= ~BV(6);
        ANL     0xf4,#0xbf
//   41   P1DIR |= BV(6);
        ORL     0xfe,#0x40
//   42   
//   43   //end init for control
//   44   LIGHT_TURN_OFF_LIGHT0();
        CLR     0x90.4
//   45   LIGHT_TURN_OFF_LIGHT1();
        CLR     0x90.5
//   46   LIGHT_TURN_OFF_LIGHT2();
        CLR     0x80.3
//   47   LIGHT_TURN_OFF_LIGHT3(); 
        CLR     0x90.6
//   48   
//   49   //…Ë±∏≥ı ºªØÕÍ≥…£¨∆Ù∂Ø∂® ±∆˜
//   50   osal_start_timerEx(zclOnOffLight_TaskID, 
//   51                      ZCL_DEVICE_INIT_DONE_EVENT,                    
//   52                      1000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R2,#0x8
        LCALL   ?Subroutine3 & 0xFFFF
//   53   zcl_Coord_nwkAddr.addrMode = afAddr16Bit;       //–≠µ˜∆˜–≈œ¢
??CrossCallReturnLabel_6:
        MOV     DPTR,#zcl_Coord_nwkAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//   54   zcl_Coord_nwkAddr.addr.shortAddr = 0x0000;
        MOV     DPTR,#zcl_Coord_nwkAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   55   zcl_Coord_nwkAddr.endPoint = 0xF0;
        MOV     DPTR,#zcl_Coord_nwkAddr + 9
        MOV     A,#-0x10
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock0
//   56 }
        REQUIRE ?Subroutine0
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE _A_P1
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
//   57 /*
//   58 input   LED     LIGHT
//   59 P1_3 -> P0_7 -> P0_0
//   60 
//   61 p1_2 -> P1_0 -> P0_1
//   62 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   63 void zclLightControlTouchPanelEnable(void)
zclLightControlTouchPanelEnable:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function zclLightControlTouchPanelEnable
        CODE
//   64 {
        ; Saved register size: 0
        ; Auto size: 0
//   65   //KEY_1
//   66   P0SEL &= ~BV(4);          //∆’Õ®I/Oø⁄
        ANL     0xf3,#0xef
//   67   P0DIR &= ~BV(4);          // ‰»Î
        ANL     0xfd,#0xef
//   68   P0INP &= ~BV(4);          
        ANL     0x8f,#0xef
//   69   P0IEN |= BV(4);           // πƒ‹÷–∂œ
        ORL     0xab,#0x10
//   70   
//   71   //KEY_2
//   72   P0SEL &= ~BV(5);
        ANL     0xf3,#0xdf
//   73   P0DIR &= ~BV(5);
        ANL     0xfd,#0xdf
//   74   P0INP &= ~BV(5);
        ANL     0x8f,#0xdf
//   75   P0IEN |= BV(5);  
        ORL     0xab,#0x20
//   76   
//   77   //KEY_3
//   78   P0SEL &= ~BV(6);
        ANL     0xf3,#0xbf
//   79   P0DIR &= ~BV(6);
        ANL     0xfd,#0xbf
//   80   P0INP &= ~BV(6);
        ANL     0x8f,#0xbf
//   81   P0IEN |= BV(6);  
        ORL     0xab,#0x40
//   82   
//   83   //KEY_4
//   84   P0SEL &= ~BV(7);
        ANL     0xf3,#0x7f
//   85   P0DIR &= ~BV(7);
        ANL     0xfd,#0x7f
//   86   P0INP &= ~BV(7);
        ANL     0x8f,#0x7f
//   87   P0IEN |= BV(7);  
        ORL     0xab,#0x80
//   88   
//   89   PICTL |= (0x1 << 0);
        ORL     0x8c,#0x1
//   90   IEN1 |= (0x1 << 5);
        SETB    0xb8.5
//   91   
//   92   P0IFG = 0;
        MOV     0x89,#0x0
//   93   P0IF = 0;
        CLR     0xc0.5
//   94   
//   95   LIGHT_TURN_OFF_LIGHT0();
        CLR     0x90.4
//   96   LIGHT_TURN_OFF_LIGHT1();
        CLR     0x90.5
//   97   LIGHT_TURN_OFF_LIGHT2();
        CLR     0x80.3
//   98   LIGHT_TURN_OFF_LIGHT3(); 
        CLR     0x90.6
//   99 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE P0INP
        REQUIRE P0IEN
        REQUIRE PICTL
        REQUIRE _A_IEN1
        REQUIRE P0IFG
        REQUIRE _A_IRCON
        REQUIRE _A_P1
        REQUIRE _A_P0
//  100 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  101 void zclLightReportEvent(uint16 endpoint, uint8 *zclOnOffLight_OnOff)
zclLightReportEvent:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function zclLightReportEvent
        CODE
//  102 {
        FUNCALL zclLightReportEvent, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclLightReportEvent, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclLightReportEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  103   zclReportCmd_t *pReportCmd;
//  104   
//  105   pReportCmd = osal_mem_alloc( sizeof(zclReportCmd_t) + sizeof(zclReport_t) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//  106   if ( pReportCmd != NULL )
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??zclLightReportEvent_0
//  107   {
//  108     pReportCmd->numAttr = 1;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x1
        MOVX    @DPTR,A
//  109     pReportCmd->attrList[0].attrID = ATTRID_ON_OFF;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine4 & 0xFFFF
//  110     pReportCmd->attrList[0].dataType = ZCL_DATATYPE_UINT8;
??CrossCallReturnLabel_9:
        MOV     A,#0x20
        LCALL   ?Subroutine4 & 0xFFFF
//  111     pReportCmd->attrList[0].attrData = (void *)(zclOnOffLight_OnOff);
??CrossCallReturnLabel_10:
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  112 
//  113     zcl_SendReportCmd( endpoint, 
//  114                       &zcl_Coord_nwkAddr,
//  115                        ZCL_CLUSTER_ID_GEN_ON_OFF,
//  116                        pReportCmd, ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, 
//  117                        zcl_SeqNum++ );
        MOV     DPTR,#zcl_SeqNum
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        ADD     A,R0
        MOVX    @DPTR,A
        ; Setup parameters for call to function zcl_SendReportCmd
        MOV     A,R0
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 4,#0x1
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#zcl_Coord_nwkAddr & 0xff
        MOV     R3,#(zcl_Coord_nwkAddr >> 8) & 0xff
        MOV     R1,?V0 + 0
        LCALL   ??zcl_SendReportCmd?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  118        
//  119     osal_mem_free( pReportCmd );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
//  120   }
//  121 }
??zclLightReportEvent_0:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6
//  122 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  123 void zclTouchPanelEvent(void)      //∞¥œ¬ø™¥∞¡±ø™£¨∞¥œ¬πÿ¥∞¡±πÿ£¨∞¥œ¬‘›Õ£Õ£÷πø™/πÿ∂Ø◊˜
zclTouchPanelEvent:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function zclTouchPanelEvent
        CODE
//  124 {
        FUNCALL zclTouchPanelEvent, zclLightReportEvent
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclTouchPanelEvent, zclLightReportEvent
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclTouchPanelEvent, zclLightReportEvent
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclTouchPanelEvent, zclLightReportEvent
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclTouchPanelEvent, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  125   int done = 0;
        MOV     R0,#0x0
//  126   //LED1
//  127   if( zcl_interruptNo & 1 ) {
        MOV     DPTR,#zcl_interruptNo
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??CrossCallReturnLabel_2
//  128    if (P0_4 == 0) {
        MOV     C,0x80.4
        JC      ??CrossCallReturnLabel_2
//  129        if (zclOnOffLight0_OnOff == LIGHT_ON) {
        MOV     DPTR,#zclOnOffLight0_OnOff
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclTouchPanelEvent_0
//  130         zclOnOffLight0_OnOff = LIGHT_OFF;
        CLR     A
        MOVX    @DPTR,A
//  131         LIGHT_TURN_OFF_LIGHT0();
        CLR     0x90.4
        SJMP    ??zclTouchPanelEvent_1
//  132        } else {
//  133         zclOnOffLight0_OnOff = LIGHT_ON;
??zclTouchPanelEvent_0:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  134         LIGHT_TURN_ON_LIGHT0();
        SETB    0x90.4
//  135        }
//  136        zclLightReportEvent(ONOFFLIGHT0_ENDPOINT, &zclOnOffLight0_OnOff); 
??zclTouchPanelEvent_1:
        ; Setup parameters for call to function zclLightReportEvent
        MOV     R4,#zclOnOffLight0_OnOff & 0xff
        MOV     R5,#(zclOnOffLight0_OnOff >> 8) & 0xff
        MOV     R2,#0x10
        LCALL   ?Subroutine2 & 0xFFFF
//  137        done = 1;
//  138    }
//  139   }
//  140   //LED2
//  141   if( zcl_interruptNo & 0x20 ) {
??CrossCallReturnLabel_2:
        MOV     DPTR,#zcl_interruptNo
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.5
        JNC     ??CrossCallReturnLabel_3
//  142     if (P0_5 == 0) {
        MOV     C,0x80.5
        JC      ??CrossCallReturnLabel_3
//  143       if (zclOnOffLight1_OnOff == LIGHT_ON) {
        MOV     DPTR,#zclOnOffLight1_OnOff
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclTouchPanelEvent_2
//  144         zclOnOffLight1_OnOff = LIGHT_OFF;
        CLR     A
        MOVX    @DPTR,A
//  145         LIGHT_TURN_OFF_LIGHT1();
        CLR     0x90.5
        SJMP    ??zclTouchPanelEvent_3
//  146       } else {
//  147         zclOnOffLight1_OnOff = LIGHT_ON;
??zclTouchPanelEvent_2:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  148         LIGHT_TURN_ON_LIGHT1();
        SETB    0x90.5
//  149       }  
//  150       zclLightReportEvent(ONOFFLIGHT1_ENDPOINT, &zclOnOffLight1_OnOff);
??zclTouchPanelEvent_3:
        ; Setup parameters for call to function zclLightReportEvent
        MOV     R4,#zclOnOffLight1_OnOff & 0xff
        MOV     R5,#(zclOnOffLight1_OnOff >> 8) & 0xff
        MOV     R2,#0x11
        LCALL   ?Subroutine2 & 0xFFFF
//  151       done = 1;
//  152     }
//  153   }  
//  154   //LED3
//  155  if( zcl_interruptNo & 0x40 ) {
??CrossCallReturnLabel_3:
        MOV     DPTR,#zcl_interruptNo
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.6
        JNC     ??CrossCallReturnLabel_4
//  156     if (P0_6 == 0) {
        MOV     C,0x80.6
        JC      ??CrossCallReturnLabel_4
//  157     if (zclOnOffLight3_OnOff == LIGHT_ON) {
        MOV     DPTR,#zclOnOffLight3_OnOff
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclTouchPanelEvent_4
//  158       zclOnOffLight3_OnOff = LIGHT_OFF;
        CLR     A
        MOVX    @DPTR,A
//  159        LIGHT_TURN_OFF_LIGHT3();
        CLR     0x90.6
        SJMP    ??zclTouchPanelEvent_5
//  160     } else {
//  161       zclOnOffLight3_OnOff = LIGHT_ON;
??zclTouchPanelEvent_4:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  162       LIGHT_TURN_ON_LIGHT3();
        SETB    0x90.6
//  163     }  
//  164     zclLightReportEvent(ONOFFLIGHT3_ENDPOINT, &zclOnOffLight3_OnOff);
??zclTouchPanelEvent_5:
        ; Setup parameters for call to function zclLightReportEvent
        MOV     R4,#zclOnOffLight3_OnOff & 0xff
        MOV     R5,#(zclOnOffLight3_OnOff >> 8) & 0xff
        MOV     R2,#0x13
        LCALL   ?Subroutine2 & 0xFFFF
//  165     done = 1;
//  166     }
//  167  }    
//  168  // LED4
//  169   if( zcl_interruptNo & 0x80 ) {
??CrossCallReturnLabel_4:
        MOV     DPTR,#zcl_interruptNo
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.7
        JNC     ??CrossCallReturnLabel_5
//  170      if (P0_7 == 0) {
        MOV     C,0x80.7
        JC      ??CrossCallReturnLabel_5
//  171        if (zclOnOffLight2_OnOff == LIGHT_ON) {
        MOV     DPTR,#zclOnOffLight2_OnOff
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclTouchPanelEvent_6
//  172         zclOnOffLight2_OnOff = LIGHT_OFF;
        CLR     A
        MOVX    @DPTR,A
//  173          LIGHT_TURN_OFF_LIGHT2();
        CLR     0x80.3
        SJMP    ??zclTouchPanelEvent_7
//  174       } else {
//  175         zclOnOffLight2_OnOff = LIGHT_ON;
??zclTouchPanelEvent_6:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  176         LIGHT_TURN_ON_LIGHT2();
        SETB    0x80.3
//  177      }  
//  178      zclLightReportEvent(ONOFFLIGHT2_ENDPOINT, &zclOnOffLight2_OnOff);
??zclTouchPanelEvent_7:
        ; Setup parameters for call to function zclLightReportEvent
        MOV     R4,#zclOnOffLight2_OnOff & 0xff
        MOV     R5,#(zclOnOffLight2_OnOff >> 8) & 0xff
        MOV     R2,#0x12
        LCALL   ?Subroutine2 & 0xFFFF
//  179     done = 1;
//  180    }
//  181  }  
//  182  
//  183  zcl_interruptNo = 0;
??CrossCallReturnLabel_5:
        MOV     DPTR,#zcl_interruptNo
        CLR     A
        MOVX    @DPTR,A
//  184  if(done) 
        MOV     A,R0
        MOV     C,0xE0 /* A   */.0
        JNC     ??CrossCallReturnLabel_7
//  185  {
//  186    osal_start_timerEx(zclOnOffLight_TaskID, 
//  187                       ZCL_DEVICE_RESTORE_INTERRUPT_EVENT,
//  188                       80);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x50
        MOV     R5,#0x0
        MOV     R2,#0x20
        LCALL   ?Subroutine3 & 0xFFFF
//  189  } 
//  190 }
??CrossCallReturnLabel_7:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock7
        REQUIRE _A_P0
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond9) CFA_SP SP+-5
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond10) CFA_SP SP+-5
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOV     R3,#0x0
        MOV     DPTR,#zclOnOffLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond13) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond13) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond13) CFA_SP SP+-5
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond14) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond14) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond14) CFA_SP SP+-5
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond15) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond15) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond15) CFA_SP SP+-5
        CFI Block cfiPicker16 Using cfiCommon1
        CFI (cfiPicker16) NoFunction
        CFI (cfiPicker16) Picker
        MOV     R3,#0x0
        LCALL   ??zclLightReportEvent?relay
        MOV     R0,#0x1
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiPicker16
//  191 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  192 void zclRestoreInterruptEvent(void)
zclRestoreInterruptEvent:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function zclRestoreInterruptEvent
        CODE
//  193 {
        ; Saved register size: 0
        ; Auto size: 0
//  194   //if(P0_4 = 0 || P0_4 = 1)    //µ•∂¿‘⁄∞¥œ¬ªÚ’ﬂ√ª∞¥œ¬µƒ ±∫Ú£¨¥Ê‘⁄—” ±¥•√˛≤ª¡È√Ù
//  195   //{
//  196   //  P0IFG = 0;
//  197   //  P0IF = 0; 
//  198   //  P0IEN |= BV(4);
//  199   //}
//  200   
//  201   P0IFG =0;         //√ø¥Œ÷–∂œ÷Æ∫Û∂º“™÷ÿ–¬‘ –Ì÷–∂œ
        LCALL   ?Subroutine1 & 0xFFFF
//  202   P0IF = 0;
//  203   P0IEN |= BV(4);
//  204   P0IEN |= BV(5);
//  205   P0IEN |= BV(6);
//  206   P0IEN |= BV(7);
//  207 }
??CrossCallReturnLabel_0:
        LJMP    ?BRET
        CFI EndBlock cfiBlock17
        REQUIRE P0IFG
        REQUIRE _A_IRCON
        REQUIRE P0IEN
//  208 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  209 void zclFactoryResetInit(void)
zclFactoryResetInit:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function zclFactoryResetInit
        CODE
//  210 {
        ; Saved register size: 0
        ; Auto size: 0
//  211   P2SEL &= ~BV(0);
        ANL     0xf5,#0xfe
//  212   P2DIR &= ~BV(0);
        ANL     0xff,#0xfe
//  213   P2INP &= ~BV(7);
        ANL     0xf7,#0x7f
//  214   P2INP &= ~BV(0);
        ANL     0xf7,#0xfe
//  215   P2IEN |= BV(0);
        ORL     0xac,#0x1
//  216   
//  217   PICTL |= (0x1 << 3);
        ORL     0x8c,#0x8
//  218   IEN2 |= (0x1 << 1);
        ORL     0x9a,#0x2
//  219   P2IFG = 0;
        MOV     0x8b,#0x0
//  220   P2IF = 0;
        CLR     0xe8.0
//  221 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock18
        REQUIRE P2SEL
        REQUIRE P2DIR
        REQUIRE P2INP
        REQUIRE P2IEN
        REQUIRE PICTL
        REQUIRE IEN2
        REQUIRE P2IFG
        REQUIRE _A_IRCON2
//  222 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  223 void zclFactoryResetEvent(void)
zclFactoryResetEvent:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function zclFactoryResetEvent
        CODE
//  224 {
        FUNCALL zclFactoryResetEvent, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  225     if (zcl_factoryReset > ZCL_FACTORY_RESET_TIMECOUNT) 
        MOV     DPTR,#zcl_factoryReset
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0xb
        JC      ??zclFactoryResetEvent_0
//  226      {
//  227        
//  228          osal_start_timerEx(zclOnOffLight_TaskID, 
//  229                             ZCL_DEVICE_SOFT_RESTART_EVENT,
//  230                             ZCL_FACTORY_RESET_HINT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R2,#0x40
        LCALL   ?Subroutine3 & 0xFFFF
//  231      }
??CrossCallReturnLabel_8:
        SJMP    ??CrossCallReturnLabel_1
//  232      
//  233   else 
//  234   {
//  235     g_u8restFlag = 0;
??zclFactoryResetEvent_0:
        MOV     DPTR,#g_u8restFlag
        CLR     A
        MOVX    @DPTR,A
//  236     zcl_factoryReset = 0;
        MOV     DPTR,#zcl_factoryReset
        MOVX    @DPTR,A
//  237     P0IFG = 0;
        LCALL   ?Subroutine1 & 0xFFFF
//  238     P0IF = 0;
//  239     P0IEN |= BV(4);
//  240     P0IEN |= BV(5);
//  241     P0IEN |= BV(6);
//  242     P0IEN |= BV(7);
//  243     
//  244   }
//  245 }  
??CrossCallReturnLabel_1:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock19
        REQUIRE P0IFG
        REQUIRE _A_IRCON
        REQUIRE P0IEN

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond21) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond21) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond21) CFA_SP SP+-5
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOV     0x89,#0x0
        CLR     0xc0.5
        ORL     0xab,#0x10
        ORL     0xab,#0x20
        ORL     0xab,#0x40
        ORL     0xab,#0x80
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22
//  246 //÷–∂œ,À˘”–Õ‚≤ø÷–∂œ»Îø⁄

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  247 HAL_ISR_FUNCTION(zclLightControlPort0Isr, P0INT_VECTOR)
zclLightControlPort0Isr:
        CFI Block cfiBlock23 Using cfiCommon1
        CFI Function zclLightControlPort0Isr
        CODE
//  248 {
        FUNCALL zclLightControlPort0Isr, osal_start_timerEx
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  249   HAL_ENTER_ISR();
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R6,A
        SETB    0xa8.7
//  250   
//  251   zcl_interruptNo = 0;
        MOV     DPTR,#zcl_interruptNo
        CLR     A
        MOVX    @DPTR,A
//  252   if (P0IFG & 0x10) {     //≈–∂œœ‡”¶π‹Ω≈µƒ÷–∂œ±Í÷æŒª
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.4
        JNC     ??zclLightControlPort0Isr_0
//  253     zcl_interruptNo |= 1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  254     P0IEN &= ~BV(4);
        ANL     0xab,#0xef
//  255   }
//  256   if (P0IFG & 0x20) {
??zclLightControlPort0Isr_0:
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.5
        JNC     ??zclLightControlPort0Isr_1
//  257     P0IEN &= ~BV(5);
        ANL     0xab,#0xdf
//  258     zcl_interruptNo |= BV(5);
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.5
        MOVX    @DPTR,A
//  259   }
//  260   if (P0IFG & 0x40) {
??zclLightControlPort0Isr_1:
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.6
        JNC     ??zclLightControlPort0Isr_2
//  261     P0IEN &= ~BV(6);
        ANL     0xab,#0xbf
//  262     zcl_interruptNo |= BV(6);
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.6
        MOVX    @DPTR,A
//  263   }
//  264   if (P0IFG & 0x80) {
??zclLightControlPort0Isr_2:
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.7
        JNC     ??zclLightControlPort0Isr_3
//  265     P0IEN &= ~BV(7);
        ANL     0xab,#0x7f
//  266     zcl_interruptNo |= BV(7);
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.7
        MOVX    @DPTR,A
//  267   }
//  268   
//  269   if( zcl_interruptNo ) {
??zclLightControlPort0Isr_3:
        MOVX    A,@DPTR
        JZ      ??zclLightControlPort0Isr_4
//  270     zcl_factoryReset ++;        //∞¥º¸÷–∂œÕ≥º∆
        MOV     DPTR,#zcl_factoryReset
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  271     osal_start_timerEx(zclOnOffLight_TaskID, 
//  272                        ZCL_DEVICE_TOUCHPANEL_EVENT,
//  273                        20);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#zclOnOffLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  274   }
//  275   
//  276   P0IFG = 0;
??zclLightControlPort0Isr_4:
        MOV     0x89,#0x0
//  277   P0IF = 0;
        CLR     0xc0.5
//  278   CLEAR_SLEEP_MODE();
//  279   HAL_EXIT_ISR();
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  280 }
        MOV     R7,#0x1
        LJMP    ?INTERRUPT_LEAVE_XSP
        CFI EndBlock cfiBlock23
        REQUIRE _A_IEN0
        REQUIRE P0IFG
        REQUIRE P0IEN
        REQUIRE _A_IRCON

        COMMON INTVEC:CODE:ROOT(0)
        ORG 107
`??zclLightControlPort0Isr??INTVEC 107`:
        LJMP       (zclLightControlPort0Isr)

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclLightControlInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclLightControlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclLightControlTouchPanelEnable?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclLightControlTouchPanelEnable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclLightReportEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclLightReportEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclTouchPanelEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclTouchPanelEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclRestoreInterruptEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclRestoreInterruptEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclFactoryResetInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclFactoryResetInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclFactoryResetEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclFactoryResetEvent

        END
//  281 
// 
// 574 bytes in segment BANKED_CODE
//  42 bytes in segment BANK_RELAYS
//   3 bytes in segment INTVEC
// 110 bytes in segment NEAR_CODE
//  20 bytes in segment SFR_AN
//  15 bytes in segment XDATA_Z
// 
// 726 bytes of CODE  memory (+  3 bytes shared)
//   0 bytes of DATA  memory (+ 20 bytes shared)
//  15 bytes of XDATA memory
//
//Errors: none
//Warnings: none
