///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        30/Aug/2017  10:29:03 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\work space\Smart Product_zstack2.5.1a\Two      /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\Source\zcl_light_control.c  /
//    Command line       =  -f "D:\work space\Smart Product_zstack2.5.1a\Two  /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\Tools\CC2530DB\ /
//                          f8wRouter.cfg" (-DCPU32MHZ -DROOT=__near_func     /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK -DNV_RESTORE         /
//                          -DNV_INIT -DHAL_PA_LNA -DHAL_KEY=FALSE            /
//                          -DHAL_LED=FALSE -DHAL_LCD=FALSE -DHAL_ADC=FALSE   /
//                          -DWDT_IN_PM1 -DTC_LINKKEY_JOIN                    /
//                          -DMAX_NEIGHBOR_ENTRIES=48 -DTVSA_DATA_CNF=1       /
//                          -DPACKET_FILTER_STATS -DNWK_LINK_STATUS_PERIOD=30 /
//                          ) -f "D:\work space\Smart                         /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\Tools\CC2530DB\ /
//                          f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=1            /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x06108800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=5000            /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          -DDEFAULT_KEY={0x79,0x69,0x20,0x68,0x75,0x69,     /
//                          0x20,0x79,0x75,0x6E,0x20,0x73,0x6D,0x61,0x72,     /
//                          0x74} -DMAC_MAX_FRAME_SIZE=116                    /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=0           /
//                          -DQUEUED_POLL_RATE=0 -DRESPONSE_POLL_RATE=0       /
//                          -DREJOIN_POLL_RATE=440) -f "D:\work space\Smart   /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\Tools\CC2530DB\ /
//                          f8wZCL.cfg" (-DZCL_READ -DZCL_WRITE -DZCL_REPORT  /
//                          -DZCL_BASIC -DZCL_IDENTIFY -DZCL_ON_OFF           /
//                          -DZCL_KEY_ESTABLISH -DZCL_KEY_ESTABLISHMENT_KEY_G /
//                          ENERATE_TIMEOUT=4 -DZCL_KEY_ESTABLISHMENT_MAC_GEN /
//                          ERATE_TIMEOUT=10 -DZCL_KEY_ESTABLISHMENT_EKEY_GEN /
//                          ERATE_TIMEOUT=10 -DZCL_LOAD_CONTROL               /
//                          -DZCL_SIMPLE_METERING -DZCL_PRICING               /
//                          -DZCL_MESSAGE -DZCL_TUNNELING -DZCL_TOU)          /
//                          -DZCL_DEVICE_MGMT "D:\work space\Smart            /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\Source\zcl_light_control.c" /
//                           -lC "D:\work space\Smart                         /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\RouterDeviceEB\Lis /
//                          t\" -lA "D:\work space\Smart                      /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\RouterDeviceEB\Lis /
//                          t\" --diag_suppress Pe001,Pa010 -o "D:\work       /
//                          space\Smart Product_zstack2.5.1a\Two              /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\RouterDeviceEB\Obj /
//                          \" -e --debug --core=plain --dptr=16,1            /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I "D:\work space\Smart Product_zstack2.5.1a\Two  /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\" -I "D:\work      /
//                          space\Smart Product_zstack2.5.1a\Two              /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\Source\" -I     /
//                          "D:\work space\Smart Product_zstack2.5.1a\Two     /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\Source\" -I  /
//                          "D:\work space\Smart Product_zstack2.5.1a\Two     /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\ZMain\TI2 /
//                          530DB\" -I "D:\work space\Smart                   /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\hal\include\" -I "D:\work space\Smart     /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\hal\target\CC2530EB\" -I "D:\work         /
//                          space\Smart Product_zstack2.5.1a\Two              /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mac\include\" -I "D:\work space\Smart     /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mac\high_level\" -I "D:\work space\Smart  /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mac\low_level\srf04\" -I "D:\work         /
//                          space\Smart Product_zstack2.5.1a\Two              /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mac\low_level\srf04\single_chip\" -I      /
//                          "D:\work space\Smart Product_zstack2.5.1a\Two     /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mt\" -I "D:\work space\Smart              /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\osal\include\" -I "D:\work space\Smart    /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\services\saddr\" -I "D:\work space\Smart  /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\services\sdata\" -I "D:\work space\Smart  /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\af\" -I "D:\work space\Smart        /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\nwk\" -I "D:\work space\Smart       /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\sapi\" -I "D:\work space\Smart      /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\sec\" -I "D:\work space\Smart       /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\sys\" -I "D:\work space\Smart       /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\zcl\" -I "D:\work space\Smart       /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\zdo\" -I "D:\work space\Smart       /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\zmac\" -I "D:\work space\Smart            /
//                          Product_zstack2.5.1a\Two                          /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\..\..\..\..\..\Com /
//                          ponents\zmac\f8w\" -Oh --require_prototypes       /
//    List file          =  D:\work space\Smart Product_zstack2.5.1a\Two      /
//                          YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC /
//                          2530-2.5.1a Green V3.1\Projects\zstack\HomeAutoma /
//                          tion\SmartSwitchLight\CC2530DB\RouterDeviceEB\Lis /
//                          t\zcl_light_control.s51                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME zcl_light_control

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?INTERRUPT_ENTER_XSP
        EXTERN ?INTERRUPT_LEAVE_XSP
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??zclFactoryResetEvent?relay
        FUNCTION ??zclFactoryResetEvent?relay,0203H
        PUBLIC ??zclLightControlInit?relay
        FUNCTION ??zclLightControlInit?relay,0203H
        PUBWEAK `??zclLightControlPort0Isr??INTVEC 107`
        PUBLIC ??zclLightControlTouchPanelEnable?relay
        FUNCTION ??zclLightControlTouchPanelEnable?relay,0203H
        PUBLIC ??zclLightReportEvent?relay
        FUNCTION ??zclLightReportEvent?relay,0203H
        PUBLIC ??zclRestoreInterruptEvent?relay
        FUNCTION ??zclRestoreInterruptEvent?relay,0203H
        PUBLIC ??zclTouchPanelEvent?relay
        FUNCTION ??zclTouchPanelEvent?relay,0203H
        PUBWEAK P0DIR
        PUBWEAK P0IEN
        PUBWEAK P0IFG
        PUBWEAK P0INP
        PUBWEAK P0SEL
        PUBWEAK P2INP
        PUBWEAK PICTL
        PUBWEAK _A_IEN0
        PUBWEAK _A_IEN1
        PUBWEAK _A_IRCON
        PUBWEAK _A_P0
        PUBLIC zclFactoryResetEvent
        FUNCTION zclFactoryResetEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zclLightControlInit
        FUNCTION zclLightControlInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zclLightControlPort0Isr
        FUNCTION zclLightControlPort0Isr,021233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 15, STACK
        PUBLIC zclLightControlTouchPanelEnable
        FUNCTION zclLightControlTouchPanelEnable,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclLightReportEvent
        FUNCTION zclLightReportEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC zclRestoreInterruptEvent
        FUNCTION zclRestoreInterruptEvent,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zclTouchPanelEvent
        FUNCTION zclTouchPanelEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_mem_alloc      SYMBOL "osal_mem_alloc"
zcl_SendReportCmd   SYMBOL "zcl_SendReportCmd"
osal_mem_free       SYMBOL "osal_mem_free"
osal_nv_write       SYMBOL "osal_nv_write"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??zcl_SendReportCmd?relay SYMBOL "?relay", zcl_SendReportCmd
zclFactoryResetEvent SYMBOL "zclFactoryResetEvent"
??zclFactoryResetEvent?relay SYMBOL "?relay", zclFactoryResetEvent
zclLightControlInit SYMBOL "zclLightControlInit"
??zclLightControlInit?relay SYMBOL "?relay", zclLightControlInit
zclLightControlPort0Isr SYMBOL "zclLightControlPort0Isr"
`??zclLightControlPort0Isr??INTVEC 107` SYMBOL "??INTVEC 107", zclLightControlPort0Isr
zclLightControlTouchPanelEnable SYMBOL "zclLightControlTouchPanelEnable"
??zclLightControlTouchPanelEnable?relay SYMBOL "?relay", zclLightControlTouchPanelEnable
zclLightReportEvent SYMBOL "zclLightReportEvent"
??zclLightReportEvent?relay SYMBOL "?relay", zclLightReportEvent
zclRestoreInterruptEvent SYMBOL "zclRestoreInterruptEvent"
??zclRestoreInterruptEvent?relay SYMBOL "?relay", zclRestoreInterruptEvent
zclTouchPanelEvent  SYMBOL "zclTouchPanelEvent"
??zclTouchPanelEvent?relay SYMBOL "?relay", zclTouchPanelEvent

        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendReportCmd
        FUNCTION zcl_SendReportCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??zcl_SendReportCmd?relay
        FUNCTION ??zcl_SendReportCmd?relay,00H
        EXTERN ReJoinNetFlagInFlash
        EXTERN ledcontrol
        EXTERN zclDevice_NwkState
        EXTERN zclOnOffLight0_OnOff
        EXTERN zclOnOffLight1_OnOff
        EXTERN zclOnOffLight_TaskID
        EXTERN zcl_Led_Blink

// D:\work space\Smart Product_zstack2.5.1a\Two YHY\SmartLightSwitch\two\v1.04.2_≤‚ ‘÷–\ZStack-CC2530-2.5.1a Green V3.1\Projects\zstack\HomeAutomation\SmartSwitchLight\Source\zcl_light_control.c
//    1 #include "zcl_light_control.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,089H
// unsigned char volatile __sfr P0IFG
P0IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08cH
// unsigned char volatile __sfr PICTL
PICTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08fH
// unsigned char volatile __sfr P0INP
P0INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0abH
// unsigned char volatile __sfr P0IEN
P0IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c0H
// union <unnamed> volatile __sfr _A_IRCON
_A_IRCON:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f7H
// unsigned char volatile __sfr P2INP
P2INP:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//    2 #include "zcl_onofflight.h"
//    3 #include "zcl.h"
//    4 #include "zcl_device_info.h"
//    5 
//    6 extern byte zclOnOffLight_TaskID;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    7 static afAddrType_t zcl_Coord_nwkAddr;
zcl_Coord_nwkAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    8 static uint8 zcl_SeqNum = 0;
zcl_SeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    9 static uint8 zcl_interruptNo = 0;
zcl_interruptNo:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   10 void zclFactoryResetEvent(void);

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   11 static uint8 zcl_factoryReset = 0;
zcl_factoryReset:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   12 extern uint8 zcl_Led_Blink;
//   13 
//   14 extern devStates_t zclDevice_NwkState;
//   15 extern uint8 ReJoinNetFlagInFlash[1];
//   16 
//   17 /*********************************************************************
//   18  * @fn      zclLightControlInit
//   19  *
//   20  * @brief   ≈‰÷√÷∏ æµ∆p0.5 ≈‰÷√ ‰≥ˆIOø⁄p0.2 p0.3
//   21  *          
//   22  * @param   none
//   23  *
//   24  * @return  none
//   25  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   26 void zclLightControlInit(void)
zclLightControlInit:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function zclLightControlInit
        CODE
//   27 {
        FUNCALL zclLightControlInit, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   28   P0SEL &= ~BV(5); //LED1
        ANL     0xf3,#0xdf
//   29   P0DIR |= BV(5);
        ORL     0xfd,#0x20
//   30 
//   31  ///init P1.4 and P1.5 for relay control///////////
//   32   P0SEL &= ~BV(2);
        ANL     0xf3,#0xfb
//   33   P0DIR |= BV(2);
        ORL     0xfd,#0x4
//   34   P0SEL &= ~BV(3);
        ANL     0xf3,#0xf7
//   35   P0DIR |= BV(3); 
        ORL     0xfd,#0x8
//   36   
//   37   // default to turn off the light
//   38   LIGHT_TURN_OFF_LIGHT0();
        CLR     0x80.2
//   39   LIGHT_TURN_OFF_LIGHT1(); 
        CLR     0x80.3
//   40   
//   41   ///end init for relay control////////
//   42   osal_start_timerEx(zclOnOffLight_TaskID, 
//   43                          ZCL_DEVICE_INIT_DONE_EVENT,
//   44                          500);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R2,#0x8
        LCALL   ?Subroutine2 & 0xFFFF
//   45   
//   46   zcl_Coord_nwkAddr.addrMode = afAddr16Bit;
??CrossCallReturnLabel_4:
        MOV     DPTR,#zcl_Coord_nwkAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//   47   zcl_Coord_nwkAddr.addr.shortAddr = 0x0000;
        MOV     DPTR,#zcl_Coord_nwkAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//   48   zcl_Coord_nwkAddr.endPoint = 0xF0;
        MOV     DPTR,#zcl_Coord_nwkAddr + 9
        MOV     A,#-0x10
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock0
//   49 }
        REQUIRE ?Subroutine0
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond2 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond3 Using cfiCommon0
        CFI (cfiCond3) NoFunction
        CFI (cfiCond3) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond3) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond3) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond3) CFA_SP SP+-5
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     R3,#0x0
        CFI EndBlock cfiCond2
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine4_0:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_4
        CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond7) CFA_SP SP+-5
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond8) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond8) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond8) CFA_SP SP+-5
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker10 Using cfiCommon1
        CFI (cfiPicker10) NoFunction
        CFI (cfiPicker10) Picker
        MOV     DPTR,#zclOnOffLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiPicker10
//   50 /*********************************************************************
//   51  * @fn      zclLightControlTouchPanelEnable
//   52  *
//   53  * @brief   ≈‰÷√∞¥º¸p0.0 p0.1 ≈‰÷√∏¥Œª∞¥º¸p0.7
//   54  *          
//   55  * @param   none
//   56  *
//   57  * @return  none
//   58  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   59 void zclLightControlTouchPanelEnable(void)
zclLightControlTouchPanelEnable:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function zclLightControlTouchPanelEnable
        CODE
//   60 {
        ; Saved register size: 0
        ; Auto size: 0
//   61   
//   62   P0SEL &= ~BV(0);
        ANL     0xf3,#0xfe
//   63   P0DIR &= ~BV(0);
        ANL     0xfd,#0xfe
//   64   P0INP &= ~BV(0);
        ANL     0x8f,#0xfe
//   65   P0IEN |= BV(0);
        ORL     0xab,#0x1
//   66   
//   67   P0SEL &= ~BV(1);
        ANL     0xf3,#0xfd
//   68   P0DIR &= ~BV(1);
        ANL     0xfd,#0xfd
//   69   P0INP &= ~BV(1);
        ANL     0x8f,#0xfd
//   70   P0IEN |= BV(1);  
        ORL     0xab,#0x2
//   71   
//   72   P0SEL &= ~BV(7);
        ANL     0xf3,#0x7f
//   73   P0DIR &= ~BV(7);
        ANL     0xfd,#0x7f
//   74   P0INP &= ~BV(7);
        ANL     0x8f,#0x7f
//   75   P0IEN |= BV(7); 
        ORL     0xab,#0x80
//   76   
//   77   P2INP &= ~BV(5);
        ANL     0xf7,#0xdf
//   78   PICTL |= (0x1 << 0);
        ORL     0x8c,#0x1
//   79   IEN1 |= (0x1 << 5);
        SETB    0xb8.5
//   80 
//   81   P0IFG = 0;
        MOV     0x89,#0x0
//   82   P0IF = 0;
        CLR     0xc0.5
//   83 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock11
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE P0INP
        REQUIRE P0IEN
        REQUIRE P2INP
        REQUIRE PICTL
        REQUIRE _A_IEN1
        REQUIRE P0IFG
        REQUIRE _A_IRCON
//   84 /*********************************************************************
//   85  * @fn      zclLightReportEvent
//   86  *
//   87  * @brief   ◊¥Ã¨…œ±®
//   88  *          
//   89  * @param   endpoint - ∂Àµ„
//   90  *          zclOnOffLight_OnOff - µ±«∞◊¥Ã¨
//   91  *
//   92  * @return  none
//   93  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   94 void zclLightReportEvent(uint16 endpoint, uint8 *zclOnOffLight_OnOff)
zclLightReportEvent:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function zclLightReportEvent
        CODE
//   95 {
        FUNCALL zclLightReportEvent, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclLightReportEvent, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclLightReportEvent, zcl_SendReportCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclLightReportEvent, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//   96   zclReportCmd_t *pReportCmd;
//   97 
//   98   pReportCmd = osal_mem_alloc( sizeof(zclReportCmd_t) + sizeof(zclReport_t) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
//   99   if ( pReportCmd != NULL )
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??zclLightReportEvent_0
//  100   {
//  101     pReportCmd->numAttr = 1;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x1
        MOVX    @DPTR,A
//  102     pReportCmd->attrList[0].attrID = ATTRID_ON_OFF;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine3 & 0xFFFF
//  103     pReportCmd->attrList[0].dataType = ZCL_DATATYPE_UINT8;
??CrossCallReturnLabel_2:
        MOV     A,#0x20
        LCALL   ?Subroutine3 & 0xFFFF
//  104     pReportCmd->attrList[0].attrData = (void *)(zclOnOffLight_OnOff);
??CrossCallReturnLabel_3:
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  105     
//  106     if (afStatus_SUCCESS != zcl_SendReportCmd( endpoint, 
//  107                                               &zcl_Coord_nwkAddr,
//  108                                               ZCL_CLUSTER_ID_GEN_ON_OFF,
//  109                                               pReportCmd, ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, 
//  110                                               zcl_SeqNum++ ))
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#zcl_Coord_nwkAddr & 0xff
        MOV     R3,#(zcl_Coord_nwkAddr >> 8) & 0xff
        MOV     A,R6
        MOV     R1,A
        LCALL   ??zcl_SendReportCmd?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JZ      ??zclLightReportEvent_1
//  111     {
//  112       zcl_SendReportCmd( endpoint, 
//  113                         &zcl_Coord_nwkAddr,
//  114                         ZCL_CLUSTER_ID_GEN_ON_OFF,
//  115                         pReportCmd, ZCL_FRAME_SERVER_CLIENT_DIR, TRUE, 
//  116                         zcl_SeqNum++ );
        LCALL   ?Subroutine1 & 0xFFFF
//  117     }
??CrossCallReturnLabel_1:
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#zcl_Coord_nwkAddr & 0xff
        MOV     R3,#(zcl_Coord_nwkAddr >> 8) & 0xff
        MOV     A,R6
        MOV     R1,A
        LCALL   ??zcl_SendReportCmd?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  118     osal_mem_free( pReportCmd );
??zclLightReportEvent_1:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_mem_free?relay
//  119   }
//  120 }
??zclLightReportEvent_0:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     DPTR,#zcl_SeqNum
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        ADD     A,R0
        MOVX    @DPTR,A
        ; Setup parameters for call to function zcl_SendReportCmd
        ; Setup parameters for call to function zcl_SendReportCmd
        MOV     A,R0
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18
//  121 /*********************************************************************
//  122  * @fn      zclTouchPanelEvent
//  123  *
//  124  * @brief   ∞¥º¸ø™πÿ
//  125  *          
//  126  * @param   none
//  127  *
//  128  * @return  none
//  129  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  130 void zclTouchPanelEvent(void)
zclTouchPanelEvent:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function zclTouchPanelEvent
        CODE
//  131 {
        FUNCALL zclTouchPanelEvent, zclLightReportEvent
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclTouchPanelEvent, zclLightReportEvent
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclTouchPanelEvent, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  132   int done = 0;
        MOV     R0,#0x0
//  133   if( zcl_interruptNo & 1 ) {
        MOV     DPTR,#zcl_interruptNo
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??zclTouchPanelEvent_0
//  134    if (P0_0 == 0) {
        MOV     C,0x80.0
        JC      ??zclTouchPanelEvent_1
//  135        if (zclOnOffLight0_OnOff == LIGHT_ON) {
        MOV     DPTR,#zclOnOffLight0_OnOff
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclTouchPanelEvent_2
//  136         zclOnOffLight0_OnOff = LIGHT_OFF;
        CLR     A
        MOVX    @DPTR,A
//  137         LIGHT_TURN_OFF_LIGHT0();
        CLR     0x80.2
        SJMP    ??zclTouchPanelEvent_3
//  138        } else {
//  139         zclOnOffLight0_OnOff = LIGHT_ON;
??zclTouchPanelEvent_2:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  140         LIGHT_TURN_ON_LIGHT0();
        SETB    0x80.2
//  141       }
//  142       zclLightReportEvent(ONOFFLIGHT0_ENDPOINT, &zclOnOffLight0_OnOff); 
??zclTouchPanelEvent_3:
        ; Setup parameters for call to function zclLightReportEvent
        MOV     R4,#zclOnOffLight0_OnOff & 0xff
        MOV     R5,#(zclOnOffLight0_OnOff >> 8) & 0xff
        MOV     R2,#0x10
        MOV     R3,#0x0
        LCALL   ??zclLightReportEvent?relay
//  143       //done = 1;
//  144    }
//  145    done = 1;
??zclTouchPanelEvent_1:
        MOV     R0,#0x1
//  146   }
//  147   if( zcl_interruptNo & 2 ) {
??zclTouchPanelEvent_0:
        MOV     DPTR,#zcl_interruptNo
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??zclTouchPanelEvent_4
//  148     if (P0_1 == 0) {
        MOV     C,0x80.1
        JC      ??zclTouchPanelEvent_5
//  149       if (zclOnOffLight1_OnOff == LIGHT_ON) {
        MOV     DPTR,#zclOnOffLight1_OnOff
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclTouchPanelEvent_6
//  150         zclOnOffLight1_OnOff = LIGHT_OFF;
        CLR     A
        MOVX    @DPTR,A
//  151         LIGHT_TURN_OFF_LIGHT1();
        CLR     0x80.3
        SJMP    ??zclTouchPanelEvent_7
//  152       } else {
//  153         zclOnOffLight1_OnOff = LIGHT_ON;
??zclTouchPanelEvent_6:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  154         LIGHT_TURN_ON_LIGHT1();
        SETB    0x80.3
//  155       }  
//  156       zclLightReportEvent(ONOFFLIGHT1_ENDPOINT, &zclOnOffLight1_OnOff);
??zclTouchPanelEvent_7:
        ; Setup parameters for call to function zclLightReportEvent
        MOV     R4,#zclOnOffLight1_OnOff & 0xff
        MOV     R5,#(zclOnOffLight1_OnOff >> 8) & 0xff
        MOV     R2,#0x11
        MOV     R3,#0x0
        LCALL   ??zclLightReportEvent?relay
//  157       //done = 1;
//  158     }
//  159     done = 1;
??zclTouchPanelEvent_5:
        MOV     R0,#0x1
//  160   }  
//  161   zcl_interruptNo = 0;
??zclTouchPanelEvent_4:
        MOV     DPTR,#zcl_interruptNo
        CLR     A
        MOVX    @DPTR,A
//  162   
//  163   if(done) 
        MOV     A,R0
        MOV     C,0xE0 /* A   */.0
        JNC     ??CrossCallReturnLabel_5
//  164   {
//  165     osal_start_timerEx(zclOnOffLight_TaskID, 
//  166                        ZCL_DEVICE_RESTORE_INTERRUPT_EVENT,
//  167                        80);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x50
        MOV     R5,#0x0
        MOV     R2,#0x20
        LCALL   ?Subroutine2 & 0xFFFF
//  168   }
//  169 }
??CrossCallReturnLabel_5:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock19
        REQUIRE _A_P0
//  170 /*********************************************************************
//  171  * @fn      zclRestoreInterruptEvent
//  172  *
//  173  * @brief   ø™÷–∂œ
//  174  *          
//  175  * @param   none
//  176  *
//  177  * @return  none
//  178  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  179 void zclRestoreInterruptEvent(void)
zclRestoreInterruptEvent:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function zclRestoreInterruptEvent
        CODE
//  180 {
        ; Saved register size: 0
        ; Auto size: 0
//  181     P0IFG =0;
        MOV     0x89,#0x0
//  182     P0IF = 0;
        CLR     0xc0.5
//  183     P0IEN |= BV(0);
        ORL     0xab,#0x1
//  184     P0IEN |= BV(1);
        ORL     0xab,#0x2
//  185     P0IEN |= BV(7);
        ORL     0xab,#0x80
//  186 
//  187 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock20
        REQUIRE P0IFG
        REQUIRE _A_IRCON
        REQUIRE P0IEN
//  188 /*********************************************************************
//  189  * @fn      zclFactoryResetEvent
//  190  *
//  191  * @brief   ≥§∞¥<6s÷∏ æµ∆≥£¡¡À…ø™÷ÿ∆Ù£¨≥§∞¥>=6s∏¥Œª÷∏ æµ∆øÏ…¡
//  192  *          
//  193  * @param   none
//  194  *
//  195  * @return  none
//  196  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  197 void zclFactoryResetEvent(void)
zclFactoryResetEvent:
        CFI Block cfiBlock21 Using cfiCommon0
        CFI Function zclFactoryResetEvent
        CODE
//  198 {
        FUNCALL zclFactoryResetEvent, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclFactoryResetEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclFactoryResetEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclFactoryResetEvent, Onboard_soft_reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclFactoryResetEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  199   if(P0_7 == 0){
        MOV     C,0x80.7
        MOV     DPTR,#zcl_factoryReset
        MOVX    A,@DPTR
        JC      ??zclFactoryResetEvent_0
//  200     if (zcl_factoryReset >= ZCL_FACTORY_RESET_TIMECOUNT) 
        CLR     C
        SUBB    A,#0x14
        JC      ??zclFactoryResetEvent_1
//  201     {
//  202       if(zcl_Led_Blink == 0)
        MOV     DPTR,#zcl_Led_Blink
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_7 & 0xFFFF
//  203       {
//  204         ReJoinNetFlagInFlash[0] = 0x01;//±Ì æ…Ë±∏∏¥Œª÷ÿ∆Ù
        MOV     DPTR,#ReJoinNetFlagInFlash
        MOV     A,#0x1
        MOVX    @DPTR,A
//  205         osal_nv_write(ZDAPP_NV_SYSTEM_RESTART_FLAG,0,sizeof(ReJoinNetFlagInFlash),ReJoinNetFlagInFlash);
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#ReJoinNetFlagInFlash & 0xff
        MOV     ?V0 + 1,#(ReJoinNetFlagInFlash >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  206         osal_start_timerEx(zclOnOffLight_TaskID, 
//  207                            ZCL_DEVICE_SOFT_RESTART_EVENT,
//  208                            ZCL_FACTORY_RESET_HINT);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x38
        MOV     R5,#0x0
        MOV     R2,#0x40
        LCALL   ?Subroutine2 & 0xFFFF
//  209         zcl_factoryReset = 0;
??CrossCallReturnLabel_6:
        MOV     DPTR,#zcl_factoryReset
        CLR     A
        MOVX    @DPTR,A
        SJMP    ??CrossCallReturnLabel_7
//  210       }
//  211     }else{
//  212       LED_RED_ON();
??zclFactoryResetEvent_1:
        SETB    0x80.5
//  213       ledcontrol=1;
        MOV     DPTR,#ledcontrol
        MOV     A,#0x1
        MOVX    @DPTR,A
//  214       zcl_factoryReset++;
        MOV     DPTR,#zcl_factoryReset
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  215       osal_start_timerEx(zclOnOffLight_TaskID, 
//  216                          ZCL_DEVICE_RESET_EVENT,
//  217                          300);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x2c
        MOV     R5,#0x1
        MOV     R2,#0x0
        MOV     R3,#0x4
        SJMP    ??zclFactoryResetEvent_2
//  218       
//  219     }
//  220   }
//  221   else 
//  222   {
//  223     if(( zcl_factoryReset < 20 ) && ( P0_7 == 1 )){
??zclFactoryResetEvent_0:
        CLR     C
        SUBB    A,#0x14
        JNC     ??zclFactoryResetEvent_3
        MOV     C,0x80.7
        JNC     ??zclFactoryResetEvent_3
//  224       LED_RED_OFF();
        CLR     0x80.5
//  225       P0IEN |= BV(7);
        ORL     0xab,#0x80
//  226       zcl_factoryReset=0;
        CLR     A
        MOVX    @DPTR,A
//  227       SystemResetSoft();
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  228     }
//  229     LED_RED_OFF();
??zclFactoryResetEvent_3:
        CLR     0x80.5
//  230     P0IEN |= BV(7);
        ORL     0xab,#0x80
//  231     zcl_factoryReset = 0;
        CLR     A
        MOVX    @DPTR,A
//  232     if (zclDevice_NwkState != DEV_ROUTER ){
        MOV     DPTR,#zclDevice_NwkState
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??CrossCallReturnLabel_7
//  233       ledcontrol=0;
        MOV     DPTR,#ledcontrol
        CLR     A
        MOVX    @DPTR,A
//  234       osal_start_timerEx(zclOnOffLight_TaskID, 
//  235                          ZCL_DEVICE_EXIT_NETWORK_EVENT,
//  236                          2000);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,A
        MOV     R3,#0x10
//  237     }
//  238   }
??zclFactoryResetEvent_2:
        LCALL   ??Subroutine4_0 & 0xFFFF
//  239 }
??CrossCallReturnLabel_7:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock21
        REQUIRE _A_P0
        REQUIRE P0IEN
//  240 

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  241 HAL_ISR_FUNCTION(zclLightControlPort0Isr, P0INT_VECTOR)
zclLightControlPort0Isr:
        CFI Block cfiBlock22 Using cfiCommon1
        CFI Function zclLightControlPort0Isr
        CODE
//  242 {
        FUNCALL zclLightControlPort0Isr, osal_start_timerEx
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclLightControlPort0Isr, osal_start_timerEx
        LOCFRAME ISTACK, 15, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 15, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    A
        CFI A Frame(CFA_SP, 3)
        CFI CFA_SP SP+-3
        MOV     A,#-0xe
        LCALL   ?INTERRUPT_ENTER_XSP
        CFI B load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI PSW load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 15
        ; Auto size: 0
//  243   HAL_ENTER_ISR();
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R6,A
        SETB    0xa8.7
//  244   
//  245   zcl_interruptNo = 0;
        MOV     DPTR,#zcl_interruptNo
        CLR     A
        MOVX    @DPTR,A
//  246   if (P0IFG & 0x01) {//p0_0
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.0
        JNC     ??zclLightControlPort0Isr_0
//  247     P0IEN &= ~BV(0);
        ANL     0xab,#0xfe
//  248     zcl_interruptNo |= 1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  249   }
//  250   if (P0IFG & 0x02) {//p0_1
??zclLightControlPort0Isr_0:
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.1
        JNC     ??zclLightControlPort0Isr_1
//  251     P0IEN &= ~BV(1);
        ANL     0xab,#0xfd
//  252     zcl_interruptNo |= 2;
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.1
        MOVX    @DPTR,A
//  253   }
//  254   
//  255   if (P0IFG & 0x80) {//p0_7
??zclLightControlPort0Isr_1:
        MOV     A,0x89
        MOV     C,0xE0 /* A   */.7
        JNC     ??zclLightControlPort0Isr_2
//  256     if(zcl_interruptNo == 0)
        MOVX    A,@DPTR
        JNZ     ??zclLightControlPort0Isr_2
//  257     {
//  258       P0IEN &= ~BV(7);
        ANL     0xab,#0x7f
//  259       zcl_factoryReset = 0;
        MOV     DPTR,#zcl_factoryReset
        CLR     A
        MOVX    @DPTR,A
//  260       osal_start_timerEx(zclOnOffLight_TaskID, 
//  261                          ZCL_DEVICE_RESET_1_EVENT,
//  262                          100);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,A
        MOV     R2,A
        MOV     R3,#0x8
        MOV     DPTR,#zclOnOffLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  263     }
//  264   }
//  265   
//  266   if( zcl_interruptNo ) {
??zclLightControlPort0Isr_2:
        MOV     DPTR,#zcl_interruptNo
        MOVX    A,@DPTR
        JZ      ??zclLightControlPort0Isr_3
//  267     osal_start_timerEx(zclOnOffLight_TaskID, 
//  268                        ZCL_DEVICE_TOUCHPANEL_EVENT,
//  269                        100);
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x10
        MOV     R3,#0x0
        MOV     DPTR,#zclOnOffLight_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  270   }
//  271   
//  272   P0IFG = 0;
??zclLightControlPort0Isr_3:
        MOV     0x89,#0x0
//  273   P0IF = 0;
        CLR     0xc0.5
//  274   CLEAR_SLEEP_MODE();
//  275   HAL_EXIT_ISR();
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  276 }
        MOV     R7,#0x1
        LJMP    ?INTERRUPT_LEAVE_XSP
        CFI EndBlock cfiBlock22
        REQUIRE _A_IEN0
        REQUIRE P0IFG
        REQUIRE P0IEN
        REQUIRE _A_IRCON

        COMMON INTVEC:CODE:ROOT(0)
        ORG 107
`??zclLightControlPort0Isr??INTVEC 107`:
        LJMP       (zclLightControlPort0Isr)

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclLightControlInit?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclLightControlInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclLightControlTouchPanelEnable?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclLightControlTouchPanelEnable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclLightReportEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclLightReportEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclTouchPanelEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclTouchPanelEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclRestoreInterruptEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclRestoreInterruptEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclFactoryResetEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    zclFactoryResetEvent

        END
// 
// 599 bytes in segment BANKED_CODE
//  36 bytes in segment BANK_RELAYS
//   3 bytes in segment INTVEC
// 112 bytes in segment NEAR_CODE
//  11 bytes in segment SFR_AN
//  15 bytes in segment XDATA_Z
// 
// 747 bytes of CODE  memory (+  3 bytes shared)
//   0 bytes of DATA  memory (+ 11 bytes shared)
//  15 bytes of XDATA memory
//
//Errors: none
//Warnings: none
